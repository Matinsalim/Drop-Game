
Magnet_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f88  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005048  08005048  00006048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005160  08005160  00007080  2**0
                  CONTENTS
  4 .ARM          00000000  08005160  08005160  00007080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005160  08005160  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005160  08005160  00006160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005164  08005164  00006164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08005168  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000080  080051e8  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  080051e8  00007400  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000deb7  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002439  00000000  00000000  00014f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00017398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1d  00000000  00000000  00018098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d19  00000000  00000000  00018ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c83  00000000  00000000  0002a7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006753c  00000000  00000000  0003b451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a298d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b8  00000000  00000000  000a29d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000a6188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005030 	.word	0x08005030

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08005030 	.word	0x08005030

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1824      	adds	r4, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	42a3      	cmp	r3, r4
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0424      	lsls	r4, r4, #16
 8000456:	1960      	adds	r0, r4, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b087      	sub	sp, #28
 8000468:	af00      	add	r7, sp, #0
 800046a:	0004      	movs	r4, r0
 800046c:	0008      	movs	r0, r1
 800046e:	0011      	movs	r1, r2
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	1c22      	adds	r2, r4, #0
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	1dbb      	adds	r3, r7, #6
 8000478:	1c02      	adds	r2, r0, #0
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	1d7b      	adds	r3, r7, #5
 800047e:	1c0a      	adds	r2, r1, #0
 8000480:	701a      	strb	r2, [r3, #0]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8000482:	1dfb      	adds	r3, r7, #7
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b29a      	uxth	r2, r3
 8000488:	1dbb      	adds	r3, r7, #6
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b29b      	uxth	r3, r3
 800048e:	18d3      	adds	r3, r2, r3
 8000490:	b29a      	uxth	r2, r3
 8000492:	1d7b      	adds	r3, r7, #5
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	b29b      	uxth	r3, r3
 8000498:	18d3      	adds	r3, r2, r3
 800049a:	b29a      	uxth	r2, r3
 800049c:	2016      	movs	r0, #22
 800049e:	183b      	adds	r3, r7, r0
 80004a0:	3206      	adds	r2, #6
 80004a2:	32ff      	adds	r2, #255	@ 0xff
 80004a4:	801a      	strh	r2, [r3, #0]
	Checksum = 0-Checksum;
 80004a6:	183b      	adds	r3, r7, r0
 80004a8:	183a      	adds	r2, r7, r0
 80004aa:	8812      	ldrh	r2, [r2, #0]
 80004ac:	4252      	negs	r2, r2
 80004ae:	801a      	strh	r2, [r3, #0]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 80004b0:	210c      	movs	r1, #12
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	227e      	movs	r2, #126	@ 0x7e
 80004b6:	701a      	strb	r2, [r3, #0]
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	22ff      	movs	r2, #255	@ 0xff
 80004bc:	705a      	strb	r2, [r3, #1]
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2206      	movs	r2, #6
 80004c2:	709a      	strb	r2, [r3, #2]
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	1dfa      	adds	r2, r7, #7
 80004c8:	7812      	ldrb	r2, [r2, #0]
 80004ca:	70da      	strb	r2, [r3, #3]
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	711a      	strb	r2, [r3, #4]
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	1dba      	adds	r2, r7, #6
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	715a      	strb	r2, [r3, #5]
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	1d7a      	adds	r2, r7, #5
 80004de:	7812      	ldrb	r2, [r2, #0]
 80004e0:	719a      	strb	r2, [r3, #6]
 80004e2:	183b      	adds	r3, r7, r0
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	71da      	strb	r2, [r3, #7]
 80004f0:	183b      	adds	r3, r7, r0
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	721a      	strb	r2, [r3, #8]
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	22ef      	movs	r2, #239	@ 0xef
 80004fe:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 8000500:	2301      	movs	r3, #1
 8000502:	425b      	negs	r3, r3
 8000504:	1879      	adds	r1, r7, r1
 8000506:	4804      	ldr	r0, [pc, #16]	@ (8000518 <Send_cmd+0xb4>)
 8000508:	220a      	movs	r2, #10
 800050a:	f003 f923 	bl	8003754 <HAL_UART_Transmit>
}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b007      	add	sp, #28
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	20000228 	.word	0x20000228

0800051c <DF_Choose>:
{
  Send_cmd(0x03,0x00,0x01);
  HAL_Delay(200);
}
void DF_Choose (uint8_t par)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	0002      	movs	r2, r0
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x03, 0,par);
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	2003      	movs	r0, #3
 8000532:	f7ff ff97 	bl	8000464 <Send_cmd>
	HAL_Delay(200);
 8000536:	20c8      	movs	r0, #200	@ 0xc8
 8000538:	f001 fd24 	bl	8001f84 <HAL_Delay>
}
 800053c:	46c0      	nop			@ (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b002      	add	sp, #8
 8000542:	bd80      	pop	{r7, pc}

08000544 <DF_Init>:
void DF_Init (uint8_t volume)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	0002      	movs	r2, r0
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x3F, 0x00, Source);
 8000550:	2202      	movs	r2, #2
 8000552:	2100      	movs	r1, #0
 8000554:	203f      	movs	r0, #63	@ 0x3f
 8000556:	f7ff ff85 	bl	8000464 <Send_cmd>
	HAL_Delay(200);
 800055a:	20c8      	movs	r0, #200	@ 0xc8
 800055c:	f001 fd12 	bl	8001f84 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	2006      	movs	r0, #6
 800056a:	f7ff ff7b 	bl	8000464 <Send_cmd>
	HAL_Delay(500);
 800056e:	23fa      	movs	r3, #250	@ 0xfa
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	0018      	movs	r0, r3
 8000574:	f001 fd06 	bl	8001f84 <HAL_Delay>
}
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}

08000580 <DF_Pause>:
	Send_cmd(0x01, 0x00, 0x00);
	HAL_Delay(200);
}

void DF_Pause (void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	200e      	movs	r0, #14
 800058a:	f7ff ff6b 	bl	8000464 <Send_cmd>
	HAL_Delay(200);
 800058e:	20c8      	movs	r0, #200	@ 0xc8
 8000590:	f001 fcf8 	bl	8001f84 <HAL_Delay>
}
 8000594:	46c0      	nop			@ (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <ask_init>:
#include <string.h>

  
//###########################################################################################################
void ask_init(ask_t *rf, GPIO_TypeDef  *gpio, uint16_t  pin)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	1dbb      	adds	r3, r7, #6
 80005a8:	801a      	strh	r2, [r3, #0]
  if (rf == NULL)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d01a      	beq.n	80005e6 <ask_init+0x4a>
    return;
  memset(rf, 0, sizeof(ask_t));
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2254      	movs	r2, #84	@ 0x54
 80005b4:	2100      	movs	r1, #0
 80005b6:	0018      	movs	r0, r3
 80005b8:	f003 fe68 	bl	800428c <memset>
  rf->gpio = gpio;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	601a      	str	r2, [r3, #0]
  rf->pin = pin; 
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	1dba      	adds	r2, r7, #6
 80005c6:	8812      	ldrh	r2, [r2, #0]
 80005c8:	809a      	strh	r2, [r3, #4]
  _ASK_TIM.Instance->ARR = 0xFFFF;
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <ask_init+0x54>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <ask_init+0x58>)
 80005d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  rf->lastPinChangeTimeMs = HAL_GetTick(); 
 80005d2:	f001 fccd 	bl	8001f70 <HAL_GetTick>
 80005d6:	0002      	movs	r2, r0
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	609a      	str	r2, [r3, #8]
  HAL_TIM_Base_Start(&_ASK_TIM);  
 80005dc:	4b04      	ldr	r3, [pc, #16]	@ (80005f0 <ask_init+0x54>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 fc46 	bl	8002e70 <HAL_TIM_Base_Start>
 80005e4:	e000      	b.n	80005e8 <ask_init+0x4c>
    return;
 80005e6:	46c0      	nop			@ (mov r8, r8)
}
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b004      	add	sp, #16
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	20000150 	.word	0x20000150
 80005f4:	0000ffff 	.word	0x0000ffff

080005f8 <ask_loop>:
  rf->lastCNT = _ASK_TIM.Instance->CNT;
  rf->lastPinChangeTimeMs = HAL_GetTick();
}
//###########################################################################################################
void ask_loop(ask_t *rf)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  if (rf == NULL)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d100      	bne.n	8000608 <ask_loop+0x10>
 8000606:	e181      	b.n	800090c <ask_loop+0x314>
    return;
  if ((rf->newFrame == 1) && (rf->endFrame == 0) && (HAL_GetTick() - rf->lastPinChangeTimeMs > _ASK_TIMEOUT_TO_DETECT_NEW_FRAME_IN_MS))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	7b9b      	ldrb	r3, [r3, #14]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d115      	bne.n	800063c <ask_loop+0x44>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7bdb      	ldrb	r3, [r3, #15]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d111      	bne.n	800063c <ask_loop+0x44>
 8000618:	f001 fcaa 	bl	8001f70 <HAL_GetTick>
 800061c:	0002      	movs	r2, r0
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	2b32      	cmp	r3, #50	@ 0x32
 8000626:	d909      	bls.n	800063c <ask_loop+0x44>
  {
    rf->index = 0;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	741a      	strb	r2, [r3, #16]
    rf->newFrame = 0;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	739a      	strb	r2, [r3, #14]
    rf->endFrame = 0;      
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	73da      	strb	r2, [r3, #15]
 800063a:	e168      	b.n	800090e <ask_loop+0x316>
  }
  else if (rf->endFrame == 1)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7bdb      	ldrb	r3, [r3, #15]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d000      	beq.n	8000646 <ask_loop+0x4e>
 8000644:	e163      	b.n	800090e <ask_loop+0x316>
  {
    // +++ decode
    do
    {
      if ((rf->dataRawStart < (rf->dataRawEnd - rf->dataRawEnd * _ASK_TOLERANCE_IN_PERCENT / 100))\
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	8a5b      	ldrh	r3, [r3, #18]
 800064a:	0019      	movs	r1, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2246      	movs	r2, #70	@ 0x46
 8000650:	5a9b      	ldrh	r3, [r3, r2]
 8000652:	0018      	movs	r0, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2246      	movs	r2, #70	@ 0x46
 8000658:	5a9b      	ldrh	r3, [r3, r2]
 800065a:	2b00      	cmp	r3, #0
 800065c:	da00      	bge.n	8000660 <ask_loop+0x68>
 800065e:	3303      	adds	r3, #3
 8000660:	109b      	asrs	r3, r3, #2
 8000662:	425b      	negs	r3, r3
 8000664:	18c3      	adds	r3, r0, r3
 8000666:	4299      	cmp	r1, r3
 8000668:	da00      	bge.n	800066c <ask_loop+0x74>
 800066a:	e145      	b.n	80008f8 <ask_loop+0x300>
        || (rf->dataRawStart > (rf->dataRawEnd + rf->dataRawEnd * _ASK_TOLERANCE_IN_PERCENT / 100)))
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	8a5b      	ldrh	r3, [r3, #18]
 8000670:	0019      	movs	r1, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2246      	movs	r2, #70	@ 0x46
 8000676:	5a9b      	ldrh	r3, [r3, r2]
 8000678:	0018      	movs	r0, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2246      	movs	r2, #70	@ 0x46
 800067e:	5a9b      	ldrh	r3, [r3, r2]
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <ask_loop+0x8e>
 8000684:	3303      	adds	r3, #3
 8000686:	109b      	asrs	r3, r3, #2
 8000688:	18c3      	adds	r3, r0, r3
 800068a:	4299      	cmp	r1, r3
 800068c:	dd00      	ble.n	8000690 <ask_loop+0x98>
 800068e:	e133      	b.n	80008f8 <ask_loop+0x300>
        break;
      uint8_t signalSum = rf->dataRawStart / 8;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	8a5b      	ldrh	r3, [r3, #18]
 8000694:	08db      	lsrs	r3, r3, #3
 8000696:	b29a      	uxth	r2, r3
 8000698:	240c      	movs	r4, #12
 800069a:	193b      	adds	r3, r7, r4
 800069c:	701a      	strb	r2, [r3, #0]
      uint8_t signalH = signalSum * 75 / 100;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	0013      	movs	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	189b      	adds	r3, r3, r2
 80006a8:	011a      	lsls	r2, r3, #4
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	2164      	movs	r1, #100	@ 0x64
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff fdbe 	bl	8000230 <__divsi3>
 80006b4:	0003      	movs	r3, r0
 80006b6:	001a      	movs	r2, r3
 80006b8:	230b      	movs	r3, #11
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	701a      	strb	r2, [r3, #0]
      uint8_t signalL = signalSum * 25 / 100;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	da00      	bge.n	80006c8 <ask_loop+0xd0>
 80006c6:	3303      	adds	r3, #3
 80006c8:	109b      	asrs	r3, r3, #2
 80006ca:	001a      	movs	r2, r3
 80006cc:	230a      	movs	r3, #10
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	701a      	strb	r2, [r3, #0]
      int8_t bit = 7,byte = 0;
 80006d2:	230f      	movs	r3, #15
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	2207      	movs	r2, #7
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	230e      	movs	r3, #14
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
      memset(rf->data,0,sizeof(rf->data));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3348      	adds	r3, #72	@ 0x48
 80006e6:	2203      	movs	r2, #3
 80006e8:	2100      	movs	r1, #0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f003 fdce 	bl	800428c <memset>
      rf->dataLen = 0;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	224e      	movs	r2, #78	@ 0x4e
 80006f4:	2100      	movs	r1, #0
 80006f6:	5499      	strb	r1, [r3, r2]
      for (uint8_t i=0; i<rf->index ; i+=2)
 80006f8:	230d      	movs	r3, #13
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	e0de      	b.n	80008c0 <ask_loop+0x2c8>
      {
        if ((rf->dataRaw[i] >= (signalH - signalH * _ASK_TOLERANCE_IN_PERCENT / 100))\
 8000702:	230d      	movs	r3, #13
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	18d3      	adds	r3, r2, r3
 800070c:	7d1b      	ldrb	r3, [r3, #20]
 800070e:	0019      	movs	r1, r3
 8000710:	200b      	movs	r0, #11
 8000712:	183b      	adds	r3, r7, r0
 8000714:	781a      	ldrb	r2, [r3, #0]
 8000716:	183b      	adds	r3, r7, r0
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da00      	bge.n	8000720 <ask_loop+0x128>
 800071e:	3303      	adds	r3, #3
 8000720:	109b      	asrs	r3, r3, #2
 8000722:	425b      	negs	r3, r3
 8000724:	18d3      	adds	r3, r2, r3
 8000726:	4299      	cmp	r1, r3
 8000728:	db5a      	blt.n	80007e0 <ask_loop+0x1e8>
          && (rf->dataRaw[i] <= (signalH + signalH * _ASK_TOLERANCE_IN_PERCENT / 100))\
 800072a:	230d      	movs	r3, #13
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	18d3      	adds	r3, r2, r3
 8000734:	7d1b      	ldrb	r3, [r3, #20]
 8000736:	0019      	movs	r1, r3
 8000738:	200b      	movs	r0, #11
 800073a:	183b      	adds	r3, r7, r0
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	183b      	adds	r3, r7, r0
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	da00      	bge.n	8000748 <ask_loop+0x150>
 8000746:	3303      	adds	r3, #3
 8000748:	109b      	asrs	r3, r3, #2
 800074a:	18d3      	adds	r3, r2, r3
 800074c:	4299      	cmp	r1, r3
 800074e:	dc47      	bgt.n	80007e0 <ask_loop+0x1e8>
          && (rf->dataRaw[i+1] >= (signalL - signalL * _ASK_TOLERANCE_IN_PERCENT / 100))\
 8000750:	230d      	movs	r3, #13
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	18d3      	adds	r3, r2, r3
 800075c:	7d1b      	ldrb	r3, [r3, #20]
 800075e:	0019      	movs	r1, r3
 8000760:	200a      	movs	r0, #10
 8000762:	183b      	adds	r3, r7, r0
 8000764:	781a      	ldrb	r2, [r3, #0]
 8000766:	183b      	adds	r3, r7, r0
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	da00      	bge.n	8000770 <ask_loop+0x178>
 800076e:	3303      	adds	r3, #3
 8000770:	109b      	asrs	r3, r3, #2
 8000772:	425b      	negs	r3, r3
 8000774:	18d3      	adds	r3, r2, r3
 8000776:	4299      	cmp	r1, r3
 8000778:	db32      	blt.n	80007e0 <ask_loop+0x1e8>
          && (rf->dataRaw[i+1] <= (signalL + signalL * _ASK_TOLERANCE_IN_PERCENT / 100)))
 800077a:	230d      	movs	r3, #13
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	18d3      	adds	r3, r2, r3
 8000786:	7d1b      	ldrb	r3, [r3, #20]
 8000788:	0019      	movs	r1, r3
 800078a:	200a      	movs	r0, #10
 800078c:	183b      	adds	r3, r7, r0
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	183b      	adds	r3, r7, r0
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	da00      	bge.n	800079a <ask_loop+0x1a2>
 8000798:	3303      	adds	r3, #3
 800079a:	109b      	asrs	r3, r3, #2
 800079c:	18d3      	adds	r3, r2, r3
 800079e:	4299      	cmp	r1, r3
 80007a0:	dc1e      	bgt.n	80007e0 <ask_loop+0x1e8>
        {
          rf->data[byte] |= (1 << bit);          
 80007a2:	200e      	movs	r0, #14
 80007a4:	183b      	adds	r3, r7, r0
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	2148      	movs	r1, #72	@ 0x48
 80007ae:	18d3      	adds	r3, r2, r3
 80007b0:	185b      	adds	r3, r3, r1
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b25a      	sxtb	r2, r3
 80007b6:	230f      	movs	r3, #15
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	2101      	movs	r1, #1
 80007c0:	4099      	lsls	r1, r3
 80007c2:	000b      	movs	r3, r1
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b25a      	sxtb	r2, r3
 80007ca:	183b      	adds	r3, r7, r0
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	b2d0      	uxtb	r0, r2
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	2148      	movs	r1, #72	@ 0x48
 80007d6:	18d3      	adds	r3, r2, r3
 80007d8:	185b      	adds	r3, r3, r1
 80007da:	1c02      	adds	r2, r0, #0
 80007dc:	701a      	strb	r2, [r3, #0]
 80007de:	e050      	b.n	8000882 <ask_loop+0x28a>
        }
        else if ((rf->dataRaw[i] >= (signalL - signalL * _ASK_TOLERANCE_IN_PERCENT / 100))\
 80007e0:	230d      	movs	r3, #13
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	18d3      	adds	r3, r2, r3
 80007ea:	7d1b      	ldrb	r3, [r3, #20]
 80007ec:	0019      	movs	r1, r3
 80007ee:	200a      	movs	r0, #10
 80007f0:	183b      	adds	r3, r7, r0
 80007f2:	781a      	ldrb	r2, [r3, #0]
 80007f4:	183b      	adds	r3, r7, r0
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	da00      	bge.n	80007fe <ask_loop+0x206>
 80007fc:	3303      	adds	r3, #3
 80007fe:	109b      	asrs	r3, r3, #2
 8000800:	425b      	negs	r3, r3
 8000802:	18d3      	adds	r3, r2, r3
 8000804:	4299      	cmp	r1, r3
 8000806:	db63      	blt.n	80008d0 <ask_loop+0x2d8>
          && (rf->dataRaw[i] <= (signalL + signalL * _ASK_TOLERANCE_IN_PERCENT / 100))\
 8000808:	230d      	movs	r3, #13
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	18d3      	adds	r3, r2, r3
 8000812:	7d1b      	ldrb	r3, [r3, #20]
 8000814:	0019      	movs	r1, r3
 8000816:	200a      	movs	r0, #10
 8000818:	183b      	adds	r3, r7, r0
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	183b      	adds	r3, r7, r0
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	da00      	bge.n	8000826 <ask_loop+0x22e>
 8000824:	3303      	adds	r3, #3
 8000826:	109b      	asrs	r3, r3, #2
 8000828:	18d3      	adds	r3, r2, r3
 800082a:	4299      	cmp	r1, r3
 800082c:	dc50      	bgt.n	80008d0 <ask_loop+0x2d8>
          && (rf->dataRaw[i+1] >= (signalH - signalH * _ASK_TOLERANCE_IN_PERCENT / 100))\
 800082e:	230d      	movs	r3, #13
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	18d3      	adds	r3, r2, r3
 800083a:	7d1b      	ldrb	r3, [r3, #20]
 800083c:	0019      	movs	r1, r3
 800083e:	200b      	movs	r0, #11
 8000840:	183b      	adds	r3, r7, r0
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	183b      	adds	r3, r7, r0
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	da00      	bge.n	800084e <ask_loop+0x256>
 800084c:	3303      	adds	r3, #3
 800084e:	109b      	asrs	r3, r3, #2
 8000850:	425b      	negs	r3, r3
 8000852:	18d3      	adds	r3, r2, r3
 8000854:	4299      	cmp	r1, r3
 8000856:	db3b      	blt.n	80008d0 <ask_loop+0x2d8>
          && (rf->dataRaw[i+1] <= (signalH + signalH * _ASK_TOLERANCE_IN_PERCENT / 100)))
 8000858:	230d      	movs	r3, #13
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	18d3      	adds	r3, r2, r3
 8000864:	7d1b      	ldrb	r3, [r3, #20]
 8000866:	0019      	movs	r1, r3
 8000868:	200b      	movs	r0, #11
 800086a:	183b      	adds	r3, r7, r0
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	183b      	adds	r3, r7, r0
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	da00      	bge.n	8000878 <ask_loop+0x280>
 8000876:	3303      	adds	r3, #3
 8000878:	109b      	asrs	r3, r3, #2
 800087a:	18d3      	adds	r3, r2, r3
 800087c:	4299      	cmp	r1, r3
 800087e:	dc27      	bgt.n	80008d0 <ask_loop+0x2d8>
        {
          __NOP();
 8000880:	46c0      	nop			@ (mov r8, r8)
        }
        else
          break;        
        bit--;
 8000882:	210f      	movs	r1, #15
 8000884:	187b      	adds	r3, r7, r1
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	3b01      	subs	r3, #1
 800088e:	b2da      	uxtb	r2, r3
 8000890:	187b      	adds	r3, r7, r1
 8000892:	701a      	strb	r2, [r3, #0]
        if (bit < 0)
 8000894:	187b      	adds	r3, r7, r1
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b7f      	cmp	r3, #127	@ 0x7f
 800089a:	d90b      	bls.n	80008b4 <ask_loop+0x2bc>
        {
          byte++;
 800089c:	200e      	movs	r0, #14
 800089e:	183b      	adds	r3, r7, r0
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	3301      	adds	r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	183b      	adds	r3, r7, r0
 80008ac:	701a      	strb	r2, [r3, #0]
          bit = 7;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2207      	movs	r2, #7
 80008b2:	701a      	strb	r2, [r3, #0]
      for (uint8_t i=0; i<rf->index ; i+=2)
 80008b4:	220d      	movs	r2, #13
 80008b6:	18bb      	adds	r3, r7, r2
 80008b8:	18ba      	adds	r2, r7, r2
 80008ba:	7812      	ldrb	r2, [r2, #0]
 80008bc:	3202      	adds	r2, #2
 80008be:	701a      	strb	r2, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7c1b      	ldrb	r3, [r3, #16]
 80008c4:	220d      	movs	r2, #13
 80008c6:	18ba      	adds	r2, r7, r2
 80008c8:	7812      	ldrb	r2, [r2, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d200      	bcs.n	80008d0 <ask_loop+0x2d8>
 80008ce:	e718      	b.n	8000702 <ask_loop+0x10a>
        }        
      }
      rf->dataLen = byte;
 80008d0:	230e      	movs	r3, #14
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	7819      	ldrb	r1, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	224e      	movs	r2, #78	@ 0x4e
 80008da:	5499      	strb	r1, [r3, r2]
      if ((rf->dataLen >= _ASK_MIN_DATA_BYTE) && (rf->dataLen <= _ASK_MAX_DATA_BYTE)) 
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	224e      	movs	r2, #78	@ 0x4e
 80008e0:	5c9b      	ldrb	r3, [r3, r2]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d908      	bls.n	80008f8 <ask_loop+0x300>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	224e      	movs	r2, #78	@ 0x4e
 80008ea:	5c9b      	ldrb	r3, [r3, r2]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d803      	bhi.n	80008f8 <ask_loop+0x300>
        rf->dataAvailable = 1;  
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	224f      	movs	r2, #79	@ 0x4f
 80008f4:	2101      	movs	r1, #1
 80008f6:	5499      	strb	r1, [r3, r2]
    }
    while (0);
    // --- decode
    rf->index = 0;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	741a      	strb	r2, [r3, #16]
    rf->newFrame = 0;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	739a      	strb	r2, [r3, #14]
    rf->endFrame = 0; 
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	73da      	strb	r2, [r3, #15]
 800090a:	e000      	b.n	800090e <ask_loop+0x316>
    return;
 800090c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800090e:	46bd      	mov	sp, r7
 8000910:	b005      	add	sp, #20
 8000912:	bd90      	pop	{r4, r7, pc}

08000914 <ask_available>:
//###########################################################################################################
bool ask_available(ask_t *rf)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if (rf == NULL)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <ask_available+0x12>
    return false;
 8000922:	2300      	movs	r3, #0
 8000924:	e01c      	b.n	8000960 <ask_available+0x4c>
  if (rf->dataAvailable == 1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	224f      	movs	r2, #79	@ 0x4f
 800092a:	5c9b      	ldrb	r3, [r3, r2]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d105      	bne.n	800093c <ask_available+0x28>
  {
    rf->dataAvailable = 0;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	224f      	movs	r2, #79	@ 0x4f
 8000934:	2100      	movs	r1, #0
 8000936:	5499      	strb	r1, [r3, r2]
    return true;
 8000938:	2301      	movs	r3, #1
 800093a:	e011      	b.n	8000960 <ask_available+0x4c>
  }
  else
  {
    if (HAL_GetTick() - rf->dataTime > _ASK_HOLD_LAST_FRAME_IN_MS)
 800093c:	f001 fb18 	bl	8001f70 <HAL_GetTick>
 8000940:	0002      	movs	r2, r0
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000946:	1ad2      	subs	r2, r2, r3
 8000948:	23fa      	movs	r3, #250	@ 0xfa
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	429a      	cmp	r2, r3
 800094e:	d906      	bls.n	800095e <ask_available+0x4a>
      memset(rf->dataLast, 0, sizeof(rf->dataLast));        
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	334b      	adds	r3, #75	@ 0x4b
 8000954:	2203      	movs	r2, #3
 8000956:	2100      	movs	r1, #0
 8000958:	0018      	movs	r0, r3
 800095a:	f003 fc97 	bl	800428c <memset>
    return false; 
 800095e:	2300      	movs	r3, #0
  }
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <ask_read>:
//###########################################################################################################
bool ask_read(ask_t *rf, uint8_t *code, uint8_t *codeLenInByte, uint8_t *syncTime_us)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	603b      	str	r3, [r7, #0]
  if (rf == NULL)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <ask_read+0x18>
    return false;
 800097c:	2300      	movs	r3, #0
 800097e:	e04c      	b.n	8000a1a <ask_read+0xb2>
  bool  isNew = false;
 8000980:	2317      	movs	r3, #23
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
  if (code != NULL)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00a      	beq.n	80009a4 <ask_read+0x3c>
    memcpy(code, rf->data, rf->dataLen);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3348      	adds	r3, #72	@ 0x48
 8000992:	0019      	movs	r1, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	224e      	movs	r2, #78	@ 0x4e
 8000998:	5c9b      	ldrb	r3, [r3, r2]
 800099a:	001a      	movs	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	0018      	movs	r0, r3
 80009a0:	f003 fcf7 	bl	8004392 <memcpy>
  if (codeLenInByte != NULL)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d004      	beq.n	80009b4 <ask_read+0x4c>
    *codeLenInByte = rf->dataLen;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	224e      	movs	r2, #78	@ 0x4e
 80009ae:	5c9a      	ldrb	r2, [r3, r2]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	701a      	strb	r2, [r3, #0]
  if (syncTime_us != NULL)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d009      	beq.n	80009ce <ask_read+0x66>
    *syncTime_us = rf->dataRawStart * 10;    
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	8a5b      	ldrh	r3, [r3, #18]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	1c1a      	adds	r2, r3, #0
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	18db      	adds	r3, r3, r3
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	701a      	strb	r2, [r3, #0]
  if (memcmp(rf->dataLast, rf->data, rf->dataLen) != 0)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	334b      	adds	r3, #75	@ 0x4b
 80009d2:	0018      	movs	r0, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3348      	adds	r3, #72	@ 0x48
 80009d8:	0019      	movs	r1, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	224e      	movs	r2, #78	@ 0x4e
 80009de:	5c9b      	ldrb	r3, [r3, r2]
 80009e0:	001a      	movs	r2, r3
 80009e2:	f003 fc45 	bl	8004270 <memcmp>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d003      	beq.n	80009f2 <ask_read+0x8a>
    isNew = true;
 80009ea:	2317      	movs	r3, #23
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
  memcpy(rf->dataLast, rf->data, rf->dataLen);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	334b      	adds	r3, #75	@ 0x4b
 80009f6:	0018      	movs	r0, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3348      	adds	r3, #72	@ 0x48
 80009fc:	0019      	movs	r1, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	224e      	movs	r2, #78	@ 0x4e
 8000a02:	5c9b      	ldrb	r3, [r3, r2]
 8000a04:	001a      	movs	r2, r3
 8000a06:	f003 fcc4 	bl	8004392 <memcpy>
  rf->dataTime = HAL_GetTick();
 8000a0a:	f001 fab1 	bl	8001f70 <HAL_GetTick>
 8000a0e:	0002      	movs	r2, r0
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	651a      	str	r2, [r3, #80]	@ 0x50
  return isNew;
 8000a14:	2317      	movs	r3, #23
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	781b      	ldrb	r3, [r3, #0]
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b006      	add	sp, #24
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b08b      	sub	sp, #44	@ 0x2c
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	2414      	movs	r4, #20
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2314      	movs	r3, #20
 8000a32:	001a      	movs	r2, r3
 8000a34:	2100      	movs	r1, #0
 8000a36:	f003 fc29 	bl	800428c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b85      	ldr	r3, [pc, #532]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	4b84      	ldr	r3, [pc, #528]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a40:	2180      	movs	r1, #128	@ 0x80
 8000a42:	0309      	lsls	r1, r1, #12
 8000a44:	430a      	orrs	r2, r1
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	4b81      	ldr	r3, [pc, #516]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a4a:	695a      	ldr	r2, [r3, #20]
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	031b      	lsls	r3, r3, #12
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a56:	4b7e      	ldr	r3, [pc, #504]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a58:	695a      	ldr	r2, [r3, #20]
 8000a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a5c:	2180      	movs	r1, #128	@ 0x80
 8000a5e:	03c9      	lsls	r1, r1, #15
 8000a60:	430a      	orrs	r2, r1
 8000a62:	615a      	str	r2, [r3, #20]
 8000a64:	4b7a      	ldr	r3, [pc, #488]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a66:	695a      	ldr	r2, [r3, #20]
 8000a68:	2380      	movs	r3, #128	@ 0x80
 8000a6a:	03db      	lsls	r3, r3, #15
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b77      	ldr	r3, [pc, #476]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	4b76      	ldr	r3, [pc, #472]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a78:	2180      	movs	r1, #128	@ 0x80
 8000a7a:	0289      	lsls	r1, r1, #10
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	4b73      	ldr	r3, [pc, #460]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a82:	695a      	ldr	r2, [r3, #20]
 8000a84:	2380      	movs	r3, #128	@ 0x80
 8000a86:	029b      	lsls	r3, r3, #10
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b70      	ldr	r3, [pc, #448]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a90:	695a      	ldr	r2, [r3, #20]
 8000a92:	4b6f      	ldr	r3, [pc, #444]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a94:	2180      	movs	r1, #128	@ 0x80
 8000a96:	02c9      	lsls	r1, r1, #11
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8000c50 <MX_GPIO_Init+0x22c>)
 8000a9e:	695a      	ldr	r2, [r3, #20]
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	02db      	lsls	r3, r3, #11
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SER_Pin|LATCH_Pin|CLK_Pin, GPIO_PIN_RESET);
 8000aaa:	23e0      	movs	r3, #224	@ 0xe0
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	4869      	ldr	r0, [pc, #420]	@ (8000c54 <MX_GPIO_Init+0x230>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	f001 fcf5 	bl	80024a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, GPIO_PIN_RESET);
 8000ab8:	4b67      	ldr	r3, [pc, #412]	@ (8000c58 <MX_GPIO_Init+0x234>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	2101      	movs	r1, #1
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 fcef 	bl	80024a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ext_IO1_Pin|MCU_LED_Pin|G_Pin|F_Pin, GPIO_PIN_RESET);
 8000ac4:	23d8      	movs	r3, #216	@ 0xd8
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	4864      	ldr	r0, [pc, #400]	@ (8000c5c <MX_GPIO_Init+0x238>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	0019      	movs	r1, r3
 8000ace:	f001 fce8 	bl	80024a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E_Pin|D_Pin|C_Pin|B_Pin
 8000ad2:	23f8      	movs	r3, #248	@ 0xf8
 8000ad4:	0159      	lsls	r1, r3, #5
 8000ad6:	2390      	movs	r3, #144	@ 0x90
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	2200      	movs	r2, #0
 8000adc:	0018      	movs	r0, r3
 8000ade:	f001 fce0 	bl	80024a2 <HAL_GPIO_WritePin>
                          |A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SER_Pin|LATCH_Pin|CLK_Pin;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	22e0      	movs	r2, #224	@ 0xe0
 8000ae6:	0212      	lsls	r2, r2, #8
 8000ae8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2201      	movs	r2, #1
 8000aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	4a55      	ldr	r2, [pc, #340]	@ (8000c54 <MX_GPIO_Init+0x230>)
 8000b00:	0019      	movs	r1, r3
 8000b02:	0010      	movs	r0, r2
 8000b04:	f001 fb40 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MR_Pin;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2201      	movs	r2, #1
 8000b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MR_GPIO_Port, &GPIO_InitStruct);
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	4a4d      	ldr	r2, [pc, #308]	@ (8000c58 <MX_GPIO_Init+0x234>)
 8000b24:	0019      	movs	r1, r3
 8000b26:	0010      	movs	r0, r2
 8000b28:	f001 fb2e 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Ext_BTN_Pin;
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	2202      	movs	r2, #2
 8000b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Ext_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	4a45      	ldr	r2, [pc, #276]	@ (8000c58 <MX_GPIO_Init+0x234>)
 8000b42:	0019      	movs	r1, r3
 8000b44:	0010      	movs	r0, r2
 8000b46:	f001 fb1f 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ASK_IN_SIG_Pin;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	22c4      	movs	r2, #196	@ 0xc4
 8000b54:	0392      	lsls	r2, r2, #14
 8000b56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASK_IN_SIG_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	193a      	adds	r2, r7, r4
 8000b60:	2390      	movs	r3, #144	@ 0x90
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f001 fb0e 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Ext_IO4_Pin;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2202      	movs	r2, #2
 8000b70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Ext_IO4_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	4a36      	ldr	r2, [pc, #216]	@ (8000c5c <MX_GPIO_Init+0x238>)
 8000b82:	0019      	movs	r1, r3
 8000b84:	0010      	movs	r0, r2
 8000b86:	f001 faff 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Ext_IO3_Pin;
 8000b8a:	0021      	movs	r1, r4
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2204      	movs	r2, #4
 8000b90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2284      	movs	r2, #132	@ 0x84
 8000b96:	0392      	lsls	r2, r2, #14
 8000b98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Ext_IO3_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	000c      	movs	r4, r1
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8000c5c <MX_GPIO_Init+0x238>)
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	0010      	movs	r0, r2
 8000baa:	f001 faed 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Ext_IO2_Pin|Coin_Reader_Pin;
 8000bae:	0021      	movs	r1, r4
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2290      	movs	r2, #144	@ 0x90
 8000bb4:	0192      	lsls	r2, r2, #6
 8000bb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	000c      	movs	r4, r1
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	4a24      	ldr	r2, [pc, #144]	@ (8000c5c <MX_GPIO_Init+0x238>)
 8000bca:	0019      	movs	r1, r3
 8000bcc:	0010      	movs	r0, r2
 8000bce:	f001 fadb 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Ext_IO1_Pin|MCU_LED_Pin|G_Pin|F_Pin;
 8000bd2:	0021      	movs	r1, r4
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	22d8      	movs	r2, #216	@ 0xd8
 8000bd8:	0212      	lsls	r2, r2, #8
 8000bda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	000c      	movs	r4, r1
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	2201      	movs	r2, #1
 8000be2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c5c <MX_GPIO_Init+0x238>)
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	0010      	movs	r0, r2
 8000bf8:	f001 fac6 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = E_Pin|D_Pin|C_Pin|B_Pin
 8000bfc:	0021      	movs	r1, r4
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	22f8      	movs	r2, #248	@ 0xf8
 8000c02:	0152      	lsls	r2, r2, #5
 8000c04:	601a      	str	r2, [r3, #0]
                          |A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2201      	movs	r2, #1
 8000c0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	187a      	adds	r2, r7, r1
 8000c1a:	2390      	movs	r3, #144	@ 0x90
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 fab1 	bl	8002188 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2005      	movs	r0, #5
 8000c2c:	f001 fa7a 	bl	8002124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c30:	2005      	movs	r0, #5
 8000c32:	f001 fa8c 	bl	800214e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2006      	movs	r0, #6
 8000c3c:	f001 fa72 	bl	8002124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000c40:	2006      	movs	r0, #6
 8000c42:	f001 fa84 	bl	800214e <HAL_NVIC_EnableIRQ>

}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b00b      	add	sp, #44	@ 0x2c
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48000800 	.word	0x48000800
 8000c58:	48001400 	.word	0x48001400
 8000c5c:	48000400 	.word	0x48000400

08000c60 <HAL_GPIO_EXTI_Callback>:

void ShiftOut(uint16_t data);
void DF_Choose(uint8_t);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	0002      	movs	r2, r0
 8000c68:	1dbb      	adds	r3, r7, #6
 8000c6a:	801a      	strh	r2, [r3, #0]
	if(!HAL_GPIO_ReadPin(Ext_IO3_GPIO_Port, Ext_IO3_Pin))
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c6e:	2104      	movs	r1, #4
 8000c70:	0018      	movs	r0, r3
 8000c72:	f001 fbf9 	bl	8002468 <HAL_GPIO_ReadPin>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d103      	bne.n	8000c82 <HAL_GPIO_EXTI_Callback+0x22>
		state = button_Clicked;
 8000c7a:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c7c:	781a      	ldrb	r2, [r3, #0]
 8000c7e:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c80:	701a      	strb	r2, [r3, #0]
}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	48000400 	.word	0x48000400
 8000c90:	20000000 	.word	0x20000000
 8000c94:	2000009c 	.word	0x2000009c

08000c98 <reset_Shift_Register>:



void reset_Shift_Register()
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 0);
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <reset_Shift_Register+0x34>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 fbfd 	bl	80024a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 1);
 8000ca8:	2380      	movs	r3, #128	@ 0x80
 8000caa:	01db      	lsls	r3, r3, #7
 8000cac:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <reset_Shift_Register+0x38>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	f001 fbf6 	bl	80024a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 0);
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	01db      	lsls	r3, r3, #7
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <reset_Shift_Register+0x38>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	f001 fbef 	bl	80024a2 <HAL_GPIO_WritePin>
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	48001400 	.word	0x48001400
 8000cd0:	48000800 	.word	0x48000800

08000cd4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	reset_Shift_Register();
 8000cdc:	f7ff ffdc 	bl	8000c98 <reset_Shift_Register>
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 1);
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f001 fbdb 	bl	80024a2 <HAL_GPIO_WritePin>


	if(x)
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		ShiftOut(data);
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 fb81 	bl	8001400 <ShiftOut>
		x=0;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
	{
		reset_Shift_Register();
		x=1;
	}

}
 8000d04:	e004      	b.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x3c>
		reset_Shift_Register();
 8000d06:	f7ff ffc7 	bl	8000c98 <reset_Shift_Register>
		x=1;
 8000d0a:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
}
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	48001400 	.word	0x48001400
 8000d1c:	200000a4 	.word	0x200000a4
 8000d20:	20000014 	.word	0x20000014

08000d24 <segment_Update>:

void segment_Update(int num)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	if(num==0)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d136      	bne.n	8000da0 <segment_Update+0x7c>
	{
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000d32:	2380      	movs	r3, #128	@ 0x80
 8000d34:	0159      	lsls	r1, r3, #5
 8000d36:	2390      	movs	r3, #144	@ 0x90
 8000d38:	05db      	lsls	r3, r3, #23
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f001 fbb0 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000d42:	2380      	movs	r3, #128	@ 0x80
 8000d44:	0119      	lsls	r1, r3, #4
 8000d46:	2390      	movs	r3, #144	@ 0x90
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 fba8 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 8000d52:	2380      	movs	r3, #128	@ 0x80
 8000d54:	00d9      	lsls	r1, r3, #3
 8000d56:	2390      	movs	r3, #144	@ 0x90
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f001 fba0 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 8000d62:	2380      	movs	r3, #128	@ 0x80
 8000d64:	0099      	lsls	r1, r3, #2
 8000d66:	2390      	movs	r3, #144	@ 0x90
 8000d68:	05db      	lsls	r3, r3, #23
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f001 fb98 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 8000d72:	2380      	movs	r3, #128	@ 0x80
 8000d74:	0059      	lsls	r1, r3, #1
 8000d76:	2390      	movs	r3, #144	@ 0x90
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fb90 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 8000d82:	2380      	movs	r3, #128	@ 0x80
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	48ee      	ldr	r0, [pc, #952]	@ (8001140 <segment_Update+0x41c>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	f001 fb89 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 8000d90:	2380      	movs	r3, #128	@ 0x80
 8000d92:	01db      	lsls	r3, r3, #7
 8000d94:	48ea      	ldr	r0, [pc, #936]	@ (8001140 <segment_Update+0x41c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	0019      	movs	r1, r3
 8000d9a:	f001 fb82 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
		HAL_Delay(150);
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
	}

}
 8000d9e:	e2f2      	b.n	8001386 <segment_Update+0x662>
	else if(num==1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d136      	bne.n	8000e14 <segment_Update+0xf0>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,0);
 8000da6:	2380      	movs	r3, #128	@ 0x80
 8000da8:	0159      	lsls	r1, r3, #5
 8000daa:	2390      	movs	r3, #144	@ 0x90
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	2200      	movs	r2, #0
 8000db0:	0018      	movs	r0, r3
 8000db2:	f001 fb76 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000db6:	2380      	movs	r3, #128	@ 0x80
 8000db8:	0119      	lsls	r1, r3, #4
 8000dba:	2390      	movs	r3, #144	@ 0x90
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f001 fb6e 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 8000dc6:	2380      	movs	r3, #128	@ 0x80
 8000dc8:	00d9      	lsls	r1, r3, #3
 8000dca:	2390      	movs	r3, #144	@ 0x90
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	2201      	movs	r2, #1
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f001 fb66 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 8000dd6:	2380      	movs	r3, #128	@ 0x80
 8000dd8:	0099      	lsls	r1, r3, #2
 8000dda:	2390      	movs	r3, #144	@ 0x90
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	2200      	movs	r2, #0
 8000de0:	0018      	movs	r0, r3
 8000de2:	f001 fb5e 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8000de6:	2380      	movs	r3, #128	@ 0x80
 8000de8:	0059      	lsls	r1, r3, #1
 8000dea:	2390      	movs	r3, #144	@ 0x90
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	2200      	movs	r2, #0
 8000df0:	0018      	movs	r0, r3
 8000df2:	f001 fb56 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 8000df6:	2380      	movs	r3, #128	@ 0x80
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	48d1      	ldr	r0, [pc, #836]	@ (8001140 <segment_Update+0x41c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	0019      	movs	r1, r3
 8000e00:	f001 fb4f 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	01db      	lsls	r3, r3, #7
 8000e08:	48cd      	ldr	r0, [pc, #820]	@ (8001140 <segment_Update+0x41c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	f001 fb48 	bl	80024a2 <HAL_GPIO_WritePin>
}
 8000e12:	e2b8      	b.n	8001386 <segment_Update+0x662>
	else if(num==2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d136      	bne.n	8000e88 <segment_Update+0x164>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000e1a:	2380      	movs	r3, #128	@ 0x80
 8000e1c:	0159      	lsls	r1, r3, #5
 8000e1e:	2390      	movs	r3, #144	@ 0x90
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	2201      	movs	r2, #1
 8000e24:	0018      	movs	r0, r3
 8000e26:	f001 fb3c 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	0119      	lsls	r1, r3, #4
 8000e2e:	2390      	movs	r3, #144	@ 0x90
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	2201      	movs	r2, #1
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 fb34 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,0);
 8000e3a:	2380      	movs	r3, #128	@ 0x80
 8000e3c:	00d9      	lsls	r1, r3, #3
 8000e3e:	2390      	movs	r3, #144	@ 0x90
 8000e40:	05db      	lsls	r3, r3, #23
 8000e42:	2200      	movs	r2, #0
 8000e44:	0018      	movs	r0, r3
 8000e46:	f001 fb2c 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	0099      	lsls	r1, r3, #2
 8000e4e:	2390      	movs	r3, #144	@ 0x90
 8000e50:	05db      	lsls	r3, r3, #23
 8000e52:	2201      	movs	r2, #1
 8000e54:	0018      	movs	r0, r3
 8000e56:	f001 fb24 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 8000e5a:	2380      	movs	r3, #128	@ 0x80
 8000e5c:	0059      	lsls	r1, r3, #1
 8000e5e:	2390      	movs	r3, #144	@ 0x90
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	2201      	movs	r2, #1
 8000e64:	0018      	movs	r0, r3
 8000e66:	f001 fb1c 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 8000e6a:	2380      	movs	r3, #128	@ 0x80
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	48b4      	ldr	r0, [pc, #720]	@ (8001140 <segment_Update+0x41c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	0019      	movs	r1, r3
 8000e74:	f001 fb15 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 8000e78:	2380      	movs	r3, #128	@ 0x80
 8000e7a:	01db      	lsls	r3, r3, #7
 8000e7c:	48b0      	ldr	r0, [pc, #704]	@ (8001140 <segment_Update+0x41c>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	0019      	movs	r1, r3
 8000e82:	f001 fb0e 	bl	80024a2 <HAL_GPIO_WritePin>
}
 8000e86:	e27e      	b.n	8001386 <segment_Update+0x662>
	else if(num==3)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d136      	bne.n	8000efc <segment_Update+0x1d8>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000e8e:	2380      	movs	r3, #128	@ 0x80
 8000e90:	0159      	lsls	r1, r3, #5
 8000e92:	2390      	movs	r3, #144	@ 0x90
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	2201      	movs	r2, #1
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f001 fb02 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000e9e:	2380      	movs	r3, #128	@ 0x80
 8000ea0:	0119      	lsls	r1, r3, #4
 8000ea2:	2390      	movs	r3, #144	@ 0x90
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 fafa 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 8000eae:	2380      	movs	r3, #128	@ 0x80
 8000eb0:	00d9      	lsls	r1, r3, #3
 8000eb2:	2390      	movs	r3, #144	@ 0x90
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f001 faf2 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 8000ebe:	2380      	movs	r3, #128	@ 0x80
 8000ec0:	0099      	lsls	r1, r3, #2
 8000ec2:	2390      	movs	r3, #144	@ 0x90
 8000ec4:	05db      	lsls	r3, r3, #23
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f001 faea 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8000ece:	2380      	movs	r3, #128	@ 0x80
 8000ed0:	0059      	lsls	r1, r3, #1
 8000ed2:	2390      	movs	r3, #144	@ 0x90
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 fae2 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 8000ede:	2380      	movs	r3, #128	@ 0x80
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	4897      	ldr	r0, [pc, #604]	@ (8001140 <segment_Update+0x41c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	0019      	movs	r1, r3
 8000ee8:	f001 fadb 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	01db      	lsls	r3, r3, #7
 8000ef0:	4893      	ldr	r0, [pc, #588]	@ (8001140 <segment_Update+0x41c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	f001 fad4 	bl	80024a2 <HAL_GPIO_WritePin>
}
 8000efa:	e244      	b.n	8001386 <segment_Update+0x662>
	else if(num==4)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d136      	bne.n	8000f70 <segment_Update+0x24c>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,0);
 8000f02:	2380      	movs	r3, #128	@ 0x80
 8000f04:	0159      	lsls	r1, r3, #5
 8000f06:	2390      	movs	r3, #144	@ 0x90
 8000f08:	05db      	lsls	r3, r3, #23
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f001 fac8 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000f12:	2380      	movs	r3, #128	@ 0x80
 8000f14:	0119      	lsls	r1, r3, #4
 8000f16:	2390      	movs	r3, #144	@ 0x90
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f001 fac0 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 8000f22:	2380      	movs	r3, #128	@ 0x80
 8000f24:	00d9      	lsls	r1, r3, #3
 8000f26:	2390      	movs	r3, #144	@ 0x90
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f001 fab8 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 8000f32:	2380      	movs	r3, #128	@ 0x80
 8000f34:	0099      	lsls	r1, r3, #2
 8000f36:	2390      	movs	r3, #144	@ 0x90
 8000f38:	05db      	lsls	r3, r3, #23
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 fab0 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	0059      	lsls	r1, r3, #1
 8000f46:	2390      	movs	r3, #144	@ 0x90
 8000f48:	05db      	lsls	r3, r3, #23
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f001 faa8 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	487a      	ldr	r0, [pc, #488]	@ (8001140 <segment_Update+0x41c>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	f001 faa1 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	01db      	lsls	r3, r3, #7
 8000f64:	4876      	ldr	r0, [pc, #472]	@ (8001140 <segment_Update+0x41c>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	0019      	movs	r1, r3
 8000f6a:	f001 fa9a 	bl	80024a2 <HAL_GPIO_WritePin>
}
 8000f6e:	e20a      	b.n	8001386 <segment_Update+0x662>
	else if(num==5)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d136      	bne.n	8000fe4 <segment_Update+0x2c0>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000f76:	2380      	movs	r3, #128	@ 0x80
 8000f78:	0159      	lsls	r1, r3, #5
 8000f7a:	2390      	movs	r3, #144	@ 0x90
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	2201      	movs	r2, #1
 8000f80:	0018      	movs	r0, r3
 8000f82:	f001 fa8e 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,0);
 8000f86:	2380      	movs	r3, #128	@ 0x80
 8000f88:	0119      	lsls	r1, r3, #4
 8000f8a:	2390      	movs	r3, #144	@ 0x90
 8000f8c:	05db      	lsls	r3, r3, #23
 8000f8e:	2200      	movs	r2, #0
 8000f90:	0018      	movs	r0, r3
 8000f92:	f001 fa86 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 8000f96:	2380      	movs	r3, #128	@ 0x80
 8000f98:	00d9      	lsls	r1, r3, #3
 8000f9a:	2390      	movs	r3, #144	@ 0x90
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f001 fa7e 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	0099      	lsls	r1, r3, #2
 8000faa:	2390      	movs	r3, #144	@ 0x90
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	2201      	movs	r2, #1
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f001 fa76 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	0059      	lsls	r1, r3, #1
 8000fba:	2390      	movs	r3, #144	@ 0x90
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f001 fa6e 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 8000fc6:	2380      	movs	r3, #128	@ 0x80
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	485d      	ldr	r0, [pc, #372]	@ (8001140 <segment_Update+0x41c>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	0019      	movs	r1, r3
 8000fd0:	f001 fa67 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 8000fd4:	2380      	movs	r3, #128	@ 0x80
 8000fd6:	01db      	lsls	r3, r3, #7
 8000fd8:	4859      	ldr	r0, [pc, #356]	@ (8001140 <segment_Update+0x41c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	0019      	movs	r1, r3
 8000fde:	f001 fa60 	bl	80024a2 <HAL_GPIO_WritePin>
}
 8000fe2:	e1d0      	b.n	8001386 <segment_Update+0x662>
	else if(num==6)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d136      	bne.n	8001058 <segment_Update+0x334>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000fea:	2380      	movs	r3, #128	@ 0x80
 8000fec:	0159      	lsls	r1, r3, #5
 8000fee:	2390      	movs	r3, #144	@ 0x90
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f001 fa54 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000ffa:	2380      	movs	r3, #128	@ 0x80
 8000ffc:	0119      	lsls	r1, r3, #4
 8000ffe:	2390      	movs	r3, #144	@ 0x90
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	2201      	movs	r2, #1
 8001004:	0018      	movs	r0, r3
 8001006:	f001 fa4c 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 800100a:	2380      	movs	r3, #128	@ 0x80
 800100c:	00d9      	lsls	r1, r3, #3
 800100e:	2390      	movs	r3, #144	@ 0x90
 8001010:	05db      	lsls	r3, r3, #23
 8001012:	2201      	movs	r2, #1
 8001014:	0018      	movs	r0, r3
 8001016:	f001 fa44 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 800101a:	2380      	movs	r3, #128	@ 0x80
 800101c:	0099      	lsls	r1, r3, #2
 800101e:	2390      	movs	r3, #144	@ 0x90
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	2201      	movs	r2, #1
 8001024:	0018      	movs	r0, r3
 8001026:	f001 fa3c 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	0059      	lsls	r1, r3, #1
 800102e:	2390      	movs	r3, #144	@ 0x90
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	2201      	movs	r2, #1
 8001034:	0018      	movs	r0, r3
 8001036:	f001 fa34 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	4840      	ldr	r0, [pc, #256]	@ (8001140 <segment_Update+0x41c>)
 8001040:	2200      	movs	r2, #0
 8001042:	0019      	movs	r1, r3
 8001044:	f001 fa2d 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	01db      	lsls	r3, r3, #7
 800104c:	483c      	ldr	r0, [pc, #240]	@ (8001140 <segment_Update+0x41c>)
 800104e:	2201      	movs	r2, #1
 8001050:	0019      	movs	r1, r3
 8001052:	f001 fa26 	bl	80024a2 <HAL_GPIO_WritePin>
}
 8001056:	e196      	b.n	8001386 <segment_Update+0x662>
	else if(num==7)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b07      	cmp	r3, #7
 800105c:	d136      	bne.n	80010cc <segment_Update+0x3a8>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 800105e:	2380      	movs	r3, #128	@ 0x80
 8001060:	0159      	lsls	r1, r3, #5
 8001062:	2390      	movs	r3, #144	@ 0x90
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	2201      	movs	r2, #1
 8001068:	0018      	movs	r0, r3
 800106a:	f001 fa1a 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 800106e:	2380      	movs	r3, #128	@ 0x80
 8001070:	0119      	lsls	r1, r3, #4
 8001072:	2390      	movs	r3, #144	@ 0x90
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	2201      	movs	r2, #1
 8001078:	0018      	movs	r0, r3
 800107a:	f001 fa12 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 800107e:	2380      	movs	r3, #128	@ 0x80
 8001080:	00d9      	lsls	r1, r3, #3
 8001082:	2390      	movs	r3, #144	@ 0x90
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	2201      	movs	r2, #1
 8001088:	0018      	movs	r0, r3
 800108a:	f001 fa0a 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 800108e:	2380      	movs	r3, #128	@ 0x80
 8001090:	0099      	lsls	r1, r3, #2
 8001092:	2390      	movs	r3, #144	@ 0x90
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	2200      	movs	r2, #0
 8001098:	0018      	movs	r0, r3
 800109a:	f001 fa02 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 800109e:	2380      	movs	r3, #128	@ 0x80
 80010a0:	0059      	lsls	r1, r3, #1
 80010a2:	2390      	movs	r3, #144	@ 0x90
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	2200      	movs	r2, #0
 80010a8:	0018      	movs	r0, r3
 80010aa:	f001 f9fa 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 80010ae:	2380      	movs	r3, #128	@ 0x80
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	4823      	ldr	r0, [pc, #140]	@ (8001140 <segment_Update+0x41c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	0019      	movs	r1, r3
 80010b8:	f001 f9f3 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 80010bc:	2380      	movs	r3, #128	@ 0x80
 80010be:	01db      	lsls	r3, r3, #7
 80010c0:	481f      	ldr	r0, [pc, #124]	@ (8001140 <segment_Update+0x41c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	0019      	movs	r1, r3
 80010c6:	f001 f9ec 	bl	80024a2 <HAL_GPIO_WritePin>
}
 80010ca:	e15c      	b.n	8001386 <segment_Update+0x662>
	else if(num==8)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d138      	bne.n	8001144 <segment_Update+0x420>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	0159      	lsls	r1, r3, #5
 80010d6:	2390      	movs	r3, #144	@ 0x90
 80010d8:	05db      	lsls	r3, r3, #23
 80010da:	2201      	movs	r2, #1
 80010dc:	0018      	movs	r0, r3
 80010de:	f001 f9e0 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 80010e2:	2380      	movs	r3, #128	@ 0x80
 80010e4:	0119      	lsls	r1, r3, #4
 80010e6:	2390      	movs	r3, #144	@ 0x90
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	2201      	movs	r2, #1
 80010ec:	0018      	movs	r0, r3
 80010ee:	f001 f9d8 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 80010f2:	2380      	movs	r3, #128	@ 0x80
 80010f4:	00d9      	lsls	r1, r3, #3
 80010f6:	2390      	movs	r3, #144	@ 0x90
 80010f8:	05db      	lsls	r3, r3, #23
 80010fa:	2201      	movs	r2, #1
 80010fc:	0018      	movs	r0, r3
 80010fe:	f001 f9d0 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 8001102:	2380      	movs	r3, #128	@ 0x80
 8001104:	0099      	lsls	r1, r3, #2
 8001106:	2390      	movs	r3, #144	@ 0x90
 8001108:	05db      	lsls	r3, r3, #23
 800110a:	2201      	movs	r2, #1
 800110c:	0018      	movs	r0, r3
 800110e:	f001 f9c8 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	0059      	lsls	r1, r3, #1
 8001116:	2390      	movs	r3, #144	@ 0x90
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	2201      	movs	r2, #1
 800111c:	0018      	movs	r0, r3
 800111e:	f001 f9c0 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 8001122:	2380      	movs	r3, #128	@ 0x80
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <segment_Update+0x41c>)
 8001128:	2201      	movs	r2, #1
 800112a:	0019      	movs	r1, r3
 800112c:	f001 f9b9 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	01db      	lsls	r3, r3, #7
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <segment_Update+0x41c>)
 8001136:	2201      	movs	r2, #1
 8001138:	0019      	movs	r1, r3
 800113a:	f001 f9b2 	bl	80024a2 <HAL_GPIO_WritePin>
}
 800113e:	e122      	b.n	8001386 <segment_Update+0x662>
 8001140:	48000400 	.word	0x48000400
	else if(num==9)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b09      	cmp	r3, #9
 8001148:	d136      	bne.n	80011b8 <segment_Update+0x494>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 800114a:	2380      	movs	r3, #128	@ 0x80
 800114c:	0159      	lsls	r1, r3, #5
 800114e:	2390      	movs	r3, #144	@ 0x90
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	2201      	movs	r2, #1
 8001154:	0018      	movs	r0, r3
 8001156:	f001 f9a4 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 800115a:	2380      	movs	r3, #128	@ 0x80
 800115c:	0119      	lsls	r1, r3, #4
 800115e:	2390      	movs	r3, #144	@ 0x90
 8001160:	05db      	lsls	r3, r3, #23
 8001162:	2201      	movs	r2, #1
 8001164:	0018      	movs	r0, r3
 8001166:	f001 f99c 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 800116a:	2380      	movs	r3, #128	@ 0x80
 800116c:	00d9      	lsls	r1, r3, #3
 800116e:	2390      	movs	r3, #144	@ 0x90
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	2201      	movs	r2, #1
 8001174:	0018      	movs	r0, r3
 8001176:	f001 f994 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	0099      	lsls	r1, r3, #2
 800117e:	2390      	movs	r3, #144	@ 0x90
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	2201      	movs	r2, #1
 8001184:	0018      	movs	r0, r3
 8001186:	f001 f98c 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 800118a:	2380      	movs	r3, #128	@ 0x80
 800118c:	0059      	lsls	r1, r3, #1
 800118e:	2390      	movs	r3, #144	@ 0x90
 8001190:	05db      	lsls	r3, r3, #23
 8001192:	2200      	movs	r2, #0
 8001194:	0018      	movs	r0, r3
 8001196:	f001 f984 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 800119a:	2380      	movs	r3, #128	@ 0x80
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	487c      	ldr	r0, [pc, #496]	@ (8001390 <segment_Update+0x66c>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	0019      	movs	r1, r3
 80011a4:	f001 f97d 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	01db      	lsls	r3, r3, #7
 80011ac:	4878      	ldr	r0, [pc, #480]	@ (8001390 <segment_Update+0x66c>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	0019      	movs	r1, r3
 80011b2:	f001 f976 	bl	80024a2 <HAL_GPIO_WritePin>
}
 80011b6:	e0e6      	b.n	8001386 <segment_Update+0x662>
	else if(num==P)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b62      	cmp	r3, #98	@ 0x62
 80011bc:	d136      	bne.n	800122c <segment_Update+0x508>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 80011be:	2380      	movs	r3, #128	@ 0x80
 80011c0:	0159      	lsls	r1, r3, #5
 80011c2:	2390      	movs	r3, #144	@ 0x90
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	2201      	movs	r2, #1
 80011c8:	0018      	movs	r0, r3
 80011ca:	f001 f96a 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 80011ce:	2380      	movs	r3, #128	@ 0x80
 80011d0:	0119      	lsls	r1, r3, #4
 80011d2:	2390      	movs	r3, #144	@ 0x90
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	2201      	movs	r2, #1
 80011d8:	0018      	movs	r0, r3
 80011da:	f001 f962 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,0);
 80011de:	2380      	movs	r3, #128	@ 0x80
 80011e0:	00d9      	lsls	r1, r3, #3
 80011e2:	2390      	movs	r3, #144	@ 0x90
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	2200      	movs	r2, #0
 80011e8:	0018      	movs	r0, r3
 80011ea:	f001 f95a 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 80011ee:	2380      	movs	r3, #128	@ 0x80
 80011f0:	0099      	lsls	r1, r3, #2
 80011f2:	2390      	movs	r3, #144	@ 0x90
 80011f4:	05db      	lsls	r3, r3, #23
 80011f6:	2200      	movs	r2, #0
 80011f8:	0018      	movs	r0, r3
 80011fa:	f001 f952 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 80011fe:	2380      	movs	r3, #128	@ 0x80
 8001200:	0059      	lsls	r1, r3, #1
 8001202:	2390      	movs	r3, #144	@ 0x90
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	2201      	movs	r2, #1
 8001208:	0018      	movs	r0, r3
 800120a:	f001 f94a 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 800120e:	2380      	movs	r3, #128	@ 0x80
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	485f      	ldr	r0, [pc, #380]	@ (8001390 <segment_Update+0x66c>)
 8001214:	2201      	movs	r2, #1
 8001216:	0019      	movs	r1, r3
 8001218:	f001 f943 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	01db      	lsls	r3, r3, #7
 8001220:	485b      	ldr	r0, [pc, #364]	@ (8001390 <segment_Update+0x66c>)
 8001222:	2201      	movs	r2, #1
 8001224:	0019      	movs	r1, r3
 8001226:	f001 f93c 	bl	80024a2 <HAL_GPIO_WritePin>
}
 800122a:	e0ac      	b.n	8001386 <segment_Update+0x662>
	else if(num==NONE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b0a      	cmp	r3, #10
 8001230:	d136      	bne.n	80012a0 <segment_Update+0x57c>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,0);
 8001232:	2380      	movs	r3, #128	@ 0x80
 8001234:	0159      	lsls	r1, r3, #5
 8001236:	2390      	movs	r3, #144	@ 0x90
 8001238:	05db      	lsls	r3, r3, #23
 800123a:	2200      	movs	r2, #0
 800123c:	0018      	movs	r0, r3
 800123e:	f001 f930 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,0);
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	0119      	lsls	r1, r3, #4
 8001246:	2390      	movs	r3, #144	@ 0x90
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	2200      	movs	r2, #0
 800124c:	0018      	movs	r0, r3
 800124e:	f001 f928 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,0);
 8001252:	2380      	movs	r3, #128	@ 0x80
 8001254:	00d9      	lsls	r1, r3, #3
 8001256:	2390      	movs	r3, #144	@ 0x90
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	2200      	movs	r2, #0
 800125c:	0018      	movs	r0, r3
 800125e:	f001 f920 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 8001262:	2380      	movs	r3, #128	@ 0x80
 8001264:	0099      	lsls	r1, r3, #2
 8001266:	2390      	movs	r3, #144	@ 0x90
 8001268:	05db      	lsls	r3, r3, #23
 800126a:	2200      	movs	r2, #0
 800126c:	0018      	movs	r0, r3
 800126e:	f001 f918 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	0059      	lsls	r1, r3, #1
 8001276:	2390      	movs	r3, #144	@ 0x90
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	2200      	movs	r2, #0
 800127c:	0018      	movs	r0, r3
 800127e:	f001 f910 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 8001282:	2380      	movs	r3, #128	@ 0x80
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	4842      	ldr	r0, [pc, #264]	@ (8001390 <segment_Update+0x66c>)
 8001288:	2200      	movs	r2, #0
 800128a:	0019      	movs	r1, r3
 800128c:	f001 f909 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	01db      	lsls	r3, r3, #7
 8001294:	483e      	ldr	r0, [pc, #248]	@ (8001390 <segment_Update+0x66c>)
 8001296:	2200      	movs	r2, #0
 8001298:	0019      	movs	r1, r3
 800129a:	f001 f902 	bl	80024a2 <HAL_GPIO_WritePin>
}
 800129e:	e072      	b.n	8001386 <segment_Update+0x662>
	else if(num==E)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b63      	cmp	r3, #99	@ 0x63
 80012a4:	d16f      	bne.n	8001386 <segment_Update+0x662>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 80012a6:	2380      	movs	r3, #128	@ 0x80
 80012a8:	0159      	lsls	r1, r3, #5
 80012aa:	2390      	movs	r3, #144	@ 0x90
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	2201      	movs	r2, #1
 80012b0:	0018      	movs	r0, r3
 80012b2:	f001 f8f6 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_Delay(150);
 80012b6:	2096      	movs	r0, #150	@ 0x96
 80012b8:	f000 fe64 	bl	8001f84 <HAL_Delay>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,0);
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	0159      	lsls	r1, r3, #5
 80012c0:	2390      	movs	r3, #144	@ 0x90
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	2200      	movs	r2, #0
 80012c6:	0018      	movs	r0, r3
 80012c8:	f001 f8eb 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 80012cc:	2380      	movs	r3, #128	@ 0x80
 80012ce:	0119      	lsls	r1, r3, #4
 80012d0:	2390      	movs	r3, #144	@ 0x90
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	2201      	movs	r2, #1
 80012d6:	0018      	movs	r0, r3
 80012d8:	f001 f8e3 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_Delay(150);
 80012dc:	2096      	movs	r0, #150	@ 0x96
 80012de:	f000 fe51 	bl	8001f84 <HAL_Delay>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,0);
 80012e2:	2380      	movs	r3, #128	@ 0x80
 80012e4:	0119      	lsls	r1, r3, #4
 80012e6:	2390      	movs	r3, #144	@ 0x90
 80012e8:	05db      	lsls	r3, r3, #23
 80012ea:	2200      	movs	r2, #0
 80012ec:	0018      	movs	r0, r3
 80012ee:	f001 f8d8 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 80012f2:	2380      	movs	r3, #128	@ 0x80
 80012f4:	00d9      	lsls	r1, r3, #3
 80012f6:	2390      	movs	r3, #144	@ 0x90
 80012f8:	05db      	lsls	r3, r3, #23
 80012fa:	2201      	movs	r2, #1
 80012fc:	0018      	movs	r0, r3
 80012fe:	f001 f8d0 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_Delay(150);
 8001302:	2096      	movs	r0, #150	@ 0x96
 8001304:	f000 fe3e 	bl	8001f84 <HAL_Delay>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,0);
 8001308:	2380      	movs	r3, #128	@ 0x80
 800130a:	00d9      	lsls	r1, r3, #3
 800130c:	2390      	movs	r3, #144	@ 0x90
 800130e:	05db      	lsls	r3, r3, #23
 8001310:	2200      	movs	r2, #0
 8001312:	0018      	movs	r0, r3
 8001314:	f001 f8c5 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 8001318:	2380      	movs	r3, #128	@ 0x80
 800131a:	0099      	lsls	r1, r3, #2
 800131c:	2390      	movs	r3, #144	@ 0x90
 800131e:	05db      	lsls	r3, r3, #23
 8001320:	2201      	movs	r2, #1
 8001322:	0018      	movs	r0, r3
 8001324:	f001 f8bd 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_Delay(150);
 8001328:	2096      	movs	r0, #150	@ 0x96
 800132a:	f000 fe2b 	bl	8001f84 <HAL_Delay>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	0099      	lsls	r1, r3, #2
 8001332:	2390      	movs	r3, #144	@ 0x90
 8001334:	05db      	lsls	r3, r3, #23
 8001336:	2200      	movs	r2, #0
 8001338:	0018      	movs	r0, r3
 800133a:	f001 f8b2 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 800133e:	2380      	movs	r3, #128	@ 0x80
 8001340:	0059      	lsls	r1, r3, #1
 8001342:	2390      	movs	r3, #144	@ 0x90
 8001344:	05db      	lsls	r3, r3, #23
 8001346:	2201      	movs	r2, #1
 8001348:	0018      	movs	r0, r3
 800134a:	f001 f8aa 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_Delay(150);
 800134e:	2096      	movs	r0, #150	@ 0x96
 8001350:	f000 fe18 	bl	8001f84 <HAL_Delay>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	0059      	lsls	r1, r3, #1
 8001358:	2390      	movs	r3, #144	@ 0x90
 800135a:	05db      	lsls	r3, r3, #23
 800135c:	2200      	movs	r2, #0
 800135e:	0018      	movs	r0, r3
 8001360:	f001 f89f 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	4809      	ldr	r0, [pc, #36]	@ (8001390 <segment_Update+0x66c>)
 800136a:	2201      	movs	r2, #1
 800136c:	0019      	movs	r1, r3
 800136e:	f001 f898 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_Delay(150);
 8001372:	2096      	movs	r0, #150	@ 0x96
 8001374:	f000 fe06 	bl	8001f84 <HAL_Delay>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 8001378:	2380      	movs	r3, #128	@ 0x80
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	4804      	ldr	r0, [pc, #16]	@ (8001390 <segment_Update+0x66c>)
 800137e:	2200      	movs	r2, #0
 8001380:	0019      	movs	r1, r3
 8001382:	f001 f88e 	bl	80024a2 <HAL_GPIO_WritePin>
}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	48000400 	.word	0x48000400

08001394 <shuffle>:

void shuffle(uint8_t *array, uint8_t size)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	000a      	movs	r2, r1
 800139e:	1cfb      	adds	r3, r7, #3
 80013a0:	701a      	strb	r2, [r3, #0]
	for (int i = size - 1; i > 0; i--) {
 80013a2:	1cfb      	adds	r3, r7, #3
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e020      	b.n	80013ee <shuffle+0x5a>
		int j = rand() % (i + 1);
 80013ac:	f002 fe12 	bl	8003fd4 <rand>
 80013b0:	0002      	movs	r2, r0
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	0019      	movs	r1, r3
 80013b8:	0010      	movs	r0, r2
 80013ba:	f7ff f81f 	bl	80003fc <__aeabi_idivmod>
 80013be:	000b      	movs	r3, r1
 80013c0:	613b      	str	r3, [r7, #16]

		int temp = array[i];
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	18d3      	adds	r3, r2, r3
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	60fb      	str	r3, [r7, #12]
		array[i] = array[j];
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	18d2      	adds	r2, r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	18cb      	adds	r3, r1, r3
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	701a      	strb	r2, [r3, #0]
		array[j] = temp;
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	18d3      	adds	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	701a      	strb	r2, [r3, #0]
	for (int i = size - 1; i > 0; i--) {
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	dcdb      	bgt.n	80013ac <shuffle+0x18>
	}
}
 80013f4:	46c0      	nop			@ (mov r8, r8)
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b006      	add	sp, #24
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <ShiftOut>:

void ShiftOut(uint16_t data)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	0002      	movs	r2, r0
 8001408:	1dbb      	adds	r3, r7, #6
 800140a:	801a      	strh	r2, [r3, #0]

	for (int i = 0; i < 16; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e021      	b.n	8001456 <ShiftOut+0x56>
	{
		HAL_GPIO_WritePin(SER_GPIO_Port, SER_Pin, (data & (1 << (15 - i))) ? 1 : 0);
 8001412:	1dbb      	adds	r3, r7, #6
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	210f      	movs	r1, #15
 800141a:	1acb      	subs	r3, r1, r3
 800141c:	411a      	asrs	r2, r3
 800141e:	0013      	movs	r3, r2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2201      	movs	r2, #1
 8001424:	4013      	ands	r3, r2
 8001426:	b2da      	uxtb	r2, r3
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	019b      	lsls	r3, r3, #6
 800142c:	4814      	ldr	r0, [pc, #80]	@ (8001480 <ShiftOut+0x80>)
 800142e:	0019      	movs	r1, r3
 8001430:	f001 f837 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, 1);
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	4811      	ldr	r0, [pc, #68]	@ (8001480 <ShiftOut+0x80>)
 800143a:	2201      	movs	r2, #1
 800143c:	0019      	movs	r1, r3
 800143e:	f001 f830 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, 0);
 8001442:	2380      	movs	r3, #128	@ 0x80
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	480e      	ldr	r0, [pc, #56]	@ (8001480 <ShiftOut+0x80>)
 8001448:	2200      	movs	r2, #0
 800144a:	0019      	movs	r1, r3
 800144c:	f001 f829 	bl	80024a2 <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3301      	adds	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	ddda      	ble.n	8001412 <ShiftOut+0x12>
	}
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 1);
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	01db      	lsls	r3, r3, #7
 8001460:	4807      	ldr	r0, [pc, #28]	@ (8001480 <ShiftOut+0x80>)
 8001462:	2201      	movs	r2, #1
 8001464:	0019      	movs	r1, r3
 8001466:	f001 f81c 	bl	80024a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 0);
 800146a:	2380      	movs	r3, #128	@ 0x80
 800146c:	01db      	lsls	r3, r3, #7
 800146e:	4804      	ldr	r0, [pc, #16]	@ (8001480 <ShiftOut+0x80>)
 8001470:	2200      	movs	r2, #0
 8001472:	0019      	movs	r1, r3
 8001474:	f001 f815 	bl	80024a2 <HAL_GPIO_WritePin>
}
 8001478:	46c0      	nop			@ (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b004      	add	sp, #16
 800147e:	bd80      	pop	{r7, pc}
 8001480:	48000800 	.word	0x48000800

08001484 <button_Click>:

void button_Click()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	DF_Choose(2);
 800148a:	2002      	movs	r0, #2
 800148c:	f7ff f846 	bl	800051c <DF_Choose>
	for(int i = 3; i>=0; i--)
 8001490:	2303      	movs	r3, #3
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	e00b      	b.n	80014ae <button_Click+0x2a>
	{
		segment_Update(i);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fc43 	bl	8000d24 <segment_Update>
		HAL_Delay(1000);
 800149e:	23fa      	movs	r3, #250	@ 0xfa
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	0018      	movs	r0, r3
 80014a4:	f000 fd6e 	bl	8001f84 <HAL_Delay>
	for(int i = 3; i>=0; i--)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	daf0      	bge.n	8001496 <button_Click+0x12>
	}
	segment_Update(NONE);
 80014b4:	200a      	movs	r0, #10
 80014b6:	f7ff fc35 	bl	8000d24 <segment_Update>
	state=playing_Game;
 80014ba:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <button_Click+0x48>)
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <button_Click+0x4c>)
 80014c0:	701a      	strb	r2, [r3, #0]
}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b002      	add	sp, #8
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	20000001 	.word	0x20000001
 80014d0:	2000009c 	.word	0x2000009c

080014d4 <start_Game>:

void start_Game()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	DF_Choose(1);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff f81e 	bl	800051c <DF_Choose>

	for(int i = 0; i<16; i++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	e020      	b.n	8001528 <start_Game+0x54>
	{

		data = data & (~(1 << randomNumber[i]));
 80014e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001550 <start_Game+0x7c>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	18d3      	adds	r3, r2, r3
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	001a      	movs	r2, r3
 80014f0:	2301      	movs	r3, #1
 80014f2:	4093      	lsls	r3, r2
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4a16      	ldr	r2, [pc, #88]	@ (8001554 <start_Game+0x80>)
 80014fc:	8812      	ldrh	r2, [r2, #0]
 80014fe:	b212      	sxth	r2, r2
 8001500:	4013      	ands	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <start_Game+0x80>)
 8001508:	801a      	strh	r2, [r3, #0]
		segment_Update(randomNumber[i]);
 800150a:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <start_Game+0x7c>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	18d3      	adds	r3, r2, r3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	0018      	movs	r0, r3
 8001514:	f7ff fc06 	bl	8000d24 <segment_Update>
		HAL_Delay(1000);
 8001518:	23fa      	movs	r3, #250	@ 0xfa
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	0018      	movs	r0, r3
 800151e:	f000 fd31 	bl	8001f84 <HAL_Delay>
	for(int i = 0; i<16; i++)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3301      	adds	r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b0f      	cmp	r3, #15
 800152c:	dddb      	ble.n	80014e6 <start_Game+0x12>
	}

	segment_Update(NONE);
 800152e:	200a      	movs	r0, #10
 8001530:	f7ff fbf8 	bl	8000d24 <segment_Update>
	DF_Pause();
 8001534:	f7ff f824 	bl	8000580 <DF_Pause>
	data=0xffff;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <start_Game+0x80>)
 800153a:	2201      	movs	r2, #1
 800153c:	4252      	negs	r2, r2
 800153e:	801a      	strh	r2, [r3, #0]
	state=waiting_For_Start;
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <start_Game+0x84>)
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <start_Game+0x88>)
 8001546:	701a      	strb	r2, [r3, #0]
}
 8001548:	46c0      	nop			@ (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b002      	add	sp, #8
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000004 	.word	0x20000004
 8001554:	20000014 	.word	0x20000014
 8001558:	2000009d 	.word	0x2000009d
 800155c:	2000009c 	.word	0x2000009c

08001560 <blinking>:

void blinking()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
	for(int i=0;i<=5;i++)
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	e016      	b.n	800159a <blinking+0x3a>
	{
		HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, 1);
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	015b      	lsls	r3, r3, #5
 8001570:	480e      	ldr	r0, [pc, #56]	@ (80015ac <blinking+0x4c>)
 8001572:	2201      	movs	r2, #1
 8001574:	0019      	movs	r1, r3
 8001576:	f000 ff94 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_Delay(75);
 800157a:	204b      	movs	r0, #75	@ 0x4b
 800157c:	f000 fd02 	bl	8001f84 <HAL_Delay>
		HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, 0);
 8001580:	2380      	movs	r3, #128	@ 0x80
 8001582:	015b      	lsls	r3, r3, #5
 8001584:	4809      	ldr	r0, [pc, #36]	@ (80015ac <blinking+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	0019      	movs	r1, r3
 800158a:	f000 ff8a 	bl	80024a2 <HAL_GPIO_WritePin>
		HAL_Delay(75);
 800158e:	204b      	movs	r0, #75	@ 0x4b
 8001590:	f000 fcf8 	bl	8001f84 <HAL_Delay>
	for(int i=0;i<=5;i++)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3301      	adds	r3, #1
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b05      	cmp	r3, #5
 800159e:	dde5      	ble.n	800156c <blinking+0xc>
	}
}
 80015a0:	46c0      	nop			@ (mov r8, r8)
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	48000400 	.word	0x48000400

080015b0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015b4:	f000 fc82 	bl	8001ebc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015b8:	f000 f918 	bl	80017ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015bc:	f7ff fa32 	bl	8000a24 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80015c0:	f000 fbd6 	bl	8001d70 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 80015c4:	f000 fa76 	bl	8001ab4 <MX_TIM3_Init>
	MX_TIM15_Init();
 80015c8:	f000 fb14 	bl	8001bf4 <MX_TIM15_Init>
	MX_TIM6_Init();
 80015cc:	f000 fac8 	bl	8001b60 <MX_TIM6_Init>
	MX_TIM14_Init();
 80015d0:	f000 fae8 	bl	8001ba4 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	DF_Init(30);
 80015d4:	201e      	movs	r0, #30
 80015d6:	f7fe ffb5 	bl	8000544 <DF_Init>
	HAL_TIM_Base_Start(&htim3);
 80015da:	4b72      	ldr	r3, [pc, #456]	@ (80017a4 <main+0x1f4>)
 80015dc:	0018      	movs	r0, r3
 80015de:	f001 fc47 	bl	8002e70 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim15);
 80015e2:	4b71      	ldr	r3, [pc, #452]	@ (80017a8 <main+0x1f8>)
 80015e4:	0018      	movs	r0, r3
 80015e6:	f001 fcad 	bl	8002f44 <HAL_TIM_Base_Start_IT>
	seed = __HAL_TIM_GET_COUNTER(&htim3);
 80015ea:	4b6e      	ldr	r3, [pc, #440]	@ (80017a4 <main+0x1f4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015f0:	4b6e      	ldr	r3, [pc, #440]	@ (80017ac <main+0x1fc>)
 80015f2:	601a      	str	r2, [r3, #0]
	srand(seed);
 80015f4:	4b6d      	ldr	r3, [pc, #436]	@ (80017ac <main+0x1fc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f002 fcbb 	bl	8003f74 <srand>
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 0);
 80015fe:	4b6c      	ldr	r3, [pc, #432]	@ (80017b0 <main+0x200>)
 8001600:	2200      	movs	r2, #0
 8001602:	2101      	movs	r1, #1
 8001604:	0018      	movs	r0, r3
 8001606:	f000 ff4c 	bl	80024a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 1);
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	01db      	lsls	r3, r3, #7
 800160e:	4869      	ldr	r0, [pc, #420]	@ (80017b4 <main+0x204>)
 8001610:	2201      	movs	r2, #1
 8001612:	0019      	movs	r1, r3
 8001614:	f000 ff45 	bl	80024a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001618:	200a      	movs	r0, #10
 800161a:	f000 fcb3 	bl	8001f84 <HAL_Delay>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 0);
 800161e:	2380      	movs	r3, #128	@ 0x80
 8001620:	01db      	lsls	r3, r3, #7
 8001622:	4864      	ldr	r0, [pc, #400]	@ (80017b4 <main+0x204>)
 8001624:	2200      	movs	r2, #0
 8001626:	0019      	movs	r1, r3
 8001628:	f000 ff3b 	bl	80024a2 <HAL_GPIO_WritePin>

	ask_init(&rf433,ASK_IN_SIG_GPIO_Port,ASK_IN_SIG_Pin);
 800162c:	2390      	movs	r3, #144	@ 0x90
 800162e:	05d9      	lsls	r1, r3, #23
 8001630:	4b61      	ldr	r3, [pc, #388]	@ (80017b8 <main+0x208>)
 8001632:	2202      	movs	r2, #2
 8001634:	0018      	movs	r0, r3
 8001636:	f7fe ffb1 	bl	800059c <ask_init>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Receive the ask code
		ask_loop(&rf433);
 800163a:	4b5f      	ldr	r3, [pc, #380]	@ (80017b8 <main+0x208>)
 800163c:	0018      	movs	r0, r3
 800163e:	f7fe ffdb 	bl	80005f8 <ask_loop>
		if (ask_available(&rf433))
 8001642:	4b5d      	ldr	r3, [pc, #372]	@ (80017b8 <main+0x208>)
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff f965 	bl	8000914 <ask_available>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d02d      	beq.n	80016aa <main+0xfa>
		{
			ask_read(&rf433, code, NULL, NULL);
 800164e:	495b      	ldr	r1, [pc, #364]	@ (80017bc <main+0x20c>)
 8001650:	4859      	ldr	r0, [pc, #356]	@ (80017b8 <main+0x208>)
 8001652:	2300      	movs	r3, #0
 8001654:	2200      	movs	r2, #0
 8001656:	f7ff f987 	bl	8000968 <ask_read>
			if(ask_code_in_flash == (code[0] | (code[1] << 8) | (code[2] << 16)))
 800165a:	4b58      	ldr	r3, [pc, #352]	@ (80017bc <main+0x20c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	001a      	movs	r2, r3
 8001660:	4b56      	ldr	r3, [pc, #344]	@ (80017bc <main+0x20c>)
 8001662:	785b      	ldrb	r3, [r3, #1]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	431a      	orrs	r2, r3
 8001668:	4b54      	ldr	r3, [pc, #336]	@ (80017bc <main+0x20c>)
 800166a:	789b      	ldrb	r3, [r3, #2]
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	431a      	orrs	r2, r3
 8001670:	4b53      	ldr	r3, [pc, #332]	@ (80017c0 <main+0x210>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d10d      	bne.n	8001694 <main+0xe4>
			{
				HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, 1);
 8001678:	2380      	movs	r3, #128	@ 0x80
 800167a:	015b      	lsls	r3, r3, #5
 800167c:	4851      	ldr	r0, [pc, #324]	@ (80017c4 <main+0x214>)
 800167e:	2201      	movs	r2, #1
 8001680:	0019      	movs	r1, r3
 8001682:	f000 ff0e 	bl	80024a2 <HAL_GPIO_WritePin>
				remote_pressed = true;
 8001686:	4b50      	ldr	r3, [pc, #320]	@ (80017c8 <main+0x218>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
				HAL_Delay(10);
 800168c:	200a      	movs	r0, #10
 800168e:	f000 fc79 	bl	8001f84 <HAL_Delay>
 8001692:	e014      	b.n	80016be <main+0x10e>
			}
			else
			{
				remote_pressed = false;
 8001694:	4b4c      	ldr	r3, [pc, #304]	@ (80017c8 <main+0x218>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, 0);
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	015b      	lsls	r3, r3, #5
 800169e:	4849      	ldr	r0, [pc, #292]	@ (80017c4 <main+0x214>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	0019      	movs	r1, r3
 80016a4:	f000 fefd 	bl	80024a2 <HAL_GPIO_WritePin>
 80016a8:	e009      	b.n	80016be <main+0x10e>
			}

		}
		else
		{
			remote_pressed = false;
 80016aa:	4b47      	ldr	r3, [pc, #284]	@ (80017c8 <main+0x218>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, 0);
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	015b      	lsls	r3, r3, #5
 80016b4:	4843      	ldr	r0, [pc, #268]	@ (80017c4 <main+0x214>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	0019      	movs	r1, r3
 80016ba:	f000 fef2 	bl	80024a2 <HAL_GPIO_WritePin>
		}

		// Learn Procedure ...
		if(ask_learning_state == idle)
 80016be:	4b43      	ldr	r3, [pc, #268]	@ (80017cc <main+0x21c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d112      	bne.n	80016ec <main+0x13c>
		{
			if(!HAL_GPIO_ReadPin(Ext_BTN_GPIO_Port, Ext_BTN_Pin))
 80016c6:	4b3a      	ldr	r3, [pc, #232]	@ (80017b0 <main+0x200>)
 80016c8:	2102      	movs	r1, #2
 80016ca:	0018      	movs	r0, r3
 80016cc:	f000 fecc 	bl	8002468 <HAL_GPIO_ReadPin>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d145      	bne.n	8001760 <main+0x1b0>
			{
				HAL_TIM_Base_Start(&htim14);
 80016d4:	4b3e      	ldr	r3, [pc, #248]	@ (80017d0 <main+0x220>)
 80016d6:	0018      	movs	r0, r3
 80016d8:	f001 fbca 	bl	8002e70 <HAL_TIM_Base_Start>
				htim14.Instance->CNT=0;
 80016dc:	4b3c      	ldr	r3, [pc, #240]	@ (80017d0 <main+0x220>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24
				ask_learning_state = learning;
 80016e4:	4b39      	ldr	r3, [pc, #228]	@ (80017cc <main+0x21c>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	e039      	b.n	8001760 <main+0x1b0>
			}
		}
		else if(ask_learning_state == learning)
 80016ec:	4b37      	ldr	r3, [pc, #220]	@ (80017cc <main+0x21c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d12b      	bne.n	800174c <main+0x19c>
		{
			// wait for 5 seconds
			if(htim14.Instance->CNT>5000) //12500 = 5 seconds
 80016f4:	4b36      	ldr	r3, [pc, #216]	@ (80017d0 <main+0x220>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	4a36      	ldr	r2, [pc, #216]	@ (80017d4 <main+0x224>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d916      	bls.n	800172e <main+0x17e>
			{
				// ask code is valid, so save it ...
				ask_code_in_flash = code[0] | (code[1] << 8) | (code[2] << 16);
 8001700:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <main+0x20c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	001a      	movs	r2, r3
 8001706:	4b2d      	ldr	r3, [pc, #180]	@ (80017bc <main+0x20c>)
 8001708:	785b      	ldrb	r3, [r3, #1]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	431a      	orrs	r2, r3
 800170e:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <main+0x20c>)
 8001710:	789b      	ldrb	r3, [r3, #2]
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	4313      	orrs	r3, r2
 8001716:	001a      	movs	r2, r3
 8001718:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <main+0x210>)
 800171a:	601a      	str	r2, [r3, #0]
				blinking();
 800171c:	f7ff ff20 	bl	8001560 <blinking>
//				Flash_Write_Data(0x0801FC00, &ask_code_in_flash, 1);
				HAL_TIM_Base_Stop(&htim14);
 8001720:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <main+0x220>)
 8001722:	0018      	movs	r0, r3
 8001724:	f001 fbe8 	bl	8002ef8 <HAL_TIM_Base_Stop>
				ask_learning_state = learned;
 8001728:	4b28      	ldr	r3, [pc, #160]	@ (80017cc <main+0x21c>)
 800172a:	2202      	movs	r2, #2
 800172c:	701a      	strb	r2, [r3, #0]
			}

			if(HAL_GPIO_ReadPin(Ext_BTN_GPIO_Port, Ext_BTN_Pin))	// BTN is released, learning procedure failed
 800172e:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <main+0x200>)
 8001730:	2102      	movs	r1, #2
 8001732:	0018      	movs	r0, r3
 8001734:	f000 fe98 	bl	8002468 <HAL_GPIO_ReadPin>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d011      	beq.n	8001760 <main+0x1b0>
			{
				ask_learning_state = idle;
 800173c:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <main+0x21c>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop(&htim14);
 8001742:	4b23      	ldr	r3, [pc, #140]	@ (80017d0 <main+0x220>)
 8001744:	0018      	movs	r0, r3
 8001746:	f001 fbd7 	bl	8002ef8 <HAL_TIM_Base_Stop>
 800174a:	e009      	b.n	8001760 <main+0x1b0>
			}
		}
		else // learned
		{
			// wait for BTN to release
			if(HAL_GPIO_ReadPin(Ext_BTN_GPIO_Port, Ext_BTN_Pin))
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <main+0x200>)
 800174e:	2102      	movs	r1, #2
 8001750:	0018      	movs	r0, r3
 8001752:	f000 fe89 	bl	8002468 <HAL_GPIO_ReadPin>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d002      	beq.n	8001760 <main+0x1b0>
				ask_learning_state = idle;
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <main+0x21c>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
		}


		if(state==waiting_For_Start)//check coin & ask & start button
 8001760:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <main+0x228>)
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	4b1d      	ldr	r3, [pc, #116]	@ (80017dc <main+0x22c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d108      	bne.n	800177e <main+0x1ce>
		{
			segment_Update(E);
 800176c:	2063      	movs	r0, #99	@ 0x63
 800176e:	f7ff fad9 	bl	8000d24 <segment_Update>
			shuffle(randomNumber, 16);
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <main+0x230>)
 8001774:	2110      	movs	r1, #16
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff fe0c 	bl	8001394 <shuffle>
 800177c:	e75d      	b.n	800163a <main+0x8a>
		}
		else if(state==button_Clicked)
 800177e:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <main+0x228>)
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <main+0x234>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d102      	bne.n	8001790 <main+0x1e0>
			button_Click();
 800178a:	f7ff fe7b 	bl	8001484 <button_Click>
 800178e:	e754      	b.n	800163a <main+0x8a>

		else if(state==playing_Game)
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <main+0x228>)
 8001792:	781a      	ldrb	r2, [r3, #0]
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <main+0x238>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d000      	beq.n	800179e <main+0x1ee>
 800179c:	e74d      	b.n	800163a <main+0x8a>
			start_Game();
 800179e:	f7ff fe99 	bl	80014d4 <start_Game>
		ask_loop(&rf433);
 80017a2:	e74a      	b.n	800163a <main+0x8a>
 80017a4:	20000108 	.word	0x20000108
 80017a8:	200001e0 	.word	0x200001e0
 80017ac:	200000a0 	.word	0x200000a0
 80017b0:	48001400 	.word	0x48001400
 80017b4:	48000800 	.word	0x48000800
 80017b8:	200000a8 	.word	0x200000a8
 80017bc:	20000100 	.word	0x20000100
 80017c0:	200000fc 	.word	0x200000fc
 80017c4:	48000400 	.word	0x48000400
 80017c8:	20000016 	.word	0x20000016
 80017cc:	20000103 	.word	0x20000103
 80017d0:	20000198 	.word	0x20000198
 80017d4:	00001388 	.word	0x00001388
 80017d8:	2000009c 	.word	0x2000009c
 80017dc:	2000009d 	.word	0x2000009d
 80017e0:	20000004 	.word	0x20000004
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000001 	.word	0x20000001

080017ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b091      	sub	sp, #68	@ 0x44
 80017f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	2410      	movs	r4, #16
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	0018      	movs	r0, r3
 80017f8:	2330      	movs	r3, #48	@ 0x30
 80017fa:	001a      	movs	r2, r3
 80017fc:	2100      	movs	r1, #0
 80017fe:	f002 fd45 	bl	800428c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001802:	003b      	movs	r3, r7
 8001804:	0018      	movs	r0, r3
 8001806:	2310      	movs	r3, #16
 8001808:	001a      	movs	r2, r3
 800180a:	2100      	movs	r1, #0
 800180c:	f002 fd3e 	bl	800428c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001810:	0021      	movs	r1, r4
 8001812:	187b      	adds	r3, r7, r1
 8001814:	2202      	movs	r2, #2
 8001816:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2201      	movs	r2, #1
 800181c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2210      	movs	r2, #16
 8001822:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182a:	187b      	adds	r3, r7, r1
 800182c:	0018      	movs	r0, r3
 800182e:	f000 fe71 	bl	8002514 <HAL_RCC_OscConfig>
 8001832:	1e03      	subs	r3, r0, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0x4e>
	{
		Error_Handler();
 8001836:	f000 f819 	bl	800186c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183a:	003b      	movs	r3, r7
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001840:	003b      	movs	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001846:	003b      	movs	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184c:	003b      	movs	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001852:	003b      	movs	r3, r7
 8001854:	2100      	movs	r1, #0
 8001856:	0018      	movs	r0, r3
 8001858:	f001 f976 	bl	8002b48 <HAL_RCC_ClockConfig>
 800185c:	1e03      	subs	r3, r0, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8001860:	f000 f804 	bl	800186c <Error_Handler>
	}
}
 8001864:	46c0      	nop			@ (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b011      	add	sp, #68	@ 0x44
 800186a:	bd90      	pop	{r4, r7, pc}

0800186c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001874:	46c0      	nop			@ (mov r8, r8)
 8001876:	e7fd      	b.n	8001874 <Error_Handler+0x8>

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_MspInit+0x44>)
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <HAL_MspInit+0x44>)
 8001884:	2101      	movs	r1, #1
 8001886:	430a      	orrs	r2, r1
 8001888:	619a      	str	r2, [r3, #24]
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <HAL_MspInit+0x44>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	2201      	movs	r2, #1
 8001890:	4013      	ands	r3, r2
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_MspInit+0x44>)
 8001898:	69da      	ldr	r2, [r3, #28]
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_MspInit+0x44>)
 800189c:	2180      	movs	r1, #128	@ 0x80
 800189e:	0549      	lsls	r1, r1, #21
 80018a0:	430a      	orrs	r2, r1
 80018a2:	61da      	str	r2, [r3, #28]
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_MspInit+0x44>)
 80018a6:	69da      	ldr	r2, [r3, #28]
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	055b      	lsls	r3, r3, #21
 80018ac:	4013      	ands	r3, r2
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	40021000 	.word	0x40021000

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c4:	46c0      	nop			@ (mov r8, r8)
 80018c6:	e7fd      	b.n	80018c4 <NMI_Handler+0x4>

080018c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018cc:	46c0      	nop			@ (mov r8, r8)
 80018ce:	e7fd      	b.n	80018cc <HardFault_Handler+0x4>

080018d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018d4:	46c0      	nop			@ (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 fb30 	bl	8001f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	46c0      	nop			@ (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASK_IN_SIG_Pin);
 80018f6:	2002      	movs	r0, #2
 80018f8:	f000 fdf0 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80018fc:	46c0      	nop			@ (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ext_IO3_Pin);
 8001906:	2004      	movs	r0, #4
 8001908:	f000 fde8 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800190c:	46c0      	nop			@ (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <TIM15_IRQHandler+0x14>)
 800191a:	0018      	movs	r0, r3
 800191c:	f001 fb5e 	bl	8002fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001920:	46c0      	nop			@ (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	200001e0 	.word	0x200001e0

0800192c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_kill>:

int _kill(int pid, int sig)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001942:	f002 fcf9 	bl	8004338 <__errno>
 8001946:	0003      	movs	r3, r0
 8001948:	2216      	movs	r2, #22
 800194a:	601a      	str	r2, [r3, #0]
  return -1;
 800194c:	2301      	movs	r3, #1
 800194e:	425b      	negs	r3, r3
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <_exit>:

void _exit (int status)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001960:	2301      	movs	r3, #1
 8001962:	425a      	negs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0011      	movs	r1, r2
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff ffe5 	bl	8001938 <_kill>
  while (1) {}    /* Make sure we hang here */
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	e7fd      	b.n	800196e <_exit+0x16>

08001972 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e00a      	b.n	800199a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001984:	e000      	b.n	8001988 <_read+0x16>
 8001986:	bf00      	nop
 8001988:	0001      	movs	r1, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	60ba      	str	r2, [r7, #8]
 8001990:	b2ca      	uxtb	r2, r1
 8001992:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbf0      	blt.n	8001984 <_read+0x12>
  }

  return len;
 80019a2:	687b      	ldr	r3, [r7, #4]
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b006      	add	sp, #24
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e009      	b.n	80019d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	60ba      	str	r2, [r7, #8]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	0018      	movs	r0, r3
 80019c8:	e000      	b.n	80019cc <_write+0x20>
 80019ca:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbf1      	blt.n	80019be <_write+0x12>
  }
  return len;
 80019da:	687b      	ldr	r3, [r7, #4]
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	b006      	add	sp, #24
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_close>:

int _close(int file)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	425b      	negs	r3, r3
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2280      	movs	r2, #128	@ 0x80
 8001a06:	0192      	lsls	r2, r2, #6
 8001a08:	605a      	str	r2, [r3, #4]
  return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b002      	add	sp, #8
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_isatty>:

int _isatty(int file)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a1c:	2301      	movs	r3, #1
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b004      	add	sp, #16
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a44:	4a14      	ldr	r2, [pc, #80]	@ (8001a98 <_sbrk+0x5c>)
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <_sbrk+0x60>)
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <_sbrk+0x64>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <_sbrk+0x68>)
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	18d3      	adds	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d207      	bcs.n	8001a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a6c:	f002 fc64 	bl	8004338 <__errno>
 8001a70:	0003      	movs	r3, r0
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	425b      	negs	r3, r3
 8001a7a:	e009      	b.n	8001a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a82:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	18d2      	adds	r2, r2, r3
 8001a8a:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <_sbrk+0x64>)
 8001a8c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b006      	add	sp, #24
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20002000 	.word	0x20002000
 8001a9c:	00000400 	.word	0x00000400
 8001aa0:	20000104 	.word	0x20000104
 8001aa4:	20000400 	.word	0x20000400

08001aa8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001aac:	46c0      	nop			@ (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	2308      	movs	r3, #8
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	0018      	movs	r0, r3
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f002 fbe1 	bl	800428c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aca:	003b      	movs	r3, r7
 8001acc:	0018      	movs	r0, r3
 8001ace:	2308      	movs	r3, #8
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	f002 fbda 	bl	800428c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <MX_TIM3_Init+0xa0>)
 8001ada:	4a1f      	ldr	r2, [pc, #124]	@ (8001b58 <MX_TIM3_Init+0xa4>)
 8001adc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	@ (8001b54 <MX_TIM3_Init+0xa0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <MX_TIM3_Init+0xa0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000-1;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <MX_TIM3_Init+0xa0>)
 8001aec:	4a1b      	ldr	r2, [pc, #108]	@ (8001b5c <MX_TIM3_Init+0xa8>)
 8001aee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af0:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <MX_TIM3_Init+0xa0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <MX_TIM3_Init+0xa0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001afc:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <MX_TIM3_Init+0xa0>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f001 f966 	bl	8002dd0 <HAL_TIM_Base_Init>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b08:	f7ff feb0 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	2108      	movs	r1, #8
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	0152      	lsls	r2, r2, #5
 8001b14:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b16:	187a      	adds	r2, r7, r1
 8001b18:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <MX_TIM3_Init+0xa0>)
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f001 fb4b 	bl	80031b8 <HAL_TIM_ConfigClockSource>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b26:	f7ff fea1 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	003b      	movs	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b30:	003b      	movs	r3, r7
 8001b32:	2200      	movs	r2, #0
 8001b34:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b36:	003a      	movs	r2, r7
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <MX_TIM3_Init+0xa0>)
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f001 fd4d 	bl	80035dc <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	1e03      	subs	r3, r0, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001b46:	f7ff fe91 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b006      	add	sp, #24
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	20000108 	.word	0x20000108
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	00001f3f 	.word	0x00001f3f

08001b60 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <MX_TIM6_Init+0x38>)
 8001b66:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <MX_TIM6_Init+0x3c>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <MX_TIM6_Init+0x38>)
 8001b6c:	224f      	movs	r2, #79	@ 0x4f
 8001b6e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <MX_TIM6_Init+0x38>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <MX_TIM6_Init+0x38>)
 8001b78:	4a09      	ldr	r2, [pc, #36]	@ (8001ba0 <MX_TIM6_Init+0x40>)
 8001b7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <MX_TIM6_Init+0x38>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b82:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <MX_TIM6_Init+0x38>)
 8001b84:	0018      	movs	r0, r3
 8001b86:	f001 f923 	bl	8002dd0 <HAL_TIM_Base_Init>
 8001b8a:	1e03      	subs	r3, r0, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8001b8e:	f7ff fe6d 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000150 	.word	0x20000150
 8001b9c:	40001000 	.word	0x40001000
 8001ba0:	0000ffff 	.word	0x0000ffff

08001ba4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <MX_TIM14_Init+0x40>)
 8001baa:	4a0f      	ldr	r2, [pc, #60]	@ (8001be8 <MX_TIM14_Init+0x44>)
 8001bac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 8001bae:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <MX_TIM14_Init+0x40>)
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8001bec <MX_TIM14_Init+0x48>)
 8001bb2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <MX_TIM14_Init+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <MX_TIM14_Init+0x40>)
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf0 <MX_TIM14_Init+0x4c>)
 8001bbe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <MX_TIM14_Init+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <MX_TIM14_Init+0x40>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <MX_TIM14_Init+0x40>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f001 f8fe 	bl	8002dd0 <HAL_TIM_Base_Init>
 8001bd4:	1e03      	subs	r3, r0, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001bd8:	f7ff fe48 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001bdc:	46c0      	nop			@ (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	20000198 	.word	0x20000198
 8001be8:	40002000 	.word	0x40002000
 8001bec:	00001f3f 	.word	0x00001f3f
 8001bf0:	0000ffff 	.word	0x0000ffff

08001bf4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	0018      	movs	r0, r3
 8001c00:	2310      	movs	r3, #16
 8001c02:	001a      	movs	r2, r3
 8001c04:	2100      	movs	r1, #0
 8001c06:	f002 fb41 	bl	800428c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0a:	003b      	movs	r3, r7
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	2308      	movs	r3, #8
 8001c10:	001a      	movs	r2, r3
 8001c12:	2100      	movs	r1, #0
 8001c14:	f002 fb3a 	bl	800428c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <MX_TIM15_Init+0xa4>)
 8001c1a:	4a20      	ldr	r2, [pc, #128]	@ (8001c9c <MX_TIM15_Init+0xa8>)
 8001c1c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8-1;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <MX_TIM15_Init+0xa4>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <MX_TIM15_Init+0xa4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000-1;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <MX_TIM15_Init+0xa4>)
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <MX_TIM15_Init+0xac>)
 8001c2e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c30:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <MX_TIM15_Init+0xa4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c36:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <MX_TIM15_Init+0xa4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <MX_TIM15_Init+0xa4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <MX_TIM15_Init+0xa4>)
 8001c44:	0018      	movs	r0, r3
 8001c46:	f001 f8c3 	bl	8002dd0 <HAL_TIM_Base_Init>
 8001c4a:	1e03      	subs	r3, r0, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 8001c4e:	f7ff fe0d 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c52:	2108      	movs	r1, #8
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	2280      	movs	r2, #128	@ 0x80
 8001c58:	0152      	lsls	r2, r2, #5
 8001c5a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001c5c:	187a      	adds	r2, r7, r1
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MX_TIM15_Init+0xa4>)
 8001c60:	0011      	movs	r1, r2
 8001c62:	0018      	movs	r0, r3
 8001c64:	f001 faa8 	bl	80031b8 <HAL_TIM_ConfigClockSource>
 8001c68:	1e03      	subs	r3, r0, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001c6c:	f7ff fdfe 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c70:	003b      	movs	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c76:	003b      	movs	r3, r7
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c7c:	003a      	movs	r2, r7
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_TIM15_Init+0xa4>)
 8001c80:	0011      	movs	r1, r2
 8001c82:	0018      	movs	r0, r3
 8001c84:	f001 fcaa 	bl	80035dc <HAL_TIMEx_MasterConfigSynchronization>
 8001c88:	1e03      	subs	r3, r0, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001c8c:	f7ff fdee 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001c90:	46c0      	nop			@ (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b006      	add	sp, #24
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200001e0 	.word	0x200001e0
 8001c9c:	40014000 	.word	0x40014000
 8001ca0:	0000270f 	.word	0x0000270f

08001ca4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d5c <HAL_TIM_Base_MspInit+0xb8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	4b29      	ldr	r3, [pc, #164]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	61da      	str	r2, [r3, #28]
 8001cc2:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001cce:	e040      	b.n	8001d52 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM6)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a23      	ldr	r2, [pc, #140]	@ (8001d64 <HAL_TIM_Base_MspInit+0xc0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cda:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	4b20      	ldr	r3, [pc, #128]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001ce0:	2110      	movs	r1, #16
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	61da      	str	r2, [r3, #28]
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	2210      	movs	r2, #16
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
}
 8001cf2:	e02e      	b.n	8001d52 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM14)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d68 <HAL_TIM_Base_MspInit+0xc4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d10e      	bne.n	8001d1c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001cfe:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001d00:	69da      	ldr	r2, [r3, #28]
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001d04:	2180      	movs	r1, #128	@ 0x80
 8001d06:	0049      	lsls	r1, r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	61da      	str	r2, [r3, #28]
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001d0e:	69da      	ldr	r2, [r3, #28]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
}
 8001d1a:	e01a      	b.n	8001d52 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM15)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <HAL_TIM_Base_MspInit+0xc8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d115      	bne.n	8001d52 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	0249      	lsls	r1, r1, #9
 8001d30:	430a      	orrs	r2, r1
 8001d32:	619a      	str	r2, [r3, #24]
 8001d34:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <HAL_TIM_Base_MspInit+0xbc>)
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	025b      	lsls	r3, r3, #9
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2014      	movs	r0, #20
 8001d48:	f000 f9ec 	bl	8002124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001d4c:	2014      	movs	r0, #20
 8001d4e:	f000 f9fe 	bl	800214e <HAL_NVIC_EnableIRQ>
}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b006      	add	sp, #24
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40001000 	.word	0x40001000
 8001d68:	40002000 	.word	0x40002000
 8001d6c:	40014000 	.word	0x40014000

08001d70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d74:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <MX_USART2_UART_Init+0x58>)
 8001d76:	4a15      	ldr	r2, [pc, #84]	@ (8001dcc <MX_USART2_UART_Init+0x5c>)
 8001d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <MX_USART2_UART_Init+0x58>)
 8001d7c:	2296      	movs	r2, #150	@ 0x96
 8001d7e:	0192      	lsls	r2, r2, #6
 8001d80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d82:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <MX_USART2_UART_Init+0x58>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <MX_USART2_UART_Init+0x58>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <MX_USART2_UART_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <MX_USART2_UART_Init+0x58>)
 8001d96:	220c      	movs	r2, #12
 8001d98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <MX_USART2_UART_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da0:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <MX_USART2_UART_Init+0x58>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <MX_USART2_UART_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <MX_USART2_UART_Init+0x58>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <MX_USART2_UART_Init+0x58>)
 8001db4:	0018      	movs	r0, r3
 8001db6:	f001 fc79 	bl	80036ac <HAL_UART_Init>
 8001dba:	1e03      	subs	r3, r0, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dbe:	f7ff fd55 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc2:	46c0      	nop			@ (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000228 	.word	0x20000228
 8001dcc:	40004400 	.word	0x40004400

08001dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b08b      	sub	sp, #44	@ 0x2c
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	2414      	movs	r4, #20
 8001dda:	193b      	adds	r3, r7, r4
 8001ddc:	0018      	movs	r0, r3
 8001dde:	2314      	movs	r3, #20
 8001de0:	001a      	movs	r2, r3
 8001de2:	2100      	movs	r1, #0
 8001de4:	f002 fa52 	bl	800428c <memset>
  if(uartHandle->Instance==USART2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1c      	ldr	r2, [pc, #112]	@ (8001e60 <HAL_UART_MspInit+0x90>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d132      	bne.n	8001e58 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <HAL_UART_MspInit+0x94>)
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_UART_MspInit+0x94>)
 8001df8:	2180      	movs	r1, #128	@ 0x80
 8001dfa:	0289      	lsls	r1, r1, #10
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	61da      	str	r2, [r3, #28]
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_UART_MspInit+0x94>)
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	029b      	lsls	r3, r3, #10
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_UART_MspInit+0x94>)
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <HAL_UART_MspInit+0x94>)
 8001e14:	2180      	movs	r1, #128	@ 0x80
 8001e16:	0289      	lsls	r1, r1, #10
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	615a      	str	r2, [r3, #20]
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <HAL_UART_MspInit+0x94>)
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	029b      	lsls	r3, r3, #10
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e2a:	0021      	movs	r1, r4
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	220c      	movs	r2, #12
 8001e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	2202      	movs	r2, #2
 8001e36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	2203      	movs	r2, #3
 8001e42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	2201      	movs	r2, #1
 8001e48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	187a      	adds	r2, r7, r1
 8001e4c:	2390      	movs	r3, #144	@ 0x90
 8001e4e:	05db      	lsls	r3, r3, #23
 8001e50:	0011      	movs	r1, r2
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 f998 	bl	8002188 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e58:	46c0      	nop			@ (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b00b      	add	sp, #44	@ 0x2c
 8001e5e:	bd90      	pop	{r4, r7, pc}
 8001e60:	40004400 	.word	0x40004400
 8001e64:	40021000 	.word	0x40021000

08001e68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e68:	480d      	ldr	r0, [pc, #52]	@ (8001ea0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e6c:	f7ff fe1c 	bl	8001aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e70:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e72:	490d      	ldr	r1, [pc, #52]	@ (8001ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <LoopForever+0xe>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e88:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb4 <LoopForever+0x16>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e96:	f002 fa55 	bl	8004344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e9a:	f7ff fb89 	bl	80015b0 <main>

08001e9e <LoopForever>:

LoopForever:
    b LoopForever
 8001e9e:	e7fe      	b.n	8001e9e <LoopForever>
  ldr   r0, =_estack
 8001ea0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001eac:	08005168 	.word	0x08005168
  ldr r2, =_sbss
 8001eb0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001eb4:	20000400 	.word	0x20000400

08001eb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC1_IRQHandler>
	...

08001ebc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec0:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <HAL_Init+0x24>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_Init+0x24>)
 8001ec6:	2110      	movs	r1, #16
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 f809 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed2:	f7ff fcd1 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	40022000 	.word	0x40022000

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eec:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <HAL_InitTick+0x5c>)
 8001eee:	681c      	ldr	r4, [r3, #0]
 8001ef0:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <HAL_InitTick+0x60>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	23fa      	movs	r3, #250	@ 0xfa
 8001ef8:	0098      	lsls	r0, r3, #2
 8001efa:	f7fe f90f 	bl	800011c <__udivsi3>
 8001efe:	0003      	movs	r3, r0
 8001f00:	0019      	movs	r1, r3
 8001f02:	0020      	movs	r0, r4
 8001f04:	f7fe f90a 	bl	800011c <__udivsi3>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f000 f92f 	bl	800216e <HAL_SYSTICK_Config>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e00f      	b.n	8001f38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d80b      	bhi.n	8001f36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	2301      	movs	r3, #1
 8001f22:	425b      	negs	r3, r3
 8001f24:	2200      	movs	r2, #0
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 f8fc 	bl	8002124 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_InitTick+0x64>)
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b003      	add	sp, #12
 8001f3e:	bd90      	pop	{r4, r7, pc}
 8001f40:	20000018 	.word	0x20000018
 8001f44:	20000020 	.word	0x20000020
 8001f48:	2000001c 	.word	0x2000001c

08001f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_IncTick+0x1c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	001a      	movs	r2, r3
 8001f56:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <HAL_IncTick+0x20>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	18d2      	adds	r2, r2, r3
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <HAL_IncTick+0x20>)
 8001f5e:	601a      	str	r2, [r3, #0]
}
 8001f60:	46c0      	nop			@ (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	20000020 	.word	0x20000020
 8001f6c:	200002b0 	.word	0x200002b0

08001f70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b02      	ldr	r3, [pc, #8]	@ (8001f80 <HAL_GetTick+0x10>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	200002b0 	.word	0x200002b0

08001f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff fff0 	bl	8001f70 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	d005      	beq.n	8001faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <HAL_Delay+0x44>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	189b      	adds	r3, r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	f7ff ffe0 	bl	8001f70 <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d8f7      	bhi.n	8001fac <HAL_Delay+0x28>
  {
  }
}
 8001fbc:	46c0      	nop			@ (mov r8, r8)
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b004      	add	sp, #16
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	20000020 	.word	0x20000020

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	1dfb      	adds	r3, r7, #7
 8001fd6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fde:	d809      	bhi.n	8001ff4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe0:	1dfb      	adds	r3, r7, #7
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	001a      	movs	r2, r3
 8001fe6:	231f      	movs	r3, #31
 8001fe8:	401a      	ands	r2, r3
 8001fea:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <__NVIC_EnableIRQ+0x30>)
 8001fec:	2101      	movs	r1, #1
 8001fee:	4091      	lsls	r1, r2
 8001ff0:	000a      	movs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
  }
}
 8001ff4:	46c0      	nop			@ (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b002      	add	sp, #8
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	0002      	movs	r2, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b7f      	cmp	r3, #127	@ 0x7f
 8002014:	d828      	bhi.n	8002068 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002016:	4a2f      	ldr	r2, [pc, #188]	@ (80020d4 <__NVIC_SetPriority+0xd4>)
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b25b      	sxtb	r3, r3
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	33c0      	adds	r3, #192	@ 0xc0
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	589b      	ldr	r3, [r3, r2]
 8002026:	1dfa      	adds	r2, r7, #7
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	0011      	movs	r1, r2
 800202c:	2203      	movs	r2, #3
 800202e:	400a      	ands	r2, r1
 8002030:	00d2      	lsls	r2, r2, #3
 8002032:	21ff      	movs	r1, #255	@ 0xff
 8002034:	4091      	lsls	r1, r2
 8002036:	000a      	movs	r2, r1
 8002038:	43d2      	mvns	r2, r2
 800203a:	401a      	ands	r2, r3
 800203c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	22ff      	movs	r2, #255	@ 0xff
 8002044:	401a      	ands	r2, r3
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	0018      	movs	r0, r3
 800204c:	2303      	movs	r3, #3
 800204e:	4003      	ands	r3, r0
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002054:	481f      	ldr	r0, [pc, #124]	@ (80020d4 <__NVIC_SetPriority+0xd4>)
 8002056:	1dfb      	adds	r3, r7, #7
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b25b      	sxtb	r3, r3
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	430a      	orrs	r2, r1
 8002060:	33c0      	adds	r3, #192	@ 0xc0
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002066:	e031      	b.n	80020cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002068:	4a1b      	ldr	r2, [pc, #108]	@ (80020d8 <__NVIC_SetPriority+0xd8>)
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	0019      	movs	r1, r3
 8002070:	230f      	movs	r3, #15
 8002072:	400b      	ands	r3, r1
 8002074:	3b08      	subs	r3, #8
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3306      	adds	r3, #6
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	18d3      	adds	r3, r2, r3
 800207e:	3304      	adds	r3, #4
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	1dfa      	adds	r2, r7, #7
 8002084:	7812      	ldrb	r2, [r2, #0]
 8002086:	0011      	movs	r1, r2
 8002088:	2203      	movs	r2, #3
 800208a:	400a      	ands	r2, r1
 800208c:	00d2      	lsls	r2, r2, #3
 800208e:	21ff      	movs	r1, #255	@ 0xff
 8002090:	4091      	lsls	r1, r2
 8002092:	000a      	movs	r2, r1
 8002094:	43d2      	mvns	r2, r2
 8002096:	401a      	ands	r2, r3
 8002098:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	019b      	lsls	r3, r3, #6
 800209e:	22ff      	movs	r2, #255	@ 0xff
 80020a0:	401a      	ands	r2, r3
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	0018      	movs	r0, r3
 80020a8:	2303      	movs	r3, #3
 80020aa:	4003      	ands	r3, r0
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020b0:	4809      	ldr	r0, [pc, #36]	@ (80020d8 <__NVIC_SetPriority+0xd8>)
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	001c      	movs	r4, r3
 80020b8:	230f      	movs	r3, #15
 80020ba:	4023      	ands	r3, r4
 80020bc:	3b08      	subs	r3, #8
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	430a      	orrs	r2, r1
 80020c2:	3306      	adds	r3, #6
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	18c3      	adds	r3, r0, r3
 80020c8:	3304      	adds	r3, #4
 80020ca:	601a      	str	r2, [r3, #0]
}
 80020cc:	46c0      	nop			@ (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b003      	add	sp, #12
 80020d2:	bd90      	pop	{r4, r7, pc}
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	045b      	lsls	r3, r3, #17
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d301      	bcc.n	80020f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f0:	2301      	movs	r3, #1
 80020f2:	e010      	b.n	8002116 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <SysTick_Config+0x44>)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	3a01      	subs	r2, #1
 80020fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fc:	2301      	movs	r3, #1
 80020fe:	425b      	negs	r3, r3
 8002100:	2103      	movs	r1, #3
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff ff7c 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <SysTick_Config+0x44>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <SysTick_Config+0x44>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	b002      	add	sp, #8
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	210f      	movs	r1, #15
 8002130:	187b      	adds	r3, r7, r1
 8002132:	1c02      	adds	r2, r0, #0
 8002134:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	187b      	adds	r3, r7, r1
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b25b      	sxtb	r3, r3
 800213e:	0011      	movs	r1, r2
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ff5d 	bl	8002000 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	0002      	movs	r2, r0
 8002156:	1dfb      	adds	r3, r7, #7
 8002158:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b25b      	sxtb	r3, r3
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff ff33 	bl	8001fcc <__NVIC_EnableIRQ>
}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff ffaf 	bl	80020dc <SysTick_Config>
 800217e:	0003      	movs	r3, r0
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b002      	add	sp, #8
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002196:	e14f      	b.n	8002438 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4091      	lsls	r1, r2
 80021a2:	000a      	movs	r2, r1
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d100      	bne.n	80021b0 <HAL_GPIO_Init+0x28>
 80021ae:	e140      	b.n	8002432 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2203      	movs	r2, #3
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d005      	beq.n	80021c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2203      	movs	r2, #3
 80021c2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d130      	bne.n	800222a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	409a      	lsls	r2, r3
 80021d6:	0013      	movs	r3, r2
 80021d8:	43da      	mvns	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	409a      	lsls	r2, r3
 80021ea:	0013      	movs	r3, r2
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021fe:	2201      	movs	r2, #1
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	409a      	lsls	r2, r3
 8002204:	0013      	movs	r3, r2
 8002206:	43da      	mvns	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	2201      	movs	r2, #1
 8002216:	401a      	ands	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
 800221c:	0013      	movs	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2203      	movs	r2, #3
 8002230:	4013      	ands	r3, r2
 8002232:	2b03      	cmp	r3, #3
 8002234:	d017      	beq.n	8002266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	409a      	lsls	r2, r3
 8002244:	0013      	movs	r3, r2
 8002246:	43da      	mvns	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	409a      	lsls	r2, r3
 8002258:	0013      	movs	r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2203      	movs	r2, #3
 800226c:	4013      	ands	r3, r2
 800226e:	2b02      	cmp	r3, #2
 8002270:	d123      	bne.n	80022ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	58d3      	ldr	r3, [r2, r3]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2207      	movs	r2, #7
 8002284:	4013      	ands	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	409a      	lsls	r2, r3
 800228c:	0013      	movs	r3, r2
 800228e:	43da      	mvns	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2107      	movs	r1, #7
 800229e:	400b      	ands	r3, r1
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	409a      	lsls	r2, r3
 80022a4:	0013      	movs	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	08da      	lsrs	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3208      	adds	r2, #8
 80022b4:	0092      	lsls	r2, r2, #2
 80022b6:	6939      	ldr	r1, [r7, #16]
 80022b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	409a      	lsls	r2, r3
 80022c8:	0013      	movs	r3, r2
 80022ca:	43da      	mvns	r2, r3
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2203      	movs	r2, #3
 80022d8:	401a      	ands	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	23c0      	movs	r3, #192	@ 0xc0
 80022f4:	029b      	lsls	r3, r3, #10
 80022f6:	4013      	ands	r3, r2
 80022f8:	d100      	bne.n	80022fc <HAL_GPIO_Init+0x174>
 80022fa:	e09a      	b.n	8002432 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fc:	4b54      	ldr	r3, [pc, #336]	@ (8002450 <HAL_GPIO_Init+0x2c8>)
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <HAL_GPIO_Init+0x2c8>)
 8002302:	2101      	movs	r1, #1
 8002304:	430a      	orrs	r2, r1
 8002306:	619a      	str	r2, [r3, #24]
 8002308:	4b51      	ldr	r3, [pc, #324]	@ (8002450 <HAL_GPIO_Init+0x2c8>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2201      	movs	r2, #1
 800230e:	4013      	ands	r3, r2
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002314:	4a4f      	ldr	r2, [pc, #316]	@ (8002454 <HAL_GPIO_Init+0x2cc>)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	589b      	ldr	r3, [r3, r2]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2203      	movs	r2, #3
 8002326:	4013      	ands	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	409a      	lsls	r2, r3
 800232e:	0013      	movs	r3, r2
 8002330:	43da      	mvns	r2, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	2390      	movs	r3, #144	@ 0x90
 800233c:	05db      	lsls	r3, r3, #23
 800233e:	429a      	cmp	r2, r3
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x1e2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a44      	ldr	r2, [pc, #272]	@ (8002458 <HAL_GPIO_Init+0x2d0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x1de>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a43      	ldr	r2, [pc, #268]	@ (800245c <HAL_GPIO_Init+0x2d4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x1da>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a42      	ldr	r2, [pc, #264]	@ (8002460 <HAL_GPIO_Init+0x2d8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x1d6>
 800235a:	2303      	movs	r3, #3
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x1e4>
 800235e:	2305      	movs	r3, #5
 8002360:	e004      	b.n	800236c <HAL_GPIO_Init+0x1e4>
 8002362:	2302      	movs	r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x1e4>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x1e4>
 800236a:	2300      	movs	r3, #0
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	2103      	movs	r1, #3
 8002370:	400a      	ands	r2, r1
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	4093      	lsls	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800237c:	4935      	ldr	r1, [pc, #212]	@ (8002454 <HAL_GPIO_Init+0x2cc>)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	089b      	lsrs	r3, r3, #2
 8002382:	3302      	adds	r3, #2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238a:	4b36      	ldr	r3, [pc, #216]	@ (8002464 <HAL_GPIO_Init+0x2dc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43da      	mvns	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	035b      	lsls	r3, r3, #13
 80023a2:	4013      	ands	r3, r2
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <HAL_GPIO_Init+0x2dc>)
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <HAL_GPIO_Init+0x2dc>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43da      	mvns	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	039b      	lsls	r3, r3, #14
 80023cc:	4013      	ands	r3, r2
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023d8:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <HAL_GPIO_Init+0x2dc>)
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80023de:	4b21      	ldr	r3, [pc, #132]	@ (8002464 <HAL_GPIO_Init+0x2dc>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43da      	mvns	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	4013      	ands	r3, r2
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002402:	4b18      	ldr	r3, [pc, #96]	@ (8002464 <HAL_GPIO_Init+0x2dc>)
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002408:	4b16      	ldr	r3, [pc, #88]	@ (8002464 <HAL_GPIO_Init+0x2dc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43da      	mvns	r2, r3
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	2380      	movs	r3, #128	@ 0x80
 800241e:	025b      	lsls	r3, r3, #9
 8002420:	4013      	ands	r3, r2
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800242c:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <HAL_GPIO_Init+0x2dc>)
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3301      	adds	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	40da      	lsrs	r2, r3
 8002440:	1e13      	subs	r3, r2, #0
 8002442:	d000      	beq.n	8002446 <HAL_GPIO_Init+0x2be>
 8002444:	e6a8      	b.n	8002198 <HAL_GPIO_Init+0x10>
  } 
}
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	46c0      	nop			@ (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b006      	add	sp, #24
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	40010000 	.word	0x40010000
 8002458:	48000400 	.word	0x48000400
 800245c:	48000800 	.word	0x48000800
 8002460:	48000c00 	.word	0x48000c00
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	000a      	movs	r2, r1
 8002472:	1cbb      	adds	r3, r7, #2
 8002474:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	1cba      	adds	r2, r7, #2
 800247c:	8812      	ldrh	r2, [r2, #0]
 800247e:	4013      	ands	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002482:	230f      	movs	r3, #15
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e003      	b.n	8002494 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800248c:	230f      	movs	r3, #15
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002494:	230f      	movs	r3, #15
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	781b      	ldrb	r3, [r3, #0]
  }
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	0008      	movs	r0, r1
 80024ac:	0011      	movs	r1, r2
 80024ae:	1cbb      	adds	r3, r7, #2
 80024b0:	1c02      	adds	r2, r0, #0
 80024b2:	801a      	strh	r2, [r3, #0]
 80024b4:	1c7b      	adds	r3, r7, #1
 80024b6:	1c0a      	adds	r2, r1, #0
 80024b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ba:	1c7b      	adds	r3, r7, #1
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024c2:	1cbb      	adds	r3, r7, #2
 80024c4:	881a      	ldrh	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024ca:	e003      	b.n	80024d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024cc:	1cbb      	adds	r3, r7, #2
 80024ce:	881a      	ldrh	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024d4:	46c0      	nop			@ (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	0002      	movs	r2, r0
 80024e4:	1dbb      	adds	r3, r7, #6
 80024e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024e8:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	1dba      	adds	r2, r7, #6
 80024ee:	8812      	ldrh	r2, [r2, #0]
 80024f0:	4013      	ands	r3, r2
 80024f2:	d008      	beq.n	8002506 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80024f6:	1dba      	adds	r2, r7, #6
 80024f8:	8812      	ldrh	r2, [r2, #0]
 80024fa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024fc:	1dbb      	adds	r3, r7, #6
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	0018      	movs	r0, r3
 8002502:	f7fe fbad 	bl	8000c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b002      	add	sp, #8
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e301      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2201      	movs	r2, #1
 800252c:	4013      	ands	r3, r2
 800252e:	d100      	bne.n	8002532 <HAL_RCC_OscConfig+0x1e>
 8002530:	e08d      	b.n	800264e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002532:	4bc3      	ldr	r3, [pc, #780]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	220c      	movs	r2, #12
 8002538:	4013      	ands	r3, r2
 800253a:	2b04      	cmp	r3, #4
 800253c:	d00e      	beq.n	800255c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800253e:	4bc0      	ldr	r3, [pc, #768]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	220c      	movs	r2, #12
 8002544:	4013      	ands	r3, r2
 8002546:	2b08      	cmp	r3, #8
 8002548:	d116      	bne.n	8002578 <HAL_RCC_OscConfig+0x64>
 800254a:	4bbd      	ldr	r3, [pc, #756]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	401a      	ands	r2, r3
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	429a      	cmp	r2, r3
 800255a:	d10d      	bne.n	8002578 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	4bb8      	ldr	r3, [pc, #736]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	@ 0x80
 8002562:	029b      	lsls	r3, r3, #10
 8002564:	4013      	ands	r3, r2
 8002566:	d100      	bne.n	800256a <HAL_RCC_OscConfig+0x56>
 8002568:	e070      	b.n	800264c <HAL_RCC_OscConfig+0x138>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d000      	beq.n	8002574 <HAL_RCC_OscConfig+0x60>
 8002572:	e06b      	b.n	800264c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e2d8      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d107      	bne.n	8002590 <HAL_RCC_OscConfig+0x7c>
 8002580:	4baf      	ldr	r3, [pc, #700]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4bae      	ldr	r3, [pc, #696]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002586:	2180      	movs	r1, #128	@ 0x80
 8002588:	0249      	lsls	r1, r1, #9
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e02f      	b.n	80025f0 <HAL_RCC_OscConfig+0xdc>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10c      	bne.n	80025b2 <HAL_RCC_OscConfig+0x9e>
 8002598:	4ba9      	ldr	r3, [pc, #676]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4ba8      	ldr	r3, [pc, #672]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 800259e:	49a9      	ldr	r1, [pc, #676]	@ (8002844 <HAL_RCC_OscConfig+0x330>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	4ba6      	ldr	r3, [pc, #664]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4ba5      	ldr	r3, [pc, #660]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80025aa:	49a7      	ldr	r1, [pc, #668]	@ (8002848 <HAL_RCC_OscConfig+0x334>)
 80025ac:	400a      	ands	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e01e      	b.n	80025f0 <HAL_RCC_OscConfig+0xdc>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b05      	cmp	r3, #5
 80025b8:	d10e      	bne.n	80025d8 <HAL_RCC_OscConfig+0xc4>
 80025ba:	4ba1      	ldr	r3, [pc, #644]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4ba0      	ldr	r3, [pc, #640]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80025c0:	2180      	movs	r1, #128	@ 0x80
 80025c2:	02c9      	lsls	r1, r1, #11
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	4b9d      	ldr	r3, [pc, #628]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b9c      	ldr	r3, [pc, #624]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80025ce:	2180      	movs	r1, #128	@ 0x80
 80025d0:	0249      	lsls	r1, r1, #9
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0xdc>
 80025d8:	4b99      	ldr	r3, [pc, #612]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b98      	ldr	r3, [pc, #608]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80025de:	4999      	ldr	r1, [pc, #612]	@ (8002844 <HAL_RCC_OscConfig+0x330>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	4b96      	ldr	r3, [pc, #600]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b95      	ldr	r3, [pc, #596]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80025ea:	4997      	ldr	r1, [pc, #604]	@ (8002848 <HAL_RCC_OscConfig+0x334>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d014      	beq.n	8002622 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7ff fcba 	bl	8001f70 <HAL_GetTick>
 80025fc:	0003      	movs	r3, r0
 80025fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002602:	f7ff fcb5 	bl	8001f70 <HAL_GetTick>
 8002606:	0002      	movs	r2, r0
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b64      	cmp	r3, #100	@ 0x64
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e28a      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002614:	4b8a      	ldr	r3, [pc, #552]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	029b      	lsls	r3, r3, #10
 800261c:	4013      	ands	r3, r2
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0xee>
 8002620:	e015      	b.n	800264e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7ff fca5 	bl	8001f70 <HAL_GetTick>
 8002626:	0003      	movs	r3, r0
 8002628:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7ff fca0 	bl	8001f70 <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	@ 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e275      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263e:	4b80      	ldr	r3, [pc, #512]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	4013      	ands	r3, r2
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x118>
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2202      	movs	r2, #2
 8002654:	4013      	ands	r3, r2
 8002656:	d100      	bne.n	800265a <HAL_RCC_OscConfig+0x146>
 8002658:	e069      	b.n	800272e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800265a:	4b79      	ldr	r3, [pc, #484]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	220c      	movs	r2, #12
 8002660:	4013      	ands	r3, r2
 8002662:	d00b      	beq.n	800267c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002664:	4b76      	ldr	r3, [pc, #472]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	220c      	movs	r2, #12
 800266a:	4013      	ands	r3, r2
 800266c:	2b08      	cmp	r3, #8
 800266e:	d11c      	bne.n	80026aa <HAL_RCC_OscConfig+0x196>
 8002670:	4b73      	ldr	r3, [pc, #460]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	025b      	lsls	r3, r3, #9
 8002678:	4013      	ands	r3, r2
 800267a:	d116      	bne.n	80026aa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267c:	4b70      	ldr	r3, [pc, #448]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d005      	beq.n	8002692 <HAL_RCC_OscConfig+0x17e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e24b      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	4b6b      	ldr	r3, [pc, #428]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	22f8      	movs	r2, #248	@ 0xf8
 8002698:	4393      	bics	r3, r2
 800269a:	0019      	movs	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	00da      	lsls	r2, r3, #3
 80026a2:	4b67      	ldr	r3, [pc, #412]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a8:	e041      	b.n	800272e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d024      	beq.n	80026fc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b2:	4b63      	ldr	r3, [pc, #396]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4b62      	ldr	r3, [pc, #392]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80026b8:	2101      	movs	r1, #1
 80026ba:	430a      	orrs	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7ff fc57 	bl	8001f70 <HAL_GetTick>
 80026c2:	0003      	movs	r3, r0
 80026c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c8:	f7ff fc52 	bl	8001f70 <HAL_GetTick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e227      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	4b59      	ldr	r3, [pc, #356]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d0f1      	beq.n	80026c8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b56      	ldr	r3, [pc, #344]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	22f8      	movs	r2, #248	@ 0xf8
 80026ea:	4393      	bics	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00da      	lsls	r2, r3, #3
 80026f4:	4b52      	ldr	r3, [pc, #328]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80026f6:	430a      	orrs	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e018      	b.n	800272e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fc:	4b50      	ldr	r3, [pc, #320]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b4f      	ldr	r3, [pc, #316]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002702:	2101      	movs	r1, #1
 8002704:	438a      	bics	r2, r1
 8002706:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff fc32 	bl	8001f70 <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002712:	f7ff fc2d 	bl	8001f70 <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e202      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002724:	4b46      	ldr	r3, [pc, #280]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2202      	movs	r2, #2
 800272a:	4013      	ands	r3, r2
 800272c:	d1f1      	bne.n	8002712 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2208      	movs	r2, #8
 8002734:	4013      	ands	r3, r2
 8002736:	d036      	beq.n	80027a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d019      	beq.n	8002774 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002740:	4b3f      	ldr	r3, [pc, #252]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002744:	4b3e      	ldr	r3, [pc, #248]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002746:	2101      	movs	r1, #1
 8002748:	430a      	orrs	r2, r1
 800274a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7ff fc10 	bl	8001f70 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002756:	f7ff fc0b 	bl	8001f70 <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1e0      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002768:	4b35      	ldr	r3, [pc, #212]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	2202      	movs	r2, #2
 800276e:	4013      	ands	r3, r2
 8002770:	d0f1      	beq.n	8002756 <HAL_RCC_OscConfig+0x242>
 8002772:	e018      	b.n	80027a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002774:	4b32      	ldr	r3, [pc, #200]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002778:	4b31      	ldr	r3, [pc, #196]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 800277a:	2101      	movs	r1, #1
 800277c:	438a      	bics	r2, r1
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002780:	f7ff fbf6 	bl	8001f70 <HAL_GetTick>
 8002784:	0003      	movs	r3, r0
 8002786:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278a:	f7ff fbf1 	bl	8001f70 <HAL_GetTick>
 800278e:	0002      	movs	r2, r0
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1c6      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279c:	4b28      	ldr	r3, [pc, #160]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	2202      	movs	r2, #2
 80027a2:	4013      	ands	r3, r2
 80027a4:	d1f1      	bne.n	800278a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2204      	movs	r2, #4
 80027ac:	4013      	ands	r3, r2
 80027ae:	d100      	bne.n	80027b2 <HAL_RCC_OscConfig+0x29e>
 80027b0:	e0b4      	b.n	800291c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	201f      	movs	r0, #31
 80027b4:	183b      	adds	r3, r7, r0
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ba:	4b21      	ldr	r3, [pc, #132]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	055b      	lsls	r3, r3, #21
 80027c2:	4013      	ands	r3, r2
 80027c4:	d110      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80027cc:	2180      	movs	r1, #128	@ 0x80
 80027ce:	0549      	lsls	r1, r1, #21
 80027d0:	430a      	orrs	r2, r1
 80027d2:	61da      	str	r2, [r3, #28]
 80027d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	055b      	lsls	r3, r3, #21
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027e2:	183b      	adds	r3, r7, r0
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b18      	ldr	r3, [pc, #96]	@ (800284c <HAL_RCC_OscConfig+0x338>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	d11a      	bne.n	800282a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f4:	4b15      	ldr	r3, [pc, #84]	@ (800284c <HAL_RCC_OscConfig+0x338>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b14      	ldr	r3, [pc, #80]	@ (800284c <HAL_RCC_OscConfig+0x338>)
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	0049      	lsls	r1, r1, #1
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7ff fbb5 	bl	8001f70 <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7ff fbb0 	bl	8001f70 <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	@ 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e185      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_RCC_OscConfig+0x338>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4013      	ands	r3, r2
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10e      	bne.n	8002850 <HAL_RCC_OscConfig+0x33c>
 8002832:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002834:	6a1a      	ldr	r2, [r3, #32]
 8002836:	4b02      	ldr	r3, [pc, #8]	@ (8002840 <HAL_RCC_OscConfig+0x32c>)
 8002838:	2101      	movs	r1, #1
 800283a:	430a      	orrs	r2, r1
 800283c:	621a      	str	r2, [r3, #32]
 800283e:	e035      	b.n	80028ac <HAL_RCC_OscConfig+0x398>
 8002840:	40021000 	.word	0x40021000
 8002844:	fffeffff 	.word	0xfffeffff
 8002848:	fffbffff 	.word	0xfffbffff
 800284c:	40007000 	.word	0x40007000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10c      	bne.n	8002872 <HAL_RCC_OscConfig+0x35e>
 8002858:	4bb6      	ldr	r3, [pc, #728]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	4bb5      	ldr	r3, [pc, #724]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 800285e:	2101      	movs	r1, #1
 8002860:	438a      	bics	r2, r1
 8002862:	621a      	str	r2, [r3, #32]
 8002864:	4bb3      	ldr	r3, [pc, #716]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002866:	6a1a      	ldr	r2, [r3, #32]
 8002868:	4bb2      	ldr	r3, [pc, #712]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 800286a:	2104      	movs	r1, #4
 800286c:	438a      	bics	r2, r1
 800286e:	621a      	str	r2, [r3, #32]
 8002870:	e01c      	b.n	80028ac <HAL_RCC_OscConfig+0x398>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b05      	cmp	r3, #5
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x380>
 800287a:	4bae      	ldr	r3, [pc, #696]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 800287c:	6a1a      	ldr	r2, [r3, #32]
 800287e:	4bad      	ldr	r3, [pc, #692]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002880:	2104      	movs	r1, #4
 8002882:	430a      	orrs	r2, r1
 8002884:	621a      	str	r2, [r3, #32]
 8002886:	4bab      	ldr	r3, [pc, #684]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002888:	6a1a      	ldr	r2, [r3, #32]
 800288a:	4baa      	ldr	r3, [pc, #680]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 800288c:	2101      	movs	r1, #1
 800288e:	430a      	orrs	r2, r1
 8002890:	621a      	str	r2, [r3, #32]
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0x398>
 8002894:	4ba7      	ldr	r3, [pc, #668]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	4ba6      	ldr	r3, [pc, #664]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 800289a:	2101      	movs	r1, #1
 800289c:	438a      	bics	r2, r1
 800289e:	621a      	str	r2, [r3, #32]
 80028a0:	4ba4      	ldr	r3, [pc, #656]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 80028a2:	6a1a      	ldr	r2, [r3, #32]
 80028a4:	4ba3      	ldr	r3, [pc, #652]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 80028a6:	2104      	movs	r1, #4
 80028a8:	438a      	bics	r2, r1
 80028aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d014      	beq.n	80028de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7ff fb5c 	bl	8001f70 <HAL_GetTick>
 80028b8:	0003      	movs	r3, r0
 80028ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028bc:	e009      	b.n	80028d2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7ff fb57 	bl	8001f70 <HAL_GetTick>
 80028c2:	0002      	movs	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	4a9b      	ldr	r2, [pc, #620]	@ (8002b38 <HAL_RCC_OscConfig+0x624>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e12b      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	4b98      	ldr	r3, [pc, #608]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	2202      	movs	r2, #2
 80028d8:	4013      	ands	r3, r2
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x3aa>
 80028dc:	e013      	b.n	8002906 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7ff fb47 	bl	8001f70 <HAL_GetTick>
 80028e2:	0003      	movs	r3, r0
 80028e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e6:	e009      	b.n	80028fc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7ff fb42 	bl	8001f70 <HAL_GetTick>
 80028ec:	0002      	movs	r2, r0
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	4a91      	ldr	r2, [pc, #580]	@ (8002b38 <HAL_RCC_OscConfig+0x624>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e116      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	2202      	movs	r2, #2
 8002902:	4013      	ands	r3, r2
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002906:	231f      	movs	r3, #31
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002910:	4b88      	ldr	r3, [pc, #544]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	4b87      	ldr	r3, [pc, #540]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002916:	4989      	ldr	r1, [pc, #548]	@ (8002b3c <HAL_RCC_OscConfig+0x628>)
 8002918:	400a      	ands	r2, r1
 800291a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2210      	movs	r2, #16
 8002922:	4013      	ands	r3, r2
 8002924:	d063      	beq.n	80029ee <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d12a      	bne.n	8002984 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800292e:	4b81      	ldr	r3, [pc, #516]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002932:	4b80      	ldr	r3, [pc, #512]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002934:	2104      	movs	r1, #4
 8002936:	430a      	orrs	r2, r1
 8002938:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800293a:	4b7e      	ldr	r3, [pc, #504]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 800293c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800293e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002940:	2101      	movs	r1, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7ff fb13 	bl	8001f70 <HAL_GetTick>
 800294a:	0003      	movs	r3, r0
 800294c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002950:	f7ff fb0e 	bl	8001f70 <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0e3      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002962:	4b74      	ldr	r3, [pc, #464]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002966:	2202      	movs	r2, #2
 8002968:	4013      	ands	r3, r2
 800296a:	d0f1      	beq.n	8002950 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800296c:	4b71      	ldr	r3, [pc, #452]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 800296e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002970:	22f8      	movs	r2, #248	@ 0xf8
 8002972:	4393      	bics	r3, r2
 8002974:	0019      	movs	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	00da      	lsls	r2, r3, #3
 800297c:	4b6d      	ldr	r3, [pc, #436]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 800297e:	430a      	orrs	r2, r1
 8002980:	635a      	str	r2, [r3, #52]	@ 0x34
 8002982:	e034      	b.n	80029ee <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	3305      	adds	r3, #5
 800298a:	d111      	bne.n	80029b0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800298c:	4b69      	ldr	r3, [pc, #420]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 800298e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002990:	4b68      	ldr	r3, [pc, #416]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002992:	2104      	movs	r1, #4
 8002994:	438a      	bics	r2, r1
 8002996:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002998:	4b66      	ldr	r3, [pc, #408]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 800299a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299c:	22f8      	movs	r2, #248	@ 0xf8
 800299e:	4393      	bics	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	00da      	lsls	r2, r3, #3
 80029a8:	4b62      	ldr	r3, [pc, #392]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 80029aa:	430a      	orrs	r2, r1
 80029ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80029ae:	e01e      	b.n	80029ee <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029b0:	4b60      	ldr	r3, [pc, #384]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 80029b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 80029b6:	2104      	movs	r1, #4
 80029b8:	430a      	orrs	r2, r1
 80029ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80029bc:	4b5d      	ldr	r3, [pc, #372]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 80029be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	438a      	bics	r2, r1
 80029c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7ff fad2 	bl	8001f70 <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029d2:	f7ff facd 	bl	8001f70 <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e0a2      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029e4:	4b53      	ldr	r3, [pc, #332]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 80029e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e8:	2202      	movs	r2, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d1f1      	bne.n	80029d2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d100      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4e4>
 80029f6:	e097      	b.n	8002b28 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	220c      	movs	r2, #12
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d100      	bne.n	8002a06 <HAL_RCC_OscConfig+0x4f2>
 8002a04:	e06b      	b.n	8002ade <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d14c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b49      	ldr	r3, [pc, #292]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b48      	ldr	r3, [pc, #288]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002a14:	494a      	ldr	r1, [pc, #296]	@ (8002b40 <HAL_RCC_OscConfig+0x62c>)
 8002a16:	400a      	ands	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7ff faa9 	bl	8001f70 <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a24:	f7ff faa4 	bl	8001f70 <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e079      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a36:	4b3f      	ldr	r3, [pc, #252]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	049b      	lsls	r3, r3, #18
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a42:	4b3c      	ldr	r3, [pc, #240]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	220f      	movs	r2, #15
 8002a48:	4393      	bics	r3, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a50:	4b38      	ldr	r3, [pc, #224]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002a52:	430a      	orrs	r2, r1
 8002a54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a56:	4b37      	ldr	r3, [pc, #220]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b44 <HAL_RCC_OscConfig+0x630>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	0019      	movs	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	4b32      	ldr	r3, [pc, #200]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a70:	4b30      	ldr	r3, [pc, #192]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b2f      	ldr	r3, [pc, #188]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002a76:	2180      	movs	r1, #128	@ 0x80
 8002a78:	0449      	lsls	r1, r1, #17
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7ff fa77 	bl	8001f70 <HAL_GetTick>
 8002a82:	0003      	movs	r3, r0
 8002a84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a88:	f7ff fa72 	bl	8001f70 <HAL_GetTick>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e047      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a9a:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	2380      	movs	r3, #128	@ 0x80
 8002aa0:	049b      	lsls	r3, r3, #18
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x574>
 8002aa6:	e03f      	b.n	8002b28 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa8:	4b22      	ldr	r3, [pc, #136]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002aae:	4924      	ldr	r1, [pc, #144]	@ (8002b40 <HAL_RCC_OscConfig+0x62c>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7ff fa5c 	bl	8001f70 <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abe:	f7ff fa57 	bl	8001f70 <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e02c      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad0:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	049b      	lsls	r3, r3, #18
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d1f0      	bne.n	8002abe <HAL_RCC_OscConfig+0x5aa>
 8002adc:	e024      	b.n	8002b28 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e01f      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002aea:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <HAL_RCC_OscConfig+0x620>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	025b      	lsls	r3, r3, #9
 8002afc:	401a      	ands	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d10e      	bne.n	8002b24 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	220f      	movs	r2, #15
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	23f0      	movs	r3, #240	@ 0xf0
 8002b18:	039b      	lsls	r3, r3, #14
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b008      	add	sp, #32
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	40021000 	.word	0x40021000
 8002b38:	00001388 	.word	0x00001388
 8002b3c:	efffffff 	.word	0xefffffff
 8002b40:	feffffff 	.word	0xfeffffff
 8002b44:	ffc2ffff 	.word	0xffc2ffff

08002b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0b3      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b5b      	ldr	r3, [pc, #364]	@ (8002ccc <HAL_RCC_ClockConfig+0x184>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d911      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b58      	ldr	r3, [pc, #352]	@ (8002ccc <HAL_RCC_ClockConfig+0x184>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4393      	bics	r3, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	4b55      	ldr	r3, [pc, #340]	@ (8002ccc <HAL_RCC_ClockConfig+0x184>)
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_RCC_ClockConfig+0x184>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e09a      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2202      	movs	r2, #2
 8002b94:	4013      	ands	r3, r2
 8002b96:	d015      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d006      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002ba8:	21e0      	movs	r1, #224	@ 0xe0
 8002baa:	00c9      	lsls	r1, r1, #3
 8002bac:	430a      	orrs	r2, r1
 8002bae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b47      	ldr	r3, [pc, #284]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	22f0      	movs	r2, #240	@ 0xf0
 8002bb6:	4393      	bics	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	4b44      	ldr	r3, [pc, #272]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d040      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	029b      	lsls	r3, r3, #10
 8002bde:	4013      	ands	r3, r2
 8002be0:	d114      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e06e      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	4b38      	ldr	r3, [pc, #224]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	049b      	lsls	r3, r3, #18
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d108      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e062      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfe:	4b34      	ldr	r3, [pc, #208]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2202      	movs	r2, #2
 8002c04:	4013      	ands	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e05b      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0c:	4b30      	ldr	r3, [pc, #192]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2203      	movs	r2, #3
 8002c12:	4393      	bics	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c20:	f7ff f9a6 	bl	8001f70 <HAL_GetTick>
 8002c24:	0003      	movs	r3, r0
 8002c26:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c28:	e009      	b.n	8002c3e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2a:	f7ff f9a1 	bl	8001f70 <HAL_GetTick>
 8002c2e:	0002      	movs	r2, r0
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	4a27      	ldr	r2, [pc, #156]	@ (8002cd4 <HAL_RCC_ClockConfig+0x18c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e042      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	4b24      	ldr	r3, [pc, #144]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	220c      	movs	r2, #12
 8002c44:	401a      	ands	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1ec      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c50:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <HAL_RCC_ClockConfig+0x184>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2201      	movs	r2, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d211      	bcs.n	8002c82 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <HAL_RCC_ClockConfig+0x184>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4393      	bics	r3, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <HAL_RCC_ClockConfig+0x184>)
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c70:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <HAL_RCC_ClockConfig+0x184>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2201      	movs	r2, #1
 8002c76:	4013      	ands	r3, r2
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e020      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2204      	movs	r2, #4
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d009      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b10      	ldr	r3, [pc, #64]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4a11      	ldr	r2, [pc, #68]	@ (8002cd8 <HAL_RCC_ClockConfig+0x190>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	0019      	movs	r1, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ca0:	f000 f820 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002ca4:	0001      	movs	r1, r0
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <HAL_RCC_ClockConfig+0x188>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	220f      	movs	r2, #15
 8002cae:	4013      	ands	r3, r2
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <HAL_RCC_ClockConfig+0x194>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	000a      	movs	r2, r1
 8002cb6:	40da      	lsrs	r2, r3
 8002cb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <HAL_RCC_ClockConfig+0x198>)
 8002cba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002cbc:	2003      	movs	r0, #3
 8002cbe:	f7ff f911 	bl	8001ee4 <HAL_InitTick>
  
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b004      	add	sp, #16
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40022000 	.word	0x40022000
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	00001388 	.word	0x00001388
 8002cd8:	fffff8ff 	.word	0xfffff8ff
 8002cdc:	08005048 	.word	0x08005048
 8002ce0:	20000018 	.word	0x20000018

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002cfe:	4b20      	ldr	r3, [pc, #128]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	220c      	movs	r2, #12
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d002      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x30>
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x36>
 8002d12:	e02c      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d16:	613b      	str	r3, [r7, #16]
      break;
 8002d18:	e02c      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	0c9b      	lsrs	r3, r3, #18
 8002d1e:	220f      	movs	r2, #15
 8002d20:	4013      	ands	r3, r2
 8002d22:	4a19      	ldr	r2, [pc, #100]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d24:	5cd3      	ldrb	r3, [r2, r3]
 8002d26:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d28:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	4013      	ands	r3, r2
 8002d30:	4a16      	ldr	r2, [pc, #88]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	025b      	lsls	r3, r3, #9
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	4810      	ldr	r0, [pc, #64]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d44:	f7fd f9ea 	bl	800011c <__udivsi3>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4353      	muls	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e009      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	000a      	movs	r2, r1
 8002d58:	0152      	lsls	r2, r2, #5
 8002d5a:	1a52      	subs	r2, r2, r1
 8002d5c:	0193      	lsls	r3, r2, #6
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	185b      	adds	r3, r3, r1
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	613b      	str	r3, [r7, #16]
      break;
 8002d6c:	e002      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d6e:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d70:	613b      	str	r3, [r7, #16]
      break;
 8002d72:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d74:	693b      	ldr	r3, [r7, #16]
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b006      	add	sp, #24
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			@ (mov r8, r8)
 8002d80:	40021000 	.word	0x40021000
 8002d84:	007a1200 	.word	0x007a1200
 8002d88:	08005060 	.word	0x08005060
 8002d8c:	08005070 	.word	0x08005070

08002d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b02      	ldr	r3, [pc, #8]	@ (8002da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			@ (mov r8, r8)
 8002da0:	20000018 	.word	0x20000018

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002da8:	f7ff fff2 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002dac:	0001      	movs	r1, r0
 8002dae:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	2207      	movs	r2, #7
 8002db6:	4013      	ands	r3, r2
 8002db8:	4a04      	ldr	r2, [pc, #16]	@ (8002dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	40d9      	lsrs	r1, r3
 8002dbe:	000b      	movs	r3, r1
}    
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	08005058 	.word	0x08005058

08002dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e042      	b.n	8002e68 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	223d      	movs	r2, #61	@ 0x3d
 8002de6:	5c9b      	ldrb	r3, [r3, r2]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d107      	bne.n	8002dfe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	223c      	movs	r2, #60	@ 0x3c
 8002df2:	2100      	movs	r1, #0
 8002df4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7fe ff53 	bl	8001ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	223d      	movs	r2, #61	@ 0x3d
 8002e02:	2102      	movs	r1, #2
 8002e04:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	0019      	movs	r1, r3
 8002e10:	0010      	movs	r0, r2
 8002e12:	f000 fac5 	bl	80033a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2246      	movs	r2, #70	@ 0x46
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	223e      	movs	r2, #62	@ 0x3e
 8002e22:	2101      	movs	r1, #1
 8002e24:	5499      	strb	r1, [r3, r2]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	223f      	movs	r2, #63	@ 0x3f
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5499      	strb	r1, [r3, r2]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2240      	movs	r2, #64	@ 0x40
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2241      	movs	r2, #65	@ 0x41
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2242      	movs	r2, #66	@ 0x42
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2243      	movs	r2, #67	@ 0x43
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	5499      	strb	r1, [r3, r2]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2244      	movs	r2, #68	@ 0x44
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2245      	movs	r2, #69	@ 0x45
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	223d      	movs	r2, #61	@ 0x3d
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	223d      	movs	r2, #61	@ 0x3d
 8002e7c:	5c9b      	ldrb	r3, [r3, r2]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d001      	beq.n	8002e88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e02d      	b.n	8002ee4 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	223d      	movs	r2, #61	@ 0x3d
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a15      	ldr	r2, [pc, #84]	@ (8002eec <HAL_TIM_Base_Start+0x7c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_TIM_Base_Start+0x3e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a14      	ldr	r2, [pc, #80]	@ (8002ef0 <HAL_TIM_Base_Start+0x80>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_TIM_Base_Start+0x3e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <HAL_TIM_Base_Start+0x84>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d111      	bne.n	8002ed2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d010      	beq.n	8002ee2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2101      	movs	r1, #1
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	e007      	b.n	8002ee2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2101      	movs	r1, #1
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40014000 	.word	0x40014000

08002ef8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a0d      	ldr	r2, [pc, #52]	@ (8002f3c <HAL_TIM_Base_Stop+0x44>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d10d      	bne.n	8002f28 <HAL_TIM_Base_Stop+0x30>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a0b      	ldr	r2, [pc, #44]	@ (8002f40 <HAL_TIM_Base_Stop+0x48>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	d107      	bne.n	8002f28 <HAL_TIM_Base_Stop+0x30>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2101      	movs	r1, #1
 8002f24:	438a      	bics	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	223d      	movs	r2, #61	@ 0x3d
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b002      	add	sp, #8
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			@ (mov r8, r8)
 8002f3c:	00001111 	.word	0x00001111
 8002f40:	00000444 	.word	0x00000444

08002f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	223d      	movs	r2, #61	@ 0x3d
 8002f50:	5c9b      	ldrb	r3, [r3, r2]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d001      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e035      	b.n	8002fc8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	223d      	movs	r2, #61	@ 0x3d
 8002f60:	2102      	movs	r1, #2
 8002f62:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2101      	movs	r1, #1
 8002f70:	430a      	orrs	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a15      	ldr	r2, [pc, #84]	@ (8002fd0 <HAL_TIM_Base_Start_IT+0x8c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIM_Base_Start_IT+0x4e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a14      	ldr	r2, [pc, #80]	@ (8002fd4 <HAL_TIM_Base_Start_IT+0x90>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIM_Base_Start_IT+0x4e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a12      	ldr	r2, [pc, #72]	@ (8002fd8 <HAL_TIM_Base_Start_IT+0x94>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d111      	bne.n	8002fb6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2207      	movs	r2, #7
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b06      	cmp	r3, #6
 8002fa2:	d010      	beq.n	8002fc6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2101      	movs	r1, #1
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb4:	e007      	b.n	8002fc6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b004      	add	sp, #16
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40014000 	.word	0x40014000

08002fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d021      	beq.n	8003040 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2202      	movs	r2, #2
 8003000:	4013      	ands	r3, r2
 8003002:	d01d      	beq.n	8003040 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2203      	movs	r2, #3
 800300a:	4252      	negs	r2, r2
 800300c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2203      	movs	r2, #3
 800301c:	4013      	ands	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f9a4 	bl	8003370 <HAL_TIM_IC_CaptureCallback>
 8003028:	e007      	b.n	800303a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f000 f997 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0018      	movs	r0, r3
 8003036:	f000 f9a3 	bl	8003380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2204      	movs	r2, #4
 8003044:	4013      	ands	r3, r2
 8003046:	d022      	beq.n	800308e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2204      	movs	r2, #4
 800304c:	4013      	ands	r3, r2
 800304e:	d01e      	beq.n	800308e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2205      	movs	r2, #5
 8003056:	4252      	negs	r2, r2
 8003058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	23c0      	movs	r3, #192	@ 0xc0
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4013      	ands	r3, r2
 800306c:	d004      	beq.n	8003078 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	0018      	movs	r0, r3
 8003072:	f000 f97d 	bl	8003370 <HAL_TIM_IC_CaptureCallback>
 8003076:	e007      	b.n	8003088 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	0018      	movs	r0, r3
 800307c:	f000 f970 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0018      	movs	r0, r3
 8003084:	f000 f97c 	bl	8003380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2208      	movs	r2, #8
 8003092:	4013      	ands	r3, r2
 8003094:	d021      	beq.n	80030da <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2208      	movs	r2, #8
 800309a:	4013      	ands	r3, r2
 800309c:	d01d      	beq.n	80030da <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2209      	movs	r2, #9
 80030a4:	4252      	negs	r2, r2
 80030a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2204      	movs	r2, #4
 80030ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2203      	movs	r2, #3
 80030b6:	4013      	ands	r3, r2
 80030b8:	d004      	beq.n	80030c4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 f957 	bl	8003370 <HAL_TIM_IC_CaptureCallback>
 80030c2:	e007      	b.n	80030d4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 f94a 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 f956 	bl	8003380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2210      	movs	r2, #16
 80030de:	4013      	ands	r3, r2
 80030e0:	d022      	beq.n	8003128 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2210      	movs	r2, #16
 80030e6:	4013      	ands	r3, r2
 80030e8:	d01e      	beq.n	8003128 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2211      	movs	r2, #17
 80030f0:	4252      	negs	r2, r2
 80030f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2208      	movs	r2, #8
 80030f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	23c0      	movs	r3, #192	@ 0xc0
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4013      	ands	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 f930 	bl	8003370 <HAL_TIM_IC_CaptureCallback>
 8003110:	e007      	b.n	8003122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	0018      	movs	r0, r3
 8003116:	f000 f923 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	0018      	movs	r0, r3
 800311e:	f000 f92f 	bl	8003380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2201      	movs	r2, #1
 800312c:	4013      	ands	r3, r2
 800312e:	d00c      	beq.n	800314a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	4013      	ands	r3, r2
 8003136:	d008      	beq.n	800314a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2202      	movs	r2, #2
 800313e:	4252      	negs	r2, r2
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	0018      	movs	r0, r3
 8003146:	f7fd fdc5 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2280      	movs	r2, #128	@ 0x80
 800314e:	4013      	ands	r3, r2
 8003150:	d00c      	beq.n	800316c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2280      	movs	r2, #128	@ 0x80
 8003156:	4013      	ands	r3, r2
 8003158:	d008      	beq.n	800316c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2281      	movs	r2, #129	@ 0x81
 8003160:	4252      	negs	r2, r2
 8003162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	0018      	movs	r0, r3
 8003168:	f000 fa98 	bl	800369c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2240      	movs	r2, #64	@ 0x40
 8003170:	4013      	ands	r3, r2
 8003172:	d00c      	beq.n	800318e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	4013      	ands	r3, r2
 800317a:	d008      	beq.n	800318e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2241      	movs	r2, #65	@ 0x41
 8003182:	4252      	negs	r2, r2
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 f901 	bl	8003390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2220      	movs	r2, #32
 8003192:	4013      	ands	r3, r2
 8003194:	d00c      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	4013      	ands	r3, r2
 800319c:	d008      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2221      	movs	r2, #33	@ 0x21
 80031a4:	4252      	negs	r2, r2
 80031a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 fa6e 	bl	800368c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031b0:	46c0      	nop			@ (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b004      	add	sp, #16
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031c2:	230f      	movs	r3, #15
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	223c      	movs	r2, #60	@ 0x3c
 80031ce:	5c9b      	ldrb	r3, [r3, r2]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_TIM_ConfigClockSource+0x20>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e0bc      	b.n	8003352 <HAL_TIM_ConfigClockSource+0x19a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	223c      	movs	r2, #60	@ 0x3c
 80031dc:	2101      	movs	r1, #1
 80031de:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	223d      	movs	r2, #61	@ 0x3d
 80031e4:	2102      	movs	r1, #2
 80031e6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2277      	movs	r2, #119	@ 0x77
 80031f4:	4393      	bics	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4a58      	ldr	r2, [pc, #352]	@ (800335c <HAL_TIM_ConfigClockSource+0x1a4>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2280      	movs	r2, #128	@ 0x80
 800320e:	0192      	lsls	r2, r2, #6
 8003210:	4293      	cmp	r3, r2
 8003212:	d040      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0xde>
 8003214:	2280      	movs	r2, #128	@ 0x80
 8003216:	0192      	lsls	r2, r2, #6
 8003218:	4293      	cmp	r3, r2
 800321a:	d900      	bls.n	800321e <HAL_TIM_ConfigClockSource+0x66>
 800321c:	e088      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
 800321e:	2280      	movs	r2, #128	@ 0x80
 8003220:	0152      	lsls	r2, r2, #5
 8003222:	4293      	cmp	r3, r2
 8003224:	d100      	bne.n	8003228 <HAL_TIM_ConfigClockSource+0x70>
 8003226:	e088      	b.n	800333a <HAL_TIM_ConfigClockSource+0x182>
 8003228:	2280      	movs	r2, #128	@ 0x80
 800322a:	0152      	lsls	r2, r2, #5
 800322c:	4293      	cmp	r3, r2
 800322e:	d900      	bls.n	8003232 <HAL_TIM_ConfigClockSource+0x7a>
 8003230:	e07e      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
 8003232:	2b70      	cmp	r3, #112	@ 0x70
 8003234:	d018      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0xb0>
 8003236:	d900      	bls.n	800323a <HAL_TIM_ConfigClockSource+0x82>
 8003238:	e07a      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
 800323a:	2b60      	cmp	r3, #96	@ 0x60
 800323c:	d04f      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x126>
 800323e:	d900      	bls.n	8003242 <HAL_TIM_ConfigClockSource+0x8a>
 8003240:	e076      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
 8003242:	2b50      	cmp	r3, #80	@ 0x50
 8003244:	d03b      	beq.n	80032be <HAL_TIM_ConfigClockSource+0x106>
 8003246:	d900      	bls.n	800324a <HAL_TIM_ConfigClockSource+0x92>
 8003248:	e072      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
 800324a:	2b40      	cmp	r3, #64	@ 0x40
 800324c:	d057      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x146>
 800324e:	d900      	bls.n	8003252 <HAL_TIM_ConfigClockSource+0x9a>
 8003250:	e06e      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
 8003252:	2b30      	cmp	r3, #48	@ 0x30
 8003254:	d063      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x166>
 8003256:	d86b      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
 8003258:	2b20      	cmp	r3, #32
 800325a:	d060      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x166>
 800325c:	d868      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d05d      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x166>
 8003262:	2b10      	cmp	r3, #16
 8003264:	d05b      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x166>
 8003266:	e063      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003278:	f000 f990 	bl	800359c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2277      	movs	r2, #119	@ 0x77
 8003288:	4313      	orrs	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	609a      	str	r2, [r3, #8]
      break;
 8003294:	e052      	b.n	800333c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032a6:	f000 f979 	bl	800359c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2180      	movs	r1, #128	@ 0x80
 80032b6:	01c9      	lsls	r1, r1, #7
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
      break;
 80032bc:	e03e      	b.n	800333c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ca:	001a      	movs	r2, r3
 80032cc:	f000 f8ec 	bl	80034a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2150      	movs	r1, #80	@ 0x50
 80032d6:	0018      	movs	r0, r3
 80032d8:	f000 f946 	bl	8003568 <TIM_ITRx_SetConfig>
      break;
 80032dc:	e02e      	b.n	800333c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ea:	001a      	movs	r2, r3
 80032ec:	f000 f90a 	bl	8003504 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2160      	movs	r1, #96	@ 0x60
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 f936 	bl	8003568 <TIM_ITRx_SetConfig>
      break;
 80032fc:	e01e      	b.n	800333c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800330a:	001a      	movs	r2, r3
 800330c:	f000 f8cc 	bl	80034a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2140      	movs	r1, #64	@ 0x40
 8003316:	0018      	movs	r0, r3
 8003318:	f000 f926 	bl	8003568 <TIM_ITRx_SetConfig>
      break;
 800331c:	e00e      	b.n	800333c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0019      	movs	r1, r3
 8003328:	0010      	movs	r0, r2
 800332a:	f000 f91d 	bl	8003568 <TIM_ITRx_SetConfig>
      break;
 800332e:	e005      	b.n	800333c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003330:	230f      	movs	r3, #15
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
      break;
 8003338:	e000      	b.n	800333c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800333a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	223d      	movs	r2, #61	@ 0x3d
 8003340:	2101      	movs	r1, #1
 8003342:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	223c      	movs	r2, #60	@ 0x3c
 8003348:	2100      	movs	r1, #0
 800334a:	5499      	strb	r1, [r3, r2]

  return status;
 800334c:	230f      	movs	r3, #15
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	781b      	ldrb	r3, [r3, #0]
}
 8003352:	0018      	movs	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	b004      	add	sp, #16
 8003358:	bd80      	pop	{r7, pc}
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	ffff00ff 	.word	0xffff00ff

08003360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003368:	46c0      	nop			@ (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	b002      	add	sp, #8
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003378:	46c0      	nop			@ (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b002      	add	sp, #8
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003388:	46c0      	nop			@ (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	b002      	add	sp, #8
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003398:	46c0      	nop			@ (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}

080033a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a36      	ldr	r2, [pc, #216]	@ (800348c <TIM_Base_SetConfig+0xec>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <TIM_Base_SetConfig+0x20>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a35      	ldr	r2, [pc, #212]	@ (8003490 <TIM_Base_SetConfig+0xf0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d108      	bne.n	80033d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2270      	movs	r2, #112	@ 0x70
 80033c4:	4393      	bics	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2d      	ldr	r2, [pc, #180]	@ (800348c <TIM_Base_SetConfig+0xec>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <TIM_Base_SetConfig+0x62>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003490 <TIM_Base_SetConfig+0xf0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00f      	beq.n	8003402 <TIM_Base_SetConfig+0x62>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003494 <TIM_Base_SetConfig+0xf4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00b      	beq.n	8003402 <TIM_Base_SetConfig+0x62>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003498 <TIM_Base_SetConfig+0xf8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <TIM_Base_SetConfig+0x62>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a29      	ldr	r2, [pc, #164]	@ (800349c <TIM_Base_SetConfig+0xfc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_Base_SetConfig+0x62>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a28      	ldr	r2, [pc, #160]	@ (80034a0 <TIM_Base_SetConfig+0x100>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d108      	bne.n	8003414 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4a27      	ldr	r2, [pc, #156]	@ (80034a4 <TIM_Base_SetConfig+0x104>)
 8003406:	4013      	ands	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2280      	movs	r2, #128	@ 0x80
 8003418:	4393      	bics	r3, r2
 800341a:	001a      	movs	r2, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a13      	ldr	r2, [pc, #76]	@ (800348c <TIM_Base_SetConfig+0xec>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00b      	beq.n	800345a <TIM_Base_SetConfig+0xba>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a14      	ldr	r2, [pc, #80]	@ (8003498 <TIM_Base_SetConfig+0xf8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <TIM_Base_SetConfig+0xba>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a13      	ldr	r2, [pc, #76]	@ (800349c <TIM_Base_SetConfig+0xfc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d003      	beq.n	800345a <TIM_Base_SetConfig+0xba>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a12      	ldr	r2, [pc, #72]	@ (80034a0 <TIM_Base_SetConfig+0x100>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d103      	bne.n	8003462 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2201      	movs	r2, #1
 800346e:	4013      	ands	r3, r2
 8003470:	2b01      	cmp	r3, #1
 8003472:	d106      	bne.n	8003482 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2201      	movs	r2, #1
 800347a:	4393      	bics	r3, r2
 800347c:	001a      	movs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]
  }
}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	46bd      	mov	sp, r7
 8003486:	b004      	add	sp, #16
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40000400 	.word	0x40000400
 8003494:	40002000 	.word	0x40002000
 8003498:	40014000 	.word	0x40014000
 800349c:	40014400 	.word	0x40014400
 80034a0:	40014800 	.word	0x40014800
 80034a4:	fffffcff 	.word	0xfffffcff

080034a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	2201      	movs	r2, #1
 80034c0:	4393      	bics	r3, r2
 80034c2:	001a      	movs	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	22f0      	movs	r2, #240	@ 0xf0
 80034d2:	4393      	bics	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	220a      	movs	r2, #10
 80034e4:	4393      	bics	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	621a      	str	r2, [r3, #32]
}
 80034fc:	46c0      	nop			@ (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	b006      	add	sp, #24
 8003502:	bd80      	pop	{r7, pc}

08003504 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	2210      	movs	r2, #16
 800351c:	4393      	bics	r3, r2
 800351e:	001a      	movs	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4a0d      	ldr	r2, [pc, #52]	@ (8003564 <TIM_TI2_ConfigInputStage+0x60>)
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	031b      	lsls	r3, r3, #12
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	22a0      	movs	r2, #160	@ 0xa0
 8003540:	4393      	bics	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b006      	add	sp, #24
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	ffff0fff 	.word	0xffff0fff

08003568 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2270      	movs	r2, #112	@ 0x70
 800357c:	4393      	bics	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	2207      	movs	r2, #7
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	609a      	str	r2, [r3, #8]
}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	46bd      	mov	sp, r7
 8003596:	b004      	add	sp, #16
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4a09      	ldr	r2, [pc, #36]	@ (80035d8 <TIM_ETR_SetConfig+0x3c>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	021a      	lsls	r2, r3, #8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	431a      	orrs	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	46c0      	nop			@ (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b006      	add	sp, #24
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	ffff00ff 	.word	0xffff00ff

080035dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	223c      	movs	r2, #60	@ 0x3c
 80035ea:	5c9b      	ldrb	r3, [r3, r2]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e041      	b.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	223c      	movs	r2, #60	@ 0x3c
 80035f8:	2101      	movs	r1, #1
 80035fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	223d      	movs	r2, #61	@ 0x3d
 8003600:	2102      	movs	r1, #2
 8003602:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2270      	movs	r2, #112	@ 0x70
 8003618:	4393      	bics	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a13      	ldr	r2, [pc, #76]	@ (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a11      	ldr	r2, [pc, #68]	@ (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a10      	ldr	r2, [pc, #64]	@ (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d10c      	bne.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2280      	movs	r2, #128	@ 0x80
 8003650:	4393      	bics	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	4313      	orrs	r3, r2
 800365c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	223d      	movs	r2, #61	@ 0x3d
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	223c      	movs	r2, #60	@ 0x3c
 8003672:	2100      	movs	r1, #0
 8003674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b004      	add	sp, #16
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40000400 	.word	0x40000400
 8003688:	40014000 	.word	0x40014000

0800368c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003694:	46c0      	nop			@ (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b002      	add	sp, #8
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e044      	b.n	8003748 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d107      	bne.n	80036d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2278      	movs	r2, #120	@ 0x78
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f7fe fb7d 	bl	8001dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2224      	movs	r2, #36	@ 0x24
 80036da:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2101      	movs	r1, #1
 80036e8:	438a      	bics	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	0018      	movs	r0, r3
 80036f8:	f000 fa0c 	bl	8003b14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	0018      	movs	r0, r3
 8003700:	f000 f8c8 	bl	8003894 <UART_SetConfig>
 8003704:	0003      	movs	r3, r0
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e01c      	b.n	8003748 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	490d      	ldr	r1, [pc, #52]	@ (8003750 <HAL_UART_Init+0xa4>)
 800371a:	400a      	ands	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2108      	movs	r1, #8
 800372a:	438a      	bics	r2, r1
 800372c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2101      	movs	r1, #1
 800373a:	430a      	orrs	r2, r1
 800373c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	0018      	movs	r0, r3
 8003742:	f000 fa9b 	bl	8003c7c <UART_CheckIdleState>
 8003746:	0003      	movs	r3, r0
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}
 8003750:	fffff7ff 	.word	0xfffff7ff

08003754 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	@ 0x28
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	1dbb      	adds	r3, r7, #6
 8003762:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003768:	2b20      	cmp	r3, #32
 800376a:	d000      	beq.n	800376e <HAL_UART_Transmit+0x1a>
 800376c:	e08c      	b.n	8003888 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_UART_Transmit+0x28>
 8003774:	1dbb      	adds	r3, r7, #6
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e084      	b.n	800388a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	2380      	movs	r3, #128	@ 0x80
 8003786:	015b      	lsls	r3, r3, #5
 8003788:	429a      	cmp	r2, r3
 800378a:	d109      	bne.n	80037a0 <HAL_UART_Transmit+0x4c>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2201      	movs	r2, #1
 8003798:	4013      	ands	r3, r2
 800379a:	d001      	beq.n	80037a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e074      	b.n	800388a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2284      	movs	r2, #132	@ 0x84
 80037a4:	2100      	movs	r1, #0
 80037a6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2221      	movs	r2, #33	@ 0x21
 80037ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ae:	f7fe fbdf 	bl	8001f70 <HAL_GetTick>
 80037b2:	0003      	movs	r3, r0
 80037b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1dba      	adds	r2, r7, #6
 80037ba:	2150      	movs	r1, #80	@ 0x50
 80037bc:	8812      	ldrh	r2, [r2, #0]
 80037be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1dba      	adds	r2, r7, #6
 80037c4:	2152      	movs	r1, #82	@ 0x52
 80037c6:	8812      	ldrh	r2, [r2, #0]
 80037c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	2380      	movs	r3, #128	@ 0x80
 80037d0:	015b      	lsls	r3, r3, #5
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d108      	bne.n	80037e8 <HAL_UART_Transmit+0x94>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d104      	bne.n	80037e8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	e003      	b.n	80037f0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037f0:	e02f      	b.n	8003852 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	0013      	movs	r3, r2
 80037fc:	2200      	movs	r2, #0
 80037fe:	2180      	movs	r1, #128	@ 0x80
 8003800:	f000 fae4 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 8003804:	1e03      	subs	r3, r0, #0
 8003806:	d004      	beq.n	8003812 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e03b      	b.n	800388a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	881a      	ldrh	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	05d2      	lsls	r2, r2, #23
 8003822:	0dd2      	lsrs	r2, r2, #23
 8003824:	b292      	uxth	r2, r2
 8003826:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	3302      	adds	r3, #2
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	e007      	b.n	8003840 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3301      	adds	r3, #1
 800383e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2252      	movs	r2, #82	@ 0x52
 8003844:	5a9b      	ldrh	r3, [r3, r2]
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b299      	uxth	r1, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2252      	movs	r2, #82	@ 0x52
 8003850:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2252      	movs	r2, #82	@ 0x52
 8003856:	5a9b      	ldrh	r3, [r3, r2]
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1c9      	bne.n	80037f2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	0013      	movs	r3, r2
 8003868:	2200      	movs	r2, #0
 800386a:	2140      	movs	r1, #64	@ 0x40
 800386c:	f000 faae 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 8003870:	1e03      	subs	r3, r0, #0
 8003872:	d004      	beq.n	800387e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e005      	b.n	800388a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e000      	b.n	800388a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	b008      	add	sp, #32
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800389c:	231e      	movs	r3, #30
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a8d      	ldr	r2, [pc, #564]	@ (8003af8 <UART_SetConfig+0x264>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	0019      	movs	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a88      	ldr	r2, [pc, #544]	@ (8003afc <UART_SetConfig+0x268>)
 80038da:	4013      	ands	r3, r2
 80038dc:	0019      	movs	r1, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a7f      	ldr	r2, [pc, #508]	@ (8003b00 <UART_SetConfig+0x26c>)
 8003902:	4013      	ands	r3, r2
 8003904:	0019      	movs	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	430a      	orrs	r2, r1
 800390e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a7b      	ldr	r2, [pc, #492]	@ (8003b04 <UART_SetConfig+0x270>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d127      	bne.n	800396a <UART_SetConfig+0xd6>
 800391a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b08 <UART_SetConfig+0x274>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	2203      	movs	r2, #3
 8003920:	4013      	ands	r3, r2
 8003922:	2b03      	cmp	r3, #3
 8003924:	d00d      	beq.n	8003942 <UART_SetConfig+0xae>
 8003926:	d81b      	bhi.n	8003960 <UART_SetConfig+0xcc>
 8003928:	2b02      	cmp	r3, #2
 800392a:	d014      	beq.n	8003956 <UART_SetConfig+0xc2>
 800392c:	d818      	bhi.n	8003960 <UART_SetConfig+0xcc>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <UART_SetConfig+0xa4>
 8003932:	2b01      	cmp	r3, #1
 8003934:	d00a      	beq.n	800394c <UART_SetConfig+0xb8>
 8003936:	e013      	b.n	8003960 <UART_SetConfig+0xcc>
 8003938:	231f      	movs	r3, #31
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e021      	b.n	8003986 <UART_SetConfig+0xf2>
 8003942:	231f      	movs	r3, #31
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	2202      	movs	r2, #2
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	e01c      	b.n	8003986 <UART_SetConfig+0xf2>
 800394c:	231f      	movs	r3, #31
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	2204      	movs	r2, #4
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e017      	b.n	8003986 <UART_SetConfig+0xf2>
 8003956:	231f      	movs	r3, #31
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2208      	movs	r2, #8
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	e012      	b.n	8003986 <UART_SetConfig+0xf2>
 8003960:	231f      	movs	r3, #31
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	2210      	movs	r2, #16
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e00d      	b.n	8003986 <UART_SetConfig+0xf2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a67      	ldr	r2, [pc, #412]	@ (8003b0c <UART_SetConfig+0x278>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d104      	bne.n	800397e <UART_SetConfig+0xea>
 8003974:	231f      	movs	r3, #31
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	e003      	b.n	8003986 <UART_SetConfig+0xf2>
 800397e:	231f      	movs	r3, #31
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	2210      	movs	r2, #16
 8003984:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	429a      	cmp	r2, r3
 8003990:	d15c      	bne.n	8003a4c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003992:	231f      	movs	r3, #31
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d015      	beq.n	80039c8 <UART_SetConfig+0x134>
 800399c:	dc18      	bgt.n	80039d0 <UART_SetConfig+0x13c>
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d00d      	beq.n	80039be <UART_SetConfig+0x12a>
 80039a2:	dc15      	bgt.n	80039d0 <UART_SetConfig+0x13c>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <UART_SetConfig+0x11a>
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d005      	beq.n	80039b8 <UART_SetConfig+0x124>
 80039ac:	e010      	b.n	80039d0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ae:	f7ff f9f9 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 80039b2:	0003      	movs	r3, r0
 80039b4:	61bb      	str	r3, [r7, #24]
        break;
 80039b6:	e012      	b.n	80039de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b8:	4b55      	ldr	r3, [pc, #340]	@ (8003b10 <UART_SetConfig+0x27c>)
 80039ba:	61bb      	str	r3, [r7, #24]
        break;
 80039bc:	e00f      	b.n	80039de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039be:	f7ff f991 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 80039c2:	0003      	movs	r3, r0
 80039c4:	61bb      	str	r3, [r7, #24]
        break;
 80039c6:	e00a      	b.n	80039de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039c8:	2380      	movs	r3, #128	@ 0x80
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	61bb      	str	r3, [r7, #24]
        break;
 80039ce:	e006      	b.n	80039de <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039d4:	231e      	movs	r3, #30
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
        break;
 80039dc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d100      	bne.n	80039e6 <UART_SetConfig+0x152>
 80039e4:	e07a      	b.n	8003adc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	005a      	lsls	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	18d2      	adds	r2, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	0019      	movs	r1, r3
 80039f8:	0010      	movs	r0, r2
 80039fa:	f7fc fb8f 	bl	800011c <__udivsi3>
 80039fe:	0003      	movs	r3, r0
 8003a00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b0f      	cmp	r3, #15
 8003a06:	d91c      	bls.n	8003a42 <UART_SetConfig+0x1ae>
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	2380      	movs	r3, #128	@ 0x80
 8003a0c:	025b      	lsls	r3, r3, #9
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d217      	bcs.n	8003a42 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	200e      	movs	r0, #14
 8003a18:	183b      	adds	r3, r7, r0
 8003a1a:	210f      	movs	r1, #15
 8003a1c:	438a      	bics	r2, r1
 8003a1e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2207      	movs	r2, #7
 8003a28:	4013      	ands	r3, r2
 8003a2a:	b299      	uxth	r1, r3
 8003a2c:	183b      	adds	r3, r7, r0
 8003a2e:	183a      	adds	r2, r7, r0
 8003a30:	8812      	ldrh	r2, [r2, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	183a      	adds	r2, r7, r0
 8003a3c:	8812      	ldrh	r2, [r2, #0]
 8003a3e:	60da      	str	r2, [r3, #12]
 8003a40:	e04c      	b.n	8003adc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003a42:	231e      	movs	r3, #30
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e047      	b.n	8003adc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a4c:	231f      	movs	r3, #31
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d015      	beq.n	8003a82 <UART_SetConfig+0x1ee>
 8003a56:	dc18      	bgt.n	8003a8a <UART_SetConfig+0x1f6>
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d00d      	beq.n	8003a78 <UART_SetConfig+0x1e4>
 8003a5c:	dc15      	bgt.n	8003a8a <UART_SetConfig+0x1f6>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <UART_SetConfig+0x1d4>
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d005      	beq.n	8003a72 <UART_SetConfig+0x1de>
 8003a66:	e010      	b.n	8003a8a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a68:	f7ff f99c 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	61bb      	str	r3, [r7, #24]
        break;
 8003a70:	e012      	b.n	8003a98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a72:	4b27      	ldr	r3, [pc, #156]	@ (8003b10 <UART_SetConfig+0x27c>)
 8003a74:	61bb      	str	r3, [r7, #24]
        break;
 8003a76:	e00f      	b.n	8003a98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a78:	f7ff f934 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	61bb      	str	r3, [r7, #24]
        break;
 8003a80:	e00a      	b.n	8003a98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	61bb      	str	r3, [r7, #24]
        break;
 8003a88:	e006      	b.n	8003a98 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a8e:	231e      	movs	r3, #30
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
        break;
 8003a96:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01e      	beq.n	8003adc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	085a      	lsrs	r2, r3, #1
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	18d2      	adds	r2, r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	0019      	movs	r1, r3
 8003aae:	0010      	movs	r0, r2
 8003ab0:	f7fc fb34 	bl	800011c <__udivsi3>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	d90a      	bls.n	8003ad4 <UART_SetConfig+0x240>
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	025b      	lsls	r3, r3, #9
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d205      	bcs.n	8003ad4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	e003      	b.n	8003adc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad4:	231e      	movs	r3, #30
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ae8:	231e      	movs	r3, #30
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	781b      	ldrb	r3, [r3, #0]
}
 8003aee:	0018      	movs	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b008      	add	sp, #32
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	ffff69f3 	.word	0xffff69f3
 8003afc:	ffffcfff 	.word	0xffffcfff
 8003b00:	fffff4ff 	.word	0xfffff4ff
 8003b04:	40013800 	.word	0x40013800
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40004400 	.word	0x40004400
 8003b10:	007a1200 	.word	0x007a1200

08003b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	2208      	movs	r2, #8
 8003b22:	4013      	ands	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c58 <UART_AdvFeatureConfig+0x144>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	2201      	movs	r2, #1
 8003b44:	4013      	ands	r3, r2
 8003b46:	d00b      	beq.n	8003b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4a43      	ldr	r2, [pc, #268]	@ (8003c5c <UART_AdvFeatureConfig+0x148>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	0019      	movs	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	2202      	movs	r2, #2
 8003b66:	4013      	ands	r3, r2
 8003b68:	d00b      	beq.n	8003b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4a3b      	ldr	r2, [pc, #236]	@ (8003c60 <UART_AdvFeatureConfig+0x14c>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	0019      	movs	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	2204      	movs	r2, #4
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4a34      	ldr	r2, [pc, #208]	@ (8003c64 <UART_AdvFeatureConfig+0x150>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	0019      	movs	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	2210      	movs	r2, #16
 8003baa:	4013      	ands	r3, r2
 8003bac:	d00b      	beq.n	8003bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8003c68 <UART_AdvFeatureConfig+0x154>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	2220      	movs	r2, #32
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d00b      	beq.n	8003be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	4a25      	ldr	r2, [pc, #148]	@ (8003c6c <UART_AdvFeatureConfig+0x158>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	0019      	movs	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	2240      	movs	r2, #64	@ 0x40
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d01d      	beq.n	8003c2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c70 <UART_AdvFeatureConfig+0x15c>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c0e:	2380      	movs	r3, #128	@ 0x80
 8003c10:	035b      	lsls	r3, r3, #13
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d10b      	bne.n	8003c2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a15      	ldr	r2, [pc, #84]	@ (8003c74 <UART_AdvFeatureConfig+0x160>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	0019      	movs	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	2280      	movs	r2, #128	@ 0x80
 8003c34:	4013      	ands	r3, r2
 8003c36:	d00b      	beq.n	8003c50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c78 <UART_AdvFeatureConfig+0x164>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	0019      	movs	r1, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
  }
}
 8003c50:	46c0      	nop			@ (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b002      	add	sp, #8
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	ffff7fff 	.word	0xffff7fff
 8003c5c:	fffdffff 	.word	0xfffdffff
 8003c60:	fffeffff 	.word	0xfffeffff
 8003c64:	fffbffff 	.word	0xfffbffff
 8003c68:	ffffefff 	.word	0xffffefff
 8003c6c:	ffffdfff 	.word	0xffffdfff
 8003c70:	ffefffff 	.word	0xffefffff
 8003c74:	ff9fffff 	.word	0xff9fffff
 8003c78:	fff7ffff 	.word	0xfff7ffff

08003c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b092      	sub	sp, #72	@ 0x48
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2284      	movs	r2, #132	@ 0x84
 8003c88:	2100      	movs	r1, #0
 8003c8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c8c:	f7fe f970 	bl	8001f70 <HAL_GetTick>
 8003c90:	0003      	movs	r3, r0
 8003c92:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d12c      	bne.n	8003cfc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca4:	2280      	movs	r2, #128	@ 0x80
 8003ca6:	0391      	lsls	r1, r2, #14
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4a46      	ldr	r2, [pc, #280]	@ (8003dc4 <UART_CheckIdleState+0x148>)
 8003cac:	9200      	str	r2, [sp, #0]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f000 f88c 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 8003cb4:	1e03      	subs	r3, r0, #0
 8003cb6:	d021      	beq.n	8003cfc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc8:	f383 8810 	msr	PRIMASK, r3
}
 8003ccc:	46c0      	nop			@ (mov r8, r8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2180      	movs	r1, #128	@ 0x80
 8003cda:	438a      	bics	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce4:	f383 8810 	msr	PRIMASK, r3
}
 8003ce8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2278      	movs	r2, #120	@ 0x78
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e05f      	b.n	8003dbc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2204      	movs	r2, #4
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d146      	bne.n	8003d98 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d0c:	2280      	movs	r2, #128	@ 0x80
 8003d0e:	03d1      	lsls	r1, r2, #15
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc4 <UART_CheckIdleState+0x148>)
 8003d14:	9200      	str	r2, [sp, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f000 f858 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 8003d1c:	1e03      	subs	r3, r0, #0
 8003d1e:	d03b      	beq.n	8003d98 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d20:	f3ef 8310 	mrs	r3, PRIMASK
 8003d24:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d26:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f383 8810 	msr	PRIMASK, r3
}
 8003d34:	46c0      	nop			@ (mov r8, r8)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4921      	ldr	r1, [pc, #132]	@ (8003dc8 <UART_CheckIdleState+0x14c>)
 8003d42:	400a      	ands	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f383 8810 	msr	PRIMASK, r3
}
 8003d50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d52:	f3ef 8310 	mrs	r3, PRIMASK
 8003d56:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d58:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f383 8810 	msr	PRIMASK, r3
}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2101      	movs	r1, #1
 8003d74:	438a      	bics	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	f383 8810 	msr	PRIMASK, r3
}
 8003d82:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2280      	movs	r2, #128	@ 0x80
 8003d88:	2120      	movs	r1, #32
 8003d8a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2278      	movs	r2, #120	@ 0x78
 8003d90:	2100      	movs	r1, #0
 8003d92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e011      	b.n	8003dbc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2280      	movs	r2, #128	@ 0x80
 8003da2:	2120      	movs	r1, #32
 8003da4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2278      	movs	r2, #120	@ 0x78
 8003db6:	2100      	movs	r1, #0
 8003db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b010      	add	sp, #64	@ 0x40
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	01ffffff 	.word	0x01ffffff
 8003dc8:	fffffedf 	.word	0xfffffedf

08003dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	1dfb      	adds	r3, r7, #7
 8003dda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ddc:	e051      	b.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	3301      	adds	r3, #1
 8003de2:	d04e      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7fe f8c4 	bl	8001f70 <HAL_GetTick>
 8003de8:	0002      	movs	r2, r0
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x2e>
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e051      	b.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2204      	movs	r2, #4
 8003e06:	4013      	ands	r3, r2
 8003e08:	d03b      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b80      	cmp	r3, #128	@ 0x80
 8003e0e:	d038      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b40      	cmp	r3, #64	@ 0x40
 8003e14:	d035      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d111      	bne.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 f83c 	bl	8003eac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2284      	movs	r2, #132	@ 0x84
 8003e38:	2108      	movs	r1, #8
 8003e3a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2278      	movs	r2, #120	@ 0x78
 8003e40:	2100      	movs	r1, #0
 8003e42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e02c      	b.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	2380      	movs	r3, #128	@ 0x80
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	401a      	ands	r2, r3
 8003e54:	2380      	movs	r3, #128	@ 0x80
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d112      	bne.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2280      	movs	r2, #128	@ 0x80
 8003e62:	0112      	lsls	r2, r2, #4
 8003e64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f000 f81f 	bl	8003eac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2284      	movs	r2, #132	@ 0x84
 8003e72:	2120      	movs	r1, #32
 8003e74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2278      	movs	r2, #120	@ 0x78
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e00f      	b.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	425a      	negs	r2, r3
 8003e92:	4153      	adcs	r3, r2
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	001a      	movs	r2, r3
 8003e98:	1dfb      	adds	r3, r7, #7
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d09e      	beq.n	8003dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b004      	add	sp, #16
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08e      	sub	sp, #56	@ 0x38
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb8:	617b      	str	r3, [r7, #20]
  return(result);
 8003eba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f383 8810 	msr	PRIMASK, r3
}
 8003ec8:	46c0      	nop			@ (mov r8, r8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4926      	ldr	r1, [pc, #152]	@ (8003f70 <UART_EndRxTransfer+0xc4>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003edc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f383 8810 	msr	PRIMASK, r3
}
 8003ee4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eea:	623b      	str	r3, [r7, #32]
  return(result);
 8003eec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eee:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	f383 8810 	msr	PRIMASK, r3
}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2101      	movs	r1, #1
 8003f08:	438a      	bics	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	f383 8810 	msr	PRIMASK, r3
}
 8003f16:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d118      	bne.n	8003f52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f20:	f3ef 8310 	mrs	r3, PRIMASK
 8003f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f383 8810 	msr	PRIMASK, r3
}
 8003f34:	46c0      	nop			@ (mov r8, r8)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2110      	movs	r1, #16
 8003f42:	438a      	bics	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f383 8810 	msr	PRIMASK, r3
}
 8003f50:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2280      	movs	r2, #128	@ 0x80
 8003f56:	2120      	movs	r1, #32
 8003f58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b00e      	add	sp, #56	@ 0x38
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	fffffedf 	.word	0xfffffedf

08003f74 <srand>:
 8003f74:	4b11      	ldr	r3, [pc, #68]	@ (8003fbc <srand+0x48>)
 8003f76:	b570      	push	{r4, r5, r6, lr}
 8003f78:	681d      	ldr	r5, [r3, #0]
 8003f7a:	0004      	movs	r4, r0
 8003f7c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d116      	bne.n	8003fb0 <srand+0x3c>
 8003f82:	2018      	movs	r0, #24
 8003f84:	f000 fa76 	bl	8004474 <malloc>
 8003f88:	1e02      	subs	r2, r0, #0
 8003f8a:	6328      	str	r0, [r5, #48]	@ 0x30
 8003f8c:	d104      	bne.n	8003f98 <srand+0x24>
 8003f8e:	2146      	movs	r1, #70	@ 0x46
 8003f90:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <srand+0x4c>)
 8003f92:	480c      	ldr	r0, [pc, #48]	@ (8003fc4 <srand+0x50>)
 8003f94:	f000 fa06 	bl	80043a4 <__assert_func>
 8003f98:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc8 <srand+0x54>)
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	6003      	str	r3, [r0, #0]
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fcc <srand+0x58>)
 8003fa0:	6043      	str	r3, [r0, #4]
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <srand+0x5c>)
 8003fa4:	6083      	str	r3, [r0, #8]
 8003fa6:	230b      	movs	r3, #11
 8003fa8:	8183      	strh	r3, [r0, #12]
 8003faa:	2001      	movs	r0, #1
 8003fac:	6110      	str	r0, [r2, #16]
 8003fae:	6151      	str	r1, [r2, #20]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003fb4:	611c      	str	r4, [r3, #16]
 8003fb6:	615a      	str	r2, [r3, #20]
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	20000030 	.word	0x20000030
 8003fc0:	08005080 	.word	0x08005080
 8003fc4:	08005097 	.word	0x08005097
 8003fc8:	abcd330e 	.word	0xabcd330e
 8003fcc:	e66d1234 	.word	0xe66d1234
 8003fd0:	0005deec 	.word	0x0005deec

08003fd4 <rand>:
 8003fd4:	4b16      	ldr	r3, [pc, #88]	@ (8004030 <rand+0x5c>)
 8003fd6:	b510      	push	{r4, lr}
 8003fd8:	681c      	ldr	r4, [r3, #0]
 8003fda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d116      	bne.n	800400e <rand+0x3a>
 8003fe0:	2018      	movs	r0, #24
 8003fe2:	f000 fa47 	bl	8004474 <malloc>
 8003fe6:	1e02      	subs	r2, r0, #0
 8003fe8:	6320      	str	r0, [r4, #48]	@ 0x30
 8003fea:	d104      	bne.n	8003ff6 <rand+0x22>
 8003fec:	2152      	movs	r1, #82	@ 0x52
 8003fee:	4b11      	ldr	r3, [pc, #68]	@ (8004034 <rand+0x60>)
 8003ff0:	4811      	ldr	r0, [pc, #68]	@ (8004038 <rand+0x64>)
 8003ff2:	f000 f9d7 	bl	80043a4 <__assert_func>
 8003ff6:	4b11      	ldr	r3, [pc, #68]	@ (800403c <rand+0x68>)
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	6003      	str	r3, [r0, #0]
 8003ffc:	4b10      	ldr	r3, [pc, #64]	@ (8004040 <rand+0x6c>)
 8003ffe:	6043      	str	r3, [r0, #4]
 8004000:	4b10      	ldr	r3, [pc, #64]	@ (8004044 <rand+0x70>)
 8004002:	6083      	str	r3, [r0, #8]
 8004004:	230b      	movs	r3, #11
 8004006:	8183      	strh	r3, [r0, #12]
 8004008:	2001      	movs	r0, #1
 800400a:	6110      	str	r0, [r2, #16]
 800400c:	6151      	str	r1, [r2, #20]
 800400e:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8004010:	4a0d      	ldr	r2, [pc, #52]	@ (8004048 <rand+0x74>)
 8004012:	6920      	ldr	r0, [r4, #16]
 8004014:	6961      	ldr	r1, [r4, #20]
 8004016:	4b0d      	ldr	r3, [pc, #52]	@ (800404c <rand+0x78>)
 8004018:	f7fc f9f6 	bl	8000408 <__aeabi_lmul>
 800401c:	2201      	movs	r2, #1
 800401e:	2300      	movs	r3, #0
 8004020:	1880      	adds	r0, r0, r2
 8004022:	4159      	adcs	r1, r3
 8004024:	6120      	str	r0, [r4, #16]
 8004026:	6161      	str	r1, [r4, #20]
 8004028:	0048      	lsls	r0, r1, #1
 800402a:	0840      	lsrs	r0, r0, #1
 800402c:	bd10      	pop	{r4, pc}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	20000030 	.word	0x20000030
 8004034:	08005080 	.word	0x08005080
 8004038:	08005097 	.word	0x08005097
 800403c:	abcd330e 	.word	0xabcd330e
 8004040:	e66d1234 	.word	0xe66d1234
 8004044:	0005deec 	.word	0x0005deec
 8004048:	4c957f2d 	.word	0x4c957f2d
 800404c:	5851f42d 	.word	0x5851f42d

08004050 <std>:
 8004050:	2300      	movs	r3, #0
 8004052:	b510      	push	{r4, lr}
 8004054:	0004      	movs	r4, r0
 8004056:	6003      	str	r3, [r0, #0]
 8004058:	6043      	str	r3, [r0, #4]
 800405a:	6083      	str	r3, [r0, #8]
 800405c:	8181      	strh	r1, [r0, #12]
 800405e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004060:	81c2      	strh	r2, [r0, #14]
 8004062:	6103      	str	r3, [r0, #16]
 8004064:	6143      	str	r3, [r0, #20]
 8004066:	6183      	str	r3, [r0, #24]
 8004068:	0019      	movs	r1, r3
 800406a:	2208      	movs	r2, #8
 800406c:	305c      	adds	r0, #92	@ 0x5c
 800406e:	f000 f90d 	bl	800428c <memset>
 8004072:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <std+0x50>)
 8004074:	6224      	str	r4, [r4, #32]
 8004076:	6263      	str	r3, [r4, #36]	@ 0x24
 8004078:	4b0a      	ldr	r3, [pc, #40]	@ (80040a4 <std+0x54>)
 800407a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800407c:	4b0a      	ldr	r3, [pc, #40]	@ (80040a8 <std+0x58>)
 800407e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004080:	4b0a      	ldr	r3, [pc, #40]	@ (80040ac <std+0x5c>)
 8004082:	6323      	str	r3, [r4, #48]	@ 0x30
 8004084:	4b0a      	ldr	r3, [pc, #40]	@ (80040b0 <std+0x60>)
 8004086:	429c      	cmp	r4, r3
 8004088:	d005      	beq.n	8004096 <std+0x46>
 800408a:	4b0a      	ldr	r3, [pc, #40]	@ (80040b4 <std+0x64>)
 800408c:	429c      	cmp	r4, r3
 800408e:	d002      	beq.n	8004096 <std+0x46>
 8004090:	4b09      	ldr	r3, [pc, #36]	@ (80040b8 <std+0x68>)
 8004092:	429c      	cmp	r4, r3
 8004094:	d103      	bne.n	800409e <std+0x4e>
 8004096:	0020      	movs	r0, r4
 8004098:	3058      	adds	r0, #88	@ 0x58
 800409a:	f000 f977 	bl	800438c <__retarget_lock_init_recursive>
 800409e:	bd10      	pop	{r4, pc}
 80040a0:	080041d9 	.word	0x080041d9
 80040a4:	08004201 	.word	0x08004201
 80040a8:	08004239 	.word	0x08004239
 80040ac:	08004265 	.word	0x08004265
 80040b0:	200002b4 	.word	0x200002b4
 80040b4:	2000031c 	.word	0x2000031c
 80040b8:	20000384 	.word	0x20000384

080040bc <stdio_exit_handler>:
 80040bc:	b510      	push	{r4, lr}
 80040be:	4a03      	ldr	r2, [pc, #12]	@ (80040cc <stdio_exit_handler+0x10>)
 80040c0:	4903      	ldr	r1, [pc, #12]	@ (80040d0 <stdio_exit_handler+0x14>)
 80040c2:	4804      	ldr	r0, [pc, #16]	@ (80040d4 <stdio_exit_handler+0x18>)
 80040c4:	f000 f86c 	bl	80041a0 <_fwalk_sglue>
 80040c8:	bd10      	pop	{r4, pc}
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	20000024 	.word	0x20000024
 80040d0:	080046f9 	.word	0x080046f9
 80040d4:	20000034 	.word	0x20000034

080040d8 <cleanup_stdio>:
 80040d8:	6841      	ldr	r1, [r0, #4]
 80040da:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <cleanup_stdio+0x30>)
 80040dc:	b510      	push	{r4, lr}
 80040de:	0004      	movs	r4, r0
 80040e0:	4299      	cmp	r1, r3
 80040e2:	d001      	beq.n	80040e8 <cleanup_stdio+0x10>
 80040e4:	f000 fb08 	bl	80046f8 <_fflush_r>
 80040e8:	68a1      	ldr	r1, [r4, #8]
 80040ea:	4b08      	ldr	r3, [pc, #32]	@ (800410c <cleanup_stdio+0x34>)
 80040ec:	4299      	cmp	r1, r3
 80040ee:	d002      	beq.n	80040f6 <cleanup_stdio+0x1e>
 80040f0:	0020      	movs	r0, r4
 80040f2:	f000 fb01 	bl	80046f8 <_fflush_r>
 80040f6:	68e1      	ldr	r1, [r4, #12]
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <cleanup_stdio+0x38>)
 80040fa:	4299      	cmp	r1, r3
 80040fc:	d002      	beq.n	8004104 <cleanup_stdio+0x2c>
 80040fe:	0020      	movs	r0, r4
 8004100:	f000 fafa 	bl	80046f8 <_fflush_r>
 8004104:	bd10      	pop	{r4, pc}
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	200002b4 	.word	0x200002b4
 800410c:	2000031c 	.word	0x2000031c
 8004110:	20000384 	.word	0x20000384

08004114 <global_stdio_init.part.0>:
 8004114:	b510      	push	{r4, lr}
 8004116:	4b09      	ldr	r3, [pc, #36]	@ (800413c <global_stdio_init.part.0+0x28>)
 8004118:	4a09      	ldr	r2, [pc, #36]	@ (8004140 <global_stdio_init.part.0+0x2c>)
 800411a:	2104      	movs	r1, #4
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	4809      	ldr	r0, [pc, #36]	@ (8004144 <global_stdio_init.part.0+0x30>)
 8004120:	2200      	movs	r2, #0
 8004122:	f7ff ff95 	bl	8004050 <std>
 8004126:	2201      	movs	r2, #1
 8004128:	2109      	movs	r1, #9
 800412a:	4807      	ldr	r0, [pc, #28]	@ (8004148 <global_stdio_init.part.0+0x34>)
 800412c:	f7ff ff90 	bl	8004050 <std>
 8004130:	2202      	movs	r2, #2
 8004132:	2112      	movs	r1, #18
 8004134:	4805      	ldr	r0, [pc, #20]	@ (800414c <global_stdio_init.part.0+0x38>)
 8004136:	f7ff ff8b 	bl	8004050 <std>
 800413a:	bd10      	pop	{r4, pc}
 800413c:	200003ec 	.word	0x200003ec
 8004140:	080040bd 	.word	0x080040bd
 8004144:	200002b4 	.word	0x200002b4
 8004148:	2000031c 	.word	0x2000031c
 800414c:	20000384 	.word	0x20000384

08004150 <__sfp_lock_acquire>:
 8004150:	b510      	push	{r4, lr}
 8004152:	4802      	ldr	r0, [pc, #8]	@ (800415c <__sfp_lock_acquire+0xc>)
 8004154:	f000 f91b 	bl	800438e <__retarget_lock_acquire_recursive>
 8004158:	bd10      	pop	{r4, pc}
 800415a:	46c0      	nop			@ (mov r8, r8)
 800415c:	200003f5 	.word	0x200003f5

08004160 <__sfp_lock_release>:
 8004160:	b510      	push	{r4, lr}
 8004162:	4802      	ldr	r0, [pc, #8]	@ (800416c <__sfp_lock_release+0xc>)
 8004164:	f000 f914 	bl	8004390 <__retarget_lock_release_recursive>
 8004168:	bd10      	pop	{r4, pc}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	200003f5 	.word	0x200003f5

08004170 <__sinit>:
 8004170:	b510      	push	{r4, lr}
 8004172:	0004      	movs	r4, r0
 8004174:	f7ff ffec 	bl	8004150 <__sfp_lock_acquire>
 8004178:	6a23      	ldr	r3, [r4, #32]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <__sinit+0x14>
 800417e:	f7ff ffef 	bl	8004160 <__sfp_lock_release>
 8004182:	bd10      	pop	{r4, pc}
 8004184:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <__sinit+0x28>)
 8004186:	6223      	str	r3, [r4, #32]
 8004188:	4b04      	ldr	r3, [pc, #16]	@ (800419c <__sinit+0x2c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f6      	bne.n	800417e <__sinit+0xe>
 8004190:	f7ff ffc0 	bl	8004114 <global_stdio_init.part.0>
 8004194:	e7f3      	b.n	800417e <__sinit+0xe>
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	080040d9 	.word	0x080040d9
 800419c:	200003ec 	.word	0x200003ec

080041a0 <_fwalk_sglue>:
 80041a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041a2:	0014      	movs	r4, r2
 80041a4:	2600      	movs	r6, #0
 80041a6:	9000      	str	r0, [sp, #0]
 80041a8:	9101      	str	r1, [sp, #4]
 80041aa:	68a5      	ldr	r5, [r4, #8]
 80041ac:	6867      	ldr	r7, [r4, #4]
 80041ae:	3f01      	subs	r7, #1
 80041b0:	d504      	bpl.n	80041bc <_fwalk_sglue+0x1c>
 80041b2:	6824      	ldr	r4, [r4, #0]
 80041b4:	2c00      	cmp	r4, #0
 80041b6:	d1f8      	bne.n	80041aa <_fwalk_sglue+0xa>
 80041b8:	0030      	movs	r0, r6
 80041ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041bc:	89ab      	ldrh	r3, [r5, #12]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d908      	bls.n	80041d4 <_fwalk_sglue+0x34>
 80041c2:	220e      	movs	r2, #14
 80041c4:	5eab      	ldrsh	r3, [r5, r2]
 80041c6:	3301      	adds	r3, #1
 80041c8:	d004      	beq.n	80041d4 <_fwalk_sglue+0x34>
 80041ca:	0029      	movs	r1, r5
 80041cc:	9800      	ldr	r0, [sp, #0]
 80041ce:	9b01      	ldr	r3, [sp, #4]
 80041d0:	4798      	blx	r3
 80041d2:	4306      	orrs	r6, r0
 80041d4:	3568      	adds	r5, #104	@ 0x68
 80041d6:	e7ea      	b.n	80041ae <_fwalk_sglue+0xe>

080041d8 <__sread>:
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	000c      	movs	r4, r1
 80041dc:	250e      	movs	r5, #14
 80041de:	5f49      	ldrsh	r1, [r1, r5]
 80041e0:	f000 f882 	bl	80042e8 <_read_r>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	db03      	blt.n	80041f0 <__sread+0x18>
 80041e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80041ea:	181b      	adds	r3, r3, r0
 80041ec:	6563      	str	r3, [r4, #84]	@ 0x54
 80041ee:	bd70      	pop	{r4, r5, r6, pc}
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	4a02      	ldr	r2, [pc, #8]	@ (80041fc <__sread+0x24>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	e7f9      	b.n	80041ee <__sread+0x16>
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	ffffefff 	.word	0xffffefff

08004200 <__swrite>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	001f      	movs	r7, r3
 8004204:	898b      	ldrh	r3, [r1, #12]
 8004206:	0005      	movs	r5, r0
 8004208:	000c      	movs	r4, r1
 800420a:	0016      	movs	r6, r2
 800420c:	05db      	lsls	r3, r3, #23
 800420e:	d505      	bpl.n	800421c <__swrite+0x1c>
 8004210:	230e      	movs	r3, #14
 8004212:	5ec9      	ldrsh	r1, [r1, r3]
 8004214:	2200      	movs	r2, #0
 8004216:	2302      	movs	r3, #2
 8004218:	f000 f852 	bl	80042c0 <_lseek_r>
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	4a05      	ldr	r2, [pc, #20]	@ (8004234 <__swrite+0x34>)
 8004220:	0028      	movs	r0, r5
 8004222:	4013      	ands	r3, r2
 8004224:	81a3      	strh	r3, [r4, #12]
 8004226:	0032      	movs	r2, r6
 8004228:	230e      	movs	r3, #14
 800422a:	5ee1      	ldrsh	r1, [r4, r3]
 800422c:	003b      	movs	r3, r7
 800422e:	f000 f86f 	bl	8004310 <_write_r>
 8004232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004234:	ffffefff 	.word	0xffffefff

08004238 <__sseek>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	000c      	movs	r4, r1
 800423c:	250e      	movs	r5, #14
 800423e:	5f49      	ldrsh	r1, [r1, r5]
 8004240:	f000 f83e 	bl	80042c0 <_lseek_r>
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	1c42      	adds	r2, r0, #1
 8004248:	d103      	bne.n	8004252 <__sseek+0x1a>
 800424a:	4a05      	ldr	r2, [pc, #20]	@ (8004260 <__sseek+0x28>)
 800424c:	4013      	ands	r3, r2
 800424e:	81a3      	strh	r3, [r4, #12]
 8004250:	bd70      	pop	{r4, r5, r6, pc}
 8004252:	2280      	movs	r2, #128	@ 0x80
 8004254:	0152      	lsls	r2, r2, #5
 8004256:	4313      	orrs	r3, r2
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	6560      	str	r0, [r4, #84]	@ 0x54
 800425c:	e7f8      	b.n	8004250 <__sseek+0x18>
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	ffffefff 	.word	0xffffefff

08004264 <__sclose>:
 8004264:	b510      	push	{r4, lr}
 8004266:	230e      	movs	r3, #14
 8004268:	5ec9      	ldrsh	r1, [r1, r3]
 800426a:	f000 f817 	bl	800429c <_close_r>
 800426e:	bd10      	pop	{r4, pc}

08004270 <memcmp>:
 8004270:	b530      	push	{r4, r5, lr}
 8004272:	2400      	movs	r4, #0
 8004274:	3901      	subs	r1, #1
 8004276:	42a2      	cmp	r2, r4
 8004278:	d101      	bne.n	800427e <memcmp+0xe>
 800427a:	2000      	movs	r0, #0
 800427c:	e005      	b.n	800428a <memcmp+0x1a>
 800427e:	5d03      	ldrb	r3, [r0, r4]
 8004280:	3401      	adds	r4, #1
 8004282:	5d0d      	ldrb	r5, [r1, r4]
 8004284:	42ab      	cmp	r3, r5
 8004286:	d0f6      	beq.n	8004276 <memcmp+0x6>
 8004288:	1b58      	subs	r0, r3, r5
 800428a:	bd30      	pop	{r4, r5, pc}

0800428c <memset>:
 800428c:	0003      	movs	r3, r0
 800428e:	1882      	adds	r2, r0, r2
 8004290:	4293      	cmp	r3, r2
 8004292:	d100      	bne.n	8004296 <memset+0xa>
 8004294:	4770      	bx	lr
 8004296:	7019      	strb	r1, [r3, #0]
 8004298:	3301      	adds	r3, #1
 800429a:	e7f9      	b.n	8004290 <memset+0x4>

0800429c <_close_r>:
 800429c:	2300      	movs	r3, #0
 800429e:	b570      	push	{r4, r5, r6, lr}
 80042a0:	4d06      	ldr	r5, [pc, #24]	@ (80042bc <_close_r+0x20>)
 80042a2:	0004      	movs	r4, r0
 80042a4:	0008      	movs	r0, r1
 80042a6:	602b      	str	r3, [r5, #0]
 80042a8:	f7fd fb9c 	bl	80019e4 <_close>
 80042ac:	1c43      	adds	r3, r0, #1
 80042ae:	d103      	bne.n	80042b8 <_close_r+0x1c>
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d000      	beq.n	80042b8 <_close_r+0x1c>
 80042b6:	6023      	str	r3, [r4, #0]
 80042b8:	bd70      	pop	{r4, r5, r6, pc}
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	200003f0 	.word	0x200003f0

080042c0 <_lseek_r>:
 80042c0:	b570      	push	{r4, r5, r6, lr}
 80042c2:	0004      	movs	r4, r0
 80042c4:	0008      	movs	r0, r1
 80042c6:	0011      	movs	r1, r2
 80042c8:	001a      	movs	r2, r3
 80042ca:	2300      	movs	r3, #0
 80042cc:	4d05      	ldr	r5, [pc, #20]	@ (80042e4 <_lseek_r+0x24>)
 80042ce:	602b      	str	r3, [r5, #0]
 80042d0:	f7fd fba9 	bl	8001a26 <_lseek>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d103      	bne.n	80042e0 <_lseek_r+0x20>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d000      	beq.n	80042e0 <_lseek_r+0x20>
 80042de:	6023      	str	r3, [r4, #0]
 80042e0:	bd70      	pop	{r4, r5, r6, pc}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	200003f0 	.word	0x200003f0

080042e8 <_read_r>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	0004      	movs	r4, r0
 80042ec:	0008      	movs	r0, r1
 80042ee:	0011      	movs	r1, r2
 80042f0:	001a      	movs	r2, r3
 80042f2:	2300      	movs	r3, #0
 80042f4:	4d05      	ldr	r5, [pc, #20]	@ (800430c <_read_r+0x24>)
 80042f6:	602b      	str	r3, [r5, #0]
 80042f8:	f7fd fb3b 	bl	8001972 <_read>
 80042fc:	1c43      	adds	r3, r0, #1
 80042fe:	d103      	bne.n	8004308 <_read_r+0x20>
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d000      	beq.n	8004308 <_read_r+0x20>
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	bd70      	pop	{r4, r5, r6, pc}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	200003f0 	.word	0x200003f0

08004310 <_write_r>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	0004      	movs	r4, r0
 8004314:	0008      	movs	r0, r1
 8004316:	0011      	movs	r1, r2
 8004318:	001a      	movs	r2, r3
 800431a:	2300      	movs	r3, #0
 800431c:	4d05      	ldr	r5, [pc, #20]	@ (8004334 <_write_r+0x24>)
 800431e:	602b      	str	r3, [r5, #0]
 8004320:	f7fd fb44 	bl	80019ac <_write>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d103      	bne.n	8004330 <_write_r+0x20>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d000      	beq.n	8004330 <_write_r+0x20>
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	bd70      	pop	{r4, r5, r6, pc}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	200003f0 	.word	0x200003f0

08004338 <__errno>:
 8004338:	4b01      	ldr	r3, [pc, #4]	@ (8004340 <__errno+0x8>)
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	4770      	bx	lr
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	20000030 	.word	0x20000030

08004344 <__libc_init_array>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	2600      	movs	r6, #0
 8004348:	4c0c      	ldr	r4, [pc, #48]	@ (800437c <__libc_init_array+0x38>)
 800434a:	4d0d      	ldr	r5, [pc, #52]	@ (8004380 <__libc_init_array+0x3c>)
 800434c:	1b64      	subs	r4, r4, r5
 800434e:	10a4      	asrs	r4, r4, #2
 8004350:	42a6      	cmp	r6, r4
 8004352:	d109      	bne.n	8004368 <__libc_init_array+0x24>
 8004354:	2600      	movs	r6, #0
 8004356:	f000 fe6b 	bl	8005030 <_init>
 800435a:	4c0a      	ldr	r4, [pc, #40]	@ (8004384 <__libc_init_array+0x40>)
 800435c:	4d0a      	ldr	r5, [pc, #40]	@ (8004388 <__libc_init_array+0x44>)
 800435e:	1b64      	subs	r4, r4, r5
 8004360:	10a4      	asrs	r4, r4, #2
 8004362:	42a6      	cmp	r6, r4
 8004364:	d105      	bne.n	8004372 <__libc_init_array+0x2e>
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	00b3      	lsls	r3, r6, #2
 800436a:	58eb      	ldr	r3, [r5, r3]
 800436c:	4798      	blx	r3
 800436e:	3601      	adds	r6, #1
 8004370:	e7ee      	b.n	8004350 <__libc_init_array+0xc>
 8004372:	00b3      	lsls	r3, r6, #2
 8004374:	58eb      	ldr	r3, [r5, r3]
 8004376:	4798      	blx	r3
 8004378:	3601      	adds	r6, #1
 800437a:	e7f2      	b.n	8004362 <__libc_init_array+0x1e>
 800437c:	08005160 	.word	0x08005160
 8004380:	08005160 	.word	0x08005160
 8004384:	08005164 	.word	0x08005164
 8004388:	08005160 	.word	0x08005160

0800438c <__retarget_lock_init_recursive>:
 800438c:	4770      	bx	lr

0800438e <__retarget_lock_acquire_recursive>:
 800438e:	4770      	bx	lr

08004390 <__retarget_lock_release_recursive>:
 8004390:	4770      	bx	lr

08004392 <memcpy>:
 8004392:	2300      	movs	r3, #0
 8004394:	b510      	push	{r4, lr}
 8004396:	429a      	cmp	r2, r3
 8004398:	d100      	bne.n	800439c <memcpy+0xa>
 800439a:	bd10      	pop	{r4, pc}
 800439c:	5ccc      	ldrb	r4, [r1, r3]
 800439e:	54c4      	strb	r4, [r0, r3]
 80043a0:	3301      	adds	r3, #1
 80043a2:	e7f8      	b.n	8004396 <memcpy+0x4>

080043a4 <__assert_func>:
 80043a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80043a6:	0014      	movs	r4, r2
 80043a8:	001a      	movs	r2, r3
 80043aa:	4b09      	ldr	r3, [pc, #36]	@ (80043d0 <__assert_func+0x2c>)
 80043ac:	0005      	movs	r5, r0
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	000e      	movs	r6, r1
 80043b2:	68d8      	ldr	r0, [r3, #12]
 80043b4:	4b07      	ldr	r3, [pc, #28]	@ (80043d4 <__assert_func+0x30>)
 80043b6:	2c00      	cmp	r4, #0
 80043b8:	d101      	bne.n	80043be <__assert_func+0x1a>
 80043ba:	4b07      	ldr	r3, [pc, #28]	@ (80043d8 <__assert_func+0x34>)
 80043bc:	001c      	movs	r4, r3
 80043be:	4907      	ldr	r1, [pc, #28]	@ (80043dc <__assert_func+0x38>)
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	9402      	str	r4, [sp, #8]
 80043c4:	002b      	movs	r3, r5
 80043c6:	9600      	str	r6, [sp, #0]
 80043c8:	f000 f9c2 	bl	8004750 <fiprintf>
 80043cc:	f000 f9e2 	bl	8004794 <abort>
 80043d0:	20000030 	.word	0x20000030
 80043d4:	080050ef 	.word	0x080050ef
 80043d8:	0800512a 	.word	0x0800512a
 80043dc:	080050fc 	.word	0x080050fc

080043e0 <_free_r>:
 80043e0:	b570      	push	{r4, r5, r6, lr}
 80043e2:	0005      	movs	r5, r0
 80043e4:	1e0c      	subs	r4, r1, #0
 80043e6:	d010      	beq.n	800440a <_free_r+0x2a>
 80043e8:	3c04      	subs	r4, #4
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	da00      	bge.n	80043f2 <_free_r+0x12>
 80043f0:	18e4      	adds	r4, r4, r3
 80043f2:	0028      	movs	r0, r5
 80043f4:	f000 f8ea 	bl	80045cc <__malloc_lock>
 80043f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004470 <_free_r+0x90>)
 80043fa:	6813      	ldr	r3, [r2, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <_free_r+0x2c>
 8004400:	6063      	str	r3, [r4, #4]
 8004402:	6014      	str	r4, [r2, #0]
 8004404:	0028      	movs	r0, r5
 8004406:	f000 f8e9 	bl	80045dc <__malloc_unlock>
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	42a3      	cmp	r3, r4
 800440e:	d908      	bls.n	8004422 <_free_r+0x42>
 8004410:	6820      	ldr	r0, [r4, #0]
 8004412:	1821      	adds	r1, r4, r0
 8004414:	428b      	cmp	r3, r1
 8004416:	d1f3      	bne.n	8004400 <_free_r+0x20>
 8004418:	6819      	ldr	r1, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	1809      	adds	r1, r1, r0
 800441e:	6021      	str	r1, [r4, #0]
 8004420:	e7ee      	b.n	8004400 <_free_r+0x20>
 8004422:	001a      	movs	r2, r3
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <_free_r+0x4e>
 800442a:	42a3      	cmp	r3, r4
 800442c:	d9f9      	bls.n	8004422 <_free_r+0x42>
 800442e:	6811      	ldr	r1, [r2, #0]
 8004430:	1850      	adds	r0, r2, r1
 8004432:	42a0      	cmp	r0, r4
 8004434:	d10b      	bne.n	800444e <_free_r+0x6e>
 8004436:	6820      	ldr	r0, [r4, #0]
 8004438:	1809      	adds	r1, r1, r0
 800443a:	1850      	adds	r0, r2, r1
 800443c:	6011      	str	r1, [r2, #0]
 800443e:	4283      	cmp	r3, r0
 8004440:	d1e0      	bne.n	8004404 <_free_r+0x24>
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	1841      	adds	r1, r0, r1
 8004448:	6011      	str	r1, [r2, #0]
 800444a:	6053      	str	r3, [r2, #4]
 800444c:	e7da      	b.n	8004404 <_free_r+0x24>
 800444e:	42a0      	cmp	r0, r4
 8004450:	d902      	bls.n	8004458 <_free_r+0x78>
 8004452:	230c      	movs	r3, #12
 8004454:	602b      	str	r3, [r5, #0]
 8004456:	e7d5      	b.n	8004404 <_free_r+0x24>
 8004458:	6820      	ldr	r0, [r4, #0]
 800445a:	1821      	adds	r1, r4, r0
 800445c:	428b      	cmp	r3, r1
 800445e:	d103      	bne.n	8004468 <_free_r+0x88>
 8004460:	6819      	ldr	r1, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	1809      	adds	r1, r1, r0
 8004466:	6021      	str	r1, [r4, #0]
 8004468:	6063      	str	r3, [r4, #4]
 800446a:	6054      	str	r4, [r2, #4]
 800446c:	e7ca      	b.n	8004404 <_free_r+0x24>
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	200003fc 	.word	0x200003fc

08004474 <malloc>:
 8004474:	b510      	push	{r4, lr}
 8004476:	4b03      	ldr	r3, [pc, #12]	@ (8004484 <malloc+0x10>)
 8004478:	0001      	movs	r1, r0
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	f000 f826 	bl	80044cc <_malloc_r>
 8004480:	bd10      	pop	{r4, pc}
 8004482:	46c0      	nop			@ (mov r8, r8)
 8004484:	20000030 	.word	0x20000030

08004488 <sbrk_aligned>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	4e0f      	ldr	r6, [pc, #60]	@ (80044c8 <sbrk_aligned+0x40>)
 800448c:	000d      	movs	r5, r1
 800448e:	6831      	ldr	r1, [r6, #0]
 8004490:	0004      	movs	r4, r0
 8004492:	2900      	cmp	r1, #0
 8004494:	d102      	bne.n	800449c <sbrk_aligned+0x14>
 8004496:	f000 f96b 	bl	8004770 <_sbrk_r>
 800449a:	6030      	str	r0, [r6, #0]
 800449c:	0029      	movs	r1, r5
 800449e:	0020      	movs	r0, r4
 80044a0:	f000 f966 	bl	8004770 <_sbrk_r>
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	d103      	bne.n	80044b0 <sbrk_aligned+0x28>
 80044a8:	2501      	movs	r5, #1
 80044aa:	426d      	negs	r5, r5
 80044ac:	0028      	movs	r0, r5
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	2303      	movs	r3, #3
 80044b2:	1cc5      	adds	r5, r0, #3
 80044b4:	439d      	bics	r5, r3
 80044b6:	42a8      	cmp	r0, r5
 80044b8:	d0f8      	beq.n	80044ac <sbrk_aligned+0x24>
 80044ba:	1a29      	subs	r1, r5, r0
 80044bc:	0020      	movs	r0, r4
 80044be:	f000 f957 	bl	8004770 <_sbrk_r>
 80044c2:	3001      	adds	r0, #1
 80044c4:	d1f2      	bne.n	80044ac <sbrk_aligned+0x24>
 80044c6:	e7ef      	b.n	80044a8 <sbrk_aligned+0x20>
 80044c8:	200003f8 	.word	0x200003f8

080044cc <_malloc_r>:
 80044cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044ce:	2203      	movs	r2, #3
 80044d0:	1ccb      	adds	r3, r1, #3
 80044d2:	4393      	bics	r3, r2
 80044d4:	3308      	adds	r3, #8
 80044d6:	0005      	movs	r5, r0
 80044d8:	001f      	movs	r7, r3
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	d234      	bcs.n	8004548 <_malloc_r+0x7c>
 80044de:	270c      	movs	r7, #12
 80044e0:	42b9      	cmp	r1, r7
 80044e2:	d833      	bhi.n	800454c <_malloc_r+0x80>
 80044e4:	0028      	movs	r0, r5
 80044e6:	f000 f871 	bl	80045cc <__malloc_lock>
 80044ea:	4e37      	ldr	r6, [pc, #220]	@ (80045c8 <_malloc_r+0xfc>)
 80044ec:	6833      	ldr	r3, [r6, #0]
 80044ee:	001c      	movs	r4, r3
 80044f0:	2c00      	cmp	r4, #0
 80044f2:	d12f      	bne.n	8004554 <_malloc_r+0x88>
 80044f4:	0039      	movs	r1, r7
 80044f6:	0028      	movs	r0, r5
 80044f8:	f7ff ffc6 	bl	8004488 <sbrk_aligned>
 80044fc:	0004      	movs	r4, r0
 80044fe:	1c43      	adds	r3, r0, #1
 8004500:	d15f      	bne.n	80045c2 <_malloc_r+0xf6>
 8004502:	6834      	ldr	r4, [r6, #0]
 8004504:	9400      	str	r4, [sp, #0]
 8004506:	9b00      	ldr	r3, [sp, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d14a      	bne.n	80045a2 <_malloc_r+0xd6>
 800450c:	2c00      	cmp	r4, #0
 800450e:	d052      	beq.n	80045b6 <_malloc_r+0xea>
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	0028      	movs	r0, r5
 8004514:	18e3      	adds	r3, r4, r3
 8004516:	9900      	ldr	r1, [sp, #0]
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	f000 f929 	bl	8004770 <_sbrk_r>
 800451e:	9b01      	ldr	r3, [sp, #4]
 8004520:	4283      	cmp	r3, r0
 8004522:	d148      	bne.n	80045b6 <_malloc_r+0xea>
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	0028      	movs	r0, r5
 8004528:	1aff      	subs	r7, r7, r3
 800452a:	0039      	movs	r1, r7
 800452c:	f7ff ffac 	bl	8004488 <sbrk_aligned>
 8004530:	3001      	adds	r0, #1
 8004532:	d040      	beq.n	80045b6 <_malloc_r+0xea>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	19db      	adds	r3, r3, r7
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	6833      	ldr	r3, [r6, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	2a00      	cmp	r2, #0
 8004540:	d133      	bne.n	80045aa <_malloc_r+0xde>
 8004542:	9b00      	ldr	r3, [sp, #0]
 8004544:	6033      	str	r3, [r6, #0]
 8004546:	e019      	b.n	800457c <_malloc_r+0xb0>
 8004548:	2b00      	cmp	r3, #0
 800454a:	dac9      	bge.n	80044e0 <_malloc_r+0x14>
 800454c:	230c      	movs	r3, #12
 800454e:	602b      	str	r3, [r5, #0]
 8004550:	2000      	movs	r0, #0
 8004552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004554:	6821      	ldr	r1, [r4, #0]
 8004556:	1bc9      	subs	r1, r1, r7
 8004558:	d420      	bmi.n	800459c <_malloc_r+0xd0>
 800455a:	290b      	cmp	r1, #11
 800455c:	d90a      	bls.n	8004574 <_malloc_r+0xa8>
 800455e:	19e2      	adds	r2, r4, r7
 8004560:	6027      	str	r7, [r4, #0]
 8004562:	42a3      	cmp	r3, r4
 8004564:	d104      	bne.n	8004570 <_malloc_r+0xa4>
 8004566:	6032      	str	r2, [r6, #0]
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	6011      	str	r1, [r2, #0]
 800456c:	6053      	str	r3, [r2, #4]
 800456e:	e005      	b.n	800457c <_malloc_r+0xb0>
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	e7f9      	b.n	8004568 <_malloc_r+0x9c>
 8004574:	6862      	ldr	r2, [r4, #4]
 8004576:	42a3      	cmp	r3, r4
 8004578:	d10e      	bne.n	8004598 <_malloc_r+0xcc>
 800457a:	6032      	str	r2, [r6, #0]
 800457c:	0028      	movs	r0, r5
 800457e:	f000 f82d 	bl	80045dc <__malloc_unlock>
 8004582:	0020      	movs	r0, r4
 8004584:	2207      	movs	r2, #7
 8004586:	300b      	adds	r0, #11
 8004588:	1d23      	adds	r3, r4, #4
 800458a:	4390      	bics	r0, r2
 800458c:	1ac2      	subs	r2, r0, r3
 800458e:	4298      	cmp	r0, r3
 8004590:	d0df      	beq.n	8004552 <_malloc_r+0x86>
 8004592:	1a1b      	subs	r3, r3, r0
 8004594:	50a3      	str	r3, [r4, r2]
 8004596:	e7dc      	b.n	8004552 <_malloc_r+0x86>
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	e7ef      	b.n	800457c <_malloc_r+0xb0>
 800459c:	0023      	movs	r3, r4
 800459e:	6864      	ldr	r4, [r4, #4]
 80045a0:	e7a6      	b.n	80044f0 <_malloc_r+0x24>
 80045a2:	9c00      	ldr	r4, [sp, #0]
 80045a4:	6863      	ldr	r3, [r4, #4]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	e7ad      	b.n	8004506 <_malloc_r+0x3a>
 80045aa:	001a      	movs	r2, r3
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	42a3      	cmp	r3, r4
 80045b0:	d1fb      	bne.n	80045aa <_malloc_r+0xde>
 80045b2:	2300      	movs	r3, #0
 80045b4:	e7da      	b.n	800456c <_malloc_r+0xa0>
 80045b6:	230c      	movs	r3, #12
 80045b8:	0028      	movs	r0, r5
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	f000 f80e 	bl	80045dc <__malloc_unlock>
 80045c0:	e7c6      	b.n	8004550 <_malloc_r+0x84>
 80045c2:	6007      	str	r7, [r0, #0]
 80045c4:	e7da      	b.n	800457c <_malloc_r+0xb0>
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	200003fc 	.word	0x200003fc

080045cc <__malloc_lock>:
 80045cc:	b510      	push	{r4, lr}
 80045ce:	4802      	ldr	r0, [pc, #8]	@ (80045d8 <__malloc_lock+0xc>)
 80045d0:	f7ff fedd 	bl	800438e <__retarget_lock_acquire_recursive>
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	200003f4 	.word	0x200003f4

080045dc <__malloc_unlock>:
 80045dc:	b510      	push	{r4, lr}
 80045de:	4802      	ldr	r0, [pc, #8]	@ (80045e8 <__malloc_unlock+0xc>)
 80045e0:	f7ff fed6 	bl	8004390 <__retarget_lock_release_recursive>
 80045e4:	bd10      	pop	{r4, pc}
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	200003f4 	.word	0x200003f4

080045ec <__sflush_r>:
 80045ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ee:	220c      	movs	r2, #12
 80045f0:	5e8b      	ldrsh	r3, [r1, r2]
 80045f2:	0005      	movs	r5, r0
 80045f4:	000c      	movs	r4, r1
 80045f6:	071a      	lsls	r2, r3, #28
 80045f8:	d456      	bmi.n	80046a8 <__sflush_r+0xbc>
 80045fa:	684a      	ldr	r2, [r1, #4]
 80045fc:	2a00      	cmp	r2, #0
 80045fe:	dc02      	bgt.n	8004606 <__sflush_r+0x1a>
 8004600:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004602:	2a00      	cmp	r2, #0
 8004604:	dd4e      	ble.n	80046a4 <__sflush_r+0xb8>
 8004606:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004608:	2f00      	cmp	r7, #0
 800460a:	d04b      	beq.n	80046a4 <__sflush_r+0xb8>
 800460c:	2200      	movs	r2, #0
 800460e:	2080      	movs	r0, #128	@ 0x80
 8004610:	682e      	ldr	r6, [r5, #0]
 8004612:	602a      	str	r2, [r5, #0]
 8004614:	001a      	movs	r2, r3
 8004616:	0140      	lsls	r0, r0, #5
 8004618:	6a21      	ldr	r1, [r4, #32]
 800461a:	4002      	ands	r2, r0
 800461c:	4203      	tst	r3, r0
 800461e:	d033      	beq.n	8004688 <__sflush_r+0x9c>
 8004620:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004622:	89a3      	ldrh	r3, [r4, #12]
 8004624:	075b      	lsls	r3, r3, #29
 8004626:	d506      	bpl.n	8004636 <__sflush_r+0x4a>
 8004628:	6863      	ldr	r3, [r4, #4]
 800462a:	1ad2      	subs	r2, r2, r3
 800462c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <__sflush_r+0x4a>
 8004632:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004634:	1ad2      	subs	r2, r2, r3
 8004636:	2300      	movs	r3, #0
 8004638:	0028      	movs	r0, r5
 800463a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800463c:	6a21      	ldr	r1, [r4, #32]
 800463e:	47b8      	blx	r7
 8004640:	89a2      	ldrh	r2, [r4, #12]
 8004642:	1c43      	adds	r3, r0, #1
 8004644:	d106      	bne.n	8004654 <__sflush_r+0x68>
 8004646:	6829      	ldr	r1, [r5, #0]
 8004648:	291d      	cmp	r1, #29
 800464a:	d846      	bhi.n	80046da <__sflush_r+0xee>
 800464c:	4b29      	ldr	r3, [pc, #164]	@ (80046f4 <__sflush_r+0x108>)
 800464e:	410b      	asrs	r3, r1
 8004650:	07db      	lsls	r3, r3, #31
 8004652:	d442      	bmi.n	80046da <__sflush_r+0xee>
 8004654:	2300      	movs	r3, #0
 8004656:	6063      	str	r3, [r4, #4]
 8004658:	6923      	ldr	r3, [r4, #16]
 800465a:	6023      	str	r3, [r4, #0]
 800465c:	04d2      	lsls	r2, r2, #19
 800465e:	d505      	bpl.n	800466c <__sflush_r+0x80>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d102      	bne.n	800466a <__sflush_r+0x7e>
 8004664:	682b      	ldr	r3, [r5, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d100      	bne.n	800466c <__sflush_r+0x80>
 800466a:	6560      	str	r0, [r4, #84]	@ 0x54
 800466c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800466e:	602e      	str	r6, [r5, #0]
 8004670:	2900      	cmp	r1, #0
 8004672:	d017      	beq.n	80046a4 <__sflush_r+0xb8>
 8004674:	0023      	movs	r3, r4
 8004676:	3344      	adds	r3, #68	@ 0x44
 8004678:	4299      	cmp	r1, r3
 800467a:	d002      	beq.n	8004682 <__sflush_r+0x96>
 800467c:	0028      	movs	r0, r5
 800467e:	f7ff feaf 	bl	80043e0 <_free_r>
 8004682:	2300      	movs	r3, #0
 8004684:	6363      	str	r3, [r4, #52]	@ 0x34
 8004686:	e00d      	b.n	80046a4 <__sflush_r+0xb8>
 8004688:	2301      	movs	r3, #1
 800468a:	0028      	movs	r0, r5
 800468c:	47b8      	blx	r7
 800468e:	0002      	movs	r2, r0
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d1c6      	bne.n	8004622 <__sflush_r+0x36>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0c3      	beq.n	8004622 <__sflush_r+0x36>
 800469a:	2b1d      	cmp	r3, #29
 800469c:	d001      	beq.n	80046a2 <__sflush_r+0xb6>
 800469e:	2b16      	cmp	r3, #22
 80046a0:	d11a      	bne.n	80046d8 <__sflush_r+0xec>
 80046a2:	602e      	str	r6, [r5, #0]
 80046a4:	2000      	movs	r0, #0
 80046a6:	e01e      	b.n	80046e6 <__sflush_r+0xfa>
 80046a8:	690e      	ldr	r6, [r1, #16]
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	d0fa      	beq.n	80046a4 <__sflush_r+0xb8>
 80046ae:	680f      	ldr	r7, [r1, #0]
 80046b0:	600e      	str	r6, [r1, #0]
 80046b2:	1bba      	subs	r2, r7, r6
 80046b4:	9201      	str	r2, [sp, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	079b      	lsls	r3, r3, #30
 80046ba:	d100      	bne.n	80046be <__sflush_r+0xd2>
 80046bc:	694a      	ldr	r2, [r1, #20]
 80046be:	60a2      	str	r2, [r4, #8]
 80046c0:	9b01      	ldr	r3, [sp, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	ddee      	ble.n	80046a4 <__sflush_r+0xb8>
 80046c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80046c8:	0032      	movs	r2, r6
 80046ca:	001f      	movs	r7, r3
 80046cc:	0028      	movs	r0, r5
 80046ce:	9b01      	ldr	r3, [sp, #4]
 80046d0:	6a21      	ldr	r1, [r4, #32]
 80046d2:	47b8      	blx	r7
 80046d4:	2800      	cmp	r0, #0
 80046d6:	dc07      	bgt.n	80046e8 <__sflush_r+0xfc>
 80046d8:	89a2      	ldrh	r2, [r4, #12]
 80046da:	2340      	movs	r3, #64	@ 0x40
 80046dc:	2001      	movs	r0, #1
 80046de:	4313      	orrs	r3, r2
 80046e0:	b21b      	sxth	r3, r3
 80046e2:	81a3      	strh	r3, [r4, #12]
 80046e4:	4240      	negs	r0, r0
 80046e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	1836      	adds	r6, r6, r0
 80046ec:	1a1b      	subs	r3, r3, r0
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	e7e6      	b.n	80046c0 <__sflush_r+0xd4>
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	dfbffffe 	.word	0xdfbffffe

080046f8 <_fflush_r>:
 80046f8:	690b      	ldr	r3, [r1, #16]
 80046fa:	b570      	push	{r4, r5, r6, lr}
 80046fc:	0005      	movs	r5, r0
 80046fe:	000c      	movs	r4, r1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <_fflush_r+0x12>
 8004704:	2500      	movs	r5, #0
 8004706:	0028      	movs	r0, r5
 8004708:	bd70      	pop	{r4, r5, r6, pc}
 800470a:	2800      	cmp	r0, #0
 800470c:	d004      	beq.n	8004718 <_fflush_r+0x20>
 800470e:	6a03      	ldr	r3, [r0, #32]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <_fflush_r+0x20>
 8004714:	f7ff fd2c 	bl	8004170 <__sinit>
 8004718:	220c      	movs	r2, #12
 800471a:	5ea3      	ldrsh	r3, [r4, r2]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f1      	beq.n	8004704 <_fflush_r+0xc>
 8004720:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004722:	07d2      	lsls	r2, r2, #31
 8004724:	d404      	bmi.n	8004730 <_fflush_r+0x38>
 8004726:	059b      	lsls	r3, r3, #22
 8004728:	d402      	bmi.n	8004730 <_fflush_r+0x38>
 800472a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800472c:	f7ff fe2f 	bl	800438e <__retarget_lock_acquire_recursive>
 8004730:	0028      	movs	r0, r5
 8004732:	0021      	movs	r1, r4
 8004734:	f7ff ff5a 	bl	80045ec <__sflush_r>
 8004738:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800473a:	0005      	movs	r5, r0
 800473c:	07db      	lsls	r3, r3, #31
 800473e:	d4e2      	bmi.n	8004706 <_fflush_r+0xe>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	059b      	lsls	r3, r3, #22
 8004744:	d4df      	bmi.n	8004706 <_fflush_r+0xe>
 8004746:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004748:	f7ff fe22 	bl	8004390 <__retarget_lock_release_recursive>
 800474c:	e7db      	b.n	8004706 <_fflush_r+0xe>
	...

08004750 <fiprintf>:
 8004750:	b40e      	push	{r1, r2, r3}
 8004752:	b517      	push	{r0, r1, r2, r4, lr}
 8004754:	4c05      	ldr	r4, [pc, #20]	@ (800476c <fiprintf+0x1c>)
 8004756:	ab05      	add	r3, sp, #20
 8004758:	cb04      	ldmia	r3!, {r2}
 800475a:	0001      	movs	r1, r0
 800475c:	6820      	ldr	r0, [r4, #0]
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	f000 f846 	bl	80047f0 <_vfiprintf_r>
 8004764:	bc1e      	pop	{r1, r2, r3, r4}
 8004766:	bc08      	pop	{r3}
 8004768:	b003      	add	sp, #12
 800476a:	4718      	bx	r3
 800476c:	20000030 	.word	0x20000030

08004770 <_sbrk_r>:
 8004770:	2300      	movs	r3, #0
 8004772:	b570      	push	{r4, r5, r6, lr}
 8004774:	4d06      	ldr	r5, [pc, #24]	@ (8004790 <_sbrk_r+0x20>)
 8004776:	0004      	movs	r4, r0
 8004778:	0008      	movs	r0, r1
 800477a:	602b      	str	r3, [r5, #0]
 800477c:	f7fd f95e 	bl	8001a3c <_sbrk>
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d103      	bne.n	800478c <_sbrk_r+0x1c>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d000      	beq.n	800478c <_sbrk_r+0x1c>
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	bd70      	pop	{r4, r5, r6, pc}
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	200003f0 	.word	0x200003f0

08004794 <abort>:
 8004794:	2006      	movs	r0, #6
 8004796:	b510      	push	{r4, lr}
 8004798:	f000 fb8e 	bl	8004eb8 <raise>
 800479c:	2001      	movs	r0, #1
 800479e:	f7fd f8db 	bl	8001958 <_exit>

080047a2 <__sfputc_r>:
 80047a2:	6893      	ldr	r3, [r2, #8]
 80047a4:	b510      	push	{r4, lr}
 80047a6:	3b01      	subs	r3, #1
 80047a8:	6093      	str	r3, [r2, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da04      	bge.n	80047b8 <__sfputc_r+0x16>
 80047ae:	6994      	ldr	r4, [r2, #24]
 80047b0:	42a3      	cmp	r3, r4
 80047b2:	db07      	blt.n	80047c4 <__sfputc_r+0x22>
 80047b4:	290a      	cmp	r1, #10
 80047b6:	d005      	beq.n	80047c4 <__sfputc_r+0x22>
 80047b8:	6813      	ldr	r3, [r2, #0]
 80047ba:	1c58      	adds	r0, r3, #1
 80047bc:	6010      	str	r0, [r2, #0]
 80047be:	7019      	strb	r1, [r3, #0]
 80047c0:	0008      	movs	r0, r1
 80047c2:	bd10      	pop	{r4, pc}
 80047c4:	f000 faae 	bl	8004d24 <__swbuf_r>
 80047c8:	0001      	movs	r1, r0
 80047ca:	e7f9      	b.n	80047c0 <__sfputc_r+0x1e>

080047cc <__sfputs_r>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	0006      	movs	r6, r0
 80047d0:	000f      	movs	r7, r1
 80047d2:	0014      	movs	r4, r2
 80047d4:	18d5      	adds	r5, r2, r3
 80047d6:	42ac      	cmp	r4, r5
 80047d8:	d101      	bne.n	80047de <__sfputs_r+0x12>
 80047da:	2000      	movs	r0, #0
 80047dc:	e007      	b.n	80047ee <__sfputs_r+0x22>
 80047de:	7821      	ldrb	r1, [r4, #0]
 80047e0:	003a      	movs	r2, r7
 80047e2:	0030      	movs	r0, r6
 80047e4:	f7ff ffdd 	bl	80047a2 <__sfputc_r>
 80047e8:	3401      	adds	r4, #1
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	d1f3      	bne.n	80047d6 <__sfputs_r+0xa>
 80047ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047f0 <_vfiprintf_r>:
 80047f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f2:	b0a1      	sub	sp, #132	@ 0x84
 80047f4:	000f      	movs	r7, r1
 80047f6:	0015      	movs	r5, r2
 80047f8:	001e      	movs	r6, r3
 80047fa:	9003      	str	r0, [sp, #12]
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d004      	beq.n	800480a <_vfiprintf_r+0x1a>
 8004800:	6a03      	ldr	r3, [r0, #32]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <_vfiprintf_r+0x1a>
 8004806:	f7ff fcb3 	bl	8004170 <__sinit>
 800480a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800480c:	07db      	lsls	r3, r3, #31
 800480e:	d405      	bmi.n	800481c <_vfiprintf_r+0x2c>
 8004810:	89bb      	ldrh	r3, [r7, #12]
 8004812:	059b      	lsls	r3, r3, #22
 8004814:	d402      	bmi.n	800481c <_vfiprintf_r+0x2c>
 8004816:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004818:	f7ff fdb9 	bl	800438e <__retarget_lock_acquire_recursive>
 800481c:	89bb      	ldrh	r3, [r7, #12]
 800481e:	071b      	lsls	r3, r3, #28
 8004820:	d502      	bpl.n	8004828 <_vfiprintf_r+0x38>
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d113      	bne.n	8004850 <_vfiprintf_r+0x60>
 8004828:	0039      	movs	r1, r7
 800482a:	9803      	ldr	r0, [sp, #12]
 800482c:	f000 fabc 	bl	8004da8 <__swsetup_r>
 8004830:	2800      	cmp	r0, #0
 8004832:	d00d      	beq.n	8004850 <_vfiprintf_r+0x60>
 8004834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004836:	07db      	lsls	r3, r3, #31
 8004838:	d503      	bpl.n	8004842 <_vfiprintf_r+0x52>
 800483a:	2001      	movs	r0, #1
 800483c:	4240      	negs	r0, r0
 800483e:	b021      	add	sp, #132	@ 0x84
 8004840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004842:	89bb      	ldrh	r3, [r7, #12]
 8004844:	059b      	lsls	r3, r3, #22
 8004846:	d4f8      	bmi.n	800483a <_vfiprintf_r+0x4a>
 8004848:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800484a:	f7ff fda1 	bl	8004390 <__retarget_lock_release_recursive>
 800484e:	e7f4      	b.n	800483a <_vfiprintf_r+0x4a>
 8004850:	2300      	movs	r3, #0
 8004852:	ac08      	add	r4, sp, #32
 8004854:	6163      	str	r3, [r4, #20]
 8004856:	3320      	adds	r3, #32
 8004858:	7663      	strb	r3, [r4, #25]
 800485a:	3310      	adds	r3, #16
 800485c:	76a3      	strb	r3, [r4, #26]
 800485e:	9607      	str	r6, [sp, #28]
 8004860:	002e      	movs	r6, r5
 8004862:	7833      	ldrb	r3, [r6, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <_vfiprintf_r+0x7c>
 8004868:	2b25      	cmp	r3, #37	@ 0x25
 800486a:	d148      	bne.n	80048fe <_vfiprintf_r+0x10e>
 800486c:	1b73      	subs	r3, r6, r5
 800486e:	9305      	str	r3, [sp, #20]
 8004870:	42ae      	cmp	r6, r5
 8004872:	d00b      	beq.n	800488c <_vfiprintf_r+0x9c>
 8004874:	002a      	movs	r2, r5
 8004876:	0039      	movs	r1, r7
 8004878:	9803      	ldr	r0, [sp, #12]
 800487a:	f7ff ffa7 	bl	80047cc <__sfputs_r>
 800487e:	3001      	adds	r0, #1
 8004880:	d100      	bne.n	8004884 <_vfiprintf_r+0x94>
 8004882:	e0ae      	b.n	80049e2 <_vfiprintf_r+0x1f2>
 8004884:	6963      	ldr	r3, [r4, #20]
 8004886:	9a05      	ldr	r2, [sp, #20]
 8004888:	189b      	adds	r3, r3, r2
 800488a:	6163      	str	r3, [r4, #20]
 800488c:	7833      	ldrb	r3, [r6, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d100      	bne.n	8004894 <_vfiprintf_r+0xa4>
 8004892:	e0a6      	b.n	80049e2 <_vfiprintf_r+0x1f2>
 8004894:	2201      	movs	r2, #1
 8004896:	2300      	movs	r3, #0
 8004898:	4252      	negs	r2, r2
 800489a:	6062      	str	r2, [r4, #4]
 800489c:	a904      	add	r1, sp, #16
 800489e:	3254      	adds	r2, #84	@ 0x54
 80048a0:	1852      	adds	r2, r2, r1
 80048a2:	1c75      	adds	r5, r6, #1
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	60e3      	str	r3, [r4, #12]
 80048a8:	60a3      	str	r3, [r4, #8]
 80048aa:	7013      	strb	r3, [r2, #0]
 80048ac:	65a3      	str	r3, [r4, #88]	@ 0x58
 80048ae:	4b59      	ldr	r3, [pc, #356]	@ (8004a14 <_vfiprintf_r+0x224>)
 80048b0:	2205      	movs	r2, #5
 80048b2:	0018      	movs	r0, r3
 80048b4:	7829      	ldrb	r1, [r5, #0]
 80048b6:	9305      	str	r3, [sp, #20]
 80048b8:	f000 fb1e 	bl	8004ef8 <memchr>
 80048bc:	1c6e      	adds	r6, r5, #1
 80048be:	2800      	cmp	r0, #0
 80048c0:	d11f      	bne.n	8004902 <_vfiprintf_r+0x112>
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	06d3      	lsls	r3, r2, #27
 80048c6:	d504      	bpl.n	80048d2 <_vfiprintf_r+0xe2>
 80048c8:	2353      	movs	r3, #83	@ 0x53
 80048ca:	a904      	add	r1, sp, #16
 80048cc:	185b      	adds	r3, r3, r1
 80048ce:	2120      	movs	r1, #32
 80048d0:	7019      	strb	r1, [r3, #0]
 80048d2:	0713      	lsls	r3, r2, #28
 80048d4:	d504      	bpl.n	80048e0 <_vfiprintf_r+0xf0>
 80048d6:	2353      	movs	r3, #83	@ 0x53
 80048d8:	a904      	add	r1, sp, #16
 80048da:	185b      	adds	r3, r3, r1
 80048dc:	212b      	movs	r1, #43	@ 0x2b
 80048de:	7019      	strb	r1, [r3, #0]
 80048e0:	782b      	ldrb	r3, [r5, #0]
 80048e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80048e4:	d016      	beq.n	8004914 <_vfiprintf_r+0x124>
 80048e6:	002e      	movs	r6, r5
 80048e8:	2100      	movs	r1, #0
 80048ea:	200a      	movs	r0, #10
 80048ec:	68e3      	ldr	r3, [r4, #12]
 80048ee:	7832      	ldrb	r2, [r6, #0]
 80048f0:	1c75      	adds	r5, r6, #1
 80048f2:	3a30      	subs	r2, #48	@ 0x30
 80048f4:	2a09      	cmp	r2, #9
 80048f6:	d950      	bls.n	800499a <_vfiprintf_r+0x1aa>
 80048f8:	2900      	cmp	r1, #0
 80048fa:	d111      	bne.n	8004920 <_vfiprintf_r+0x130>
 80048fc:	e017      	b.n	800492e <_vfiprintf_r+0x13e>
 80048fe:	3601      	adds	r6, #1
 8004900:	e7af      	b.n	8004862 <_vfiprintf_r+0x72>
 8004902:	9b05      	ldr	r3, [sp, #20]
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	1ac0      	subs	r0, r0, r3
 8004908:	2301      	movs	r3, #1
 800490a:	4083      	lsls	r3, r0
 800490c:	4313      	orrs	r3, r2
 800490e:	0035      	movs	r5, r6
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	e7cc      	b.n	80048ae <_vfiprintf_r+0xbe>
 8004914:	9b07      	ldr	r3, [sp, #28]
 8004916:	1d19      	adds	r1, r3, #4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	9107      	str	r1, [sp, #28]
 800491c:	2b00      	cmp	r3, #0
 800491e:	db01      	blt.n	8004924 <_vfiprintf_r+0x134>
 8004920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004922:	e004      	b.n	800492e <_vfiprintf_r+0x13e>
 8004924:	425b      	negs	r3, r3
 8004926:	60e3      	str	r3, [r4, #12]
 8004928:	2302      	movs	r3, #2
 800492a:	4313      	orrs	r3, r2
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	7833      	ldrb	r3, [r6, #0]
 8004930:	2b2e      	cmp	r3, #46	@ 0x2e
 8004932:	d10c      	bne.n	800494e <_vfiprintf_r+0x15e>
 8004934:	7873      	ldrb	r3, [r6, #1]
 8004936:	2b2a      	cmp	r3, #42	@ 0x2a
 8004938:	d134      	bne.n	80049a4 <_vfiprintf_r+0x1b4>
 800493a:	9b07      	ldr	r3, [sp, #28]
 800493c:	3602      	adds	r6, #2
 800493e:	1d1a      	adds	r2, r3, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	9207      	str	r2, [sp, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	da01      	bge.n	800494c <_vfiprintf_r+0x15c>
 8004948:	2301      	movs	r3, #1
 800494a:	425b      	negs	r3, r3
 800494c:	9309      	str	r3, [sp, #36]	@ 0x24
 800494e:	4d32      	ldr	r5, [pc, #200]	@ (8004a18 <_vfiprintf_r+0x228>)
 8004950:	2203      	movs	r2, #3
 8004952:	0028      	movs	r0, r5
 8004954:	7831      	ldrb	r1, [r6, #0]
 8004956:	f000 facf 	bl	8004ef8 <memchr>
 800495a:	2800      	cmp	r0, #0
 800495c:	d006      	beq.n	800496c <_vfiprintf_r+0x17c>
 800495e:	2340      	movs	r3, #64	@ 0x40
 8004960:	1b40      	subs	r0, r0, r5
 8004962:	4083      	lsls	r3, r0
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	3601      	adds	r6, #1
 8004968:	4313      	orrs	r3, r2
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	7831      	ldrb	r1, [r6, #0]
 800496e:	2206      	movs	r2, #6
 8004970:	482a      	ldr	r0, [pc, #168]	@ (8004a1c <_vfiprintf_r+0x22c>)
 8004972:	1c75      	adds	r5, r6, #1
 8004974:	7621      	strb	r1, [r4, #24]
 8004976:	f000 fabf 	bl	8004ef8 <memchr>
 800497a:	2800      	cmp	r0, #0
 800497c:	d040      	beq.n	8004a00 <_vfiprintf_r+0x210>
 800497e:	4b28      	ldr	r3, [pc, #160]	@ (8004a20 <_vfiprintf_r+0x230>)
 8004980:	2b00      	cmp	r3, #0
 8004982:	d122      	bne.n	80049ca <_vfiprintf_r+0x1da>
 8004984:	2207      	movs	r2, #7
 8004986:	9b07      	ldr	r3, [sp, #28]
 8004988:	3307      	adds	r3, #7
 800498a:	4393      	bics	r3, r2
 800498c:	3308      	adds	r3, #8
 800498e:	9307      	str	r3, [sp, #28]
 8004990:	6963      	ldr	r3, [r4, #20]
 8004992:	9a04      	ldr	r2, [sp, #16]
 8004994:	189b      	adds	r3, r3, r2
 8004996:	6163      	str	r3, [r4, #20]
 8004998:	e762      	b.n	8004860 <_vfiprintf_r+0x70>
 800499a:	4343      	muls	r3, r0
 800499c:	002e      	movs	r6, r5
 800499e:	2101      	movs	r1, #1
 80049a0:	189b      	adds	r3, r3, r2
 80049a2:	e7a4      	b.n	80048ee <_vfiprintf_r+0xfe>
 80049a4:	2300      	movs	r3, #0
 80049a6:	200a      	movs	r0, #10
 80049a8:	0019      	movs	r1, r3
 80049aa:	3601      	adds	r6, #1
 80049ac:	6063      	str	r3, [r4, #4]
 80049ae:	7832      	ldrb	r2, [r6, #0]
 80049b0:	1c75      	adds	r5, r6, #1
 80049b2:	3a30      	subs	r2, #48	@ 0x30
 80049b4:	2a09      	cmp	r2, #9
 80049b6:	d903      	bls.n	80049c0 <_vfiprintf_r+0x1d0>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0c8      	beq.n	800494e <_vfiprintf_r+0x15e>
 80049bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80049be:	e7c6      	b.n	800494e <_vfiprintf_r+0x15e>
 80049c0:	4341      	muls	r1, r0
 80049c2:	002e      	movs	r6, r5
 80049c4:	2301      	movs	r3, #1
 80049c6:	1889      	adds	r1, r1, r2
 80049c8:	e7f1      	b.n	80049ae <_vfiprintf_r+0x1be>
 80049ca:	aa07      	add	r2, sp, #28
 80049cc:	9200      	str	r2, [sp, #0]
 80049ce:	0021      	movs	r1, r4
 80049d0:	003a      	movs	r2, r7
 80049d2:	4b14      	ldr	r3, [pc, #80]	@ (8004a24 <_vfiprintf_r+0x234>)
 80049d4:	9803      	ldr	r0, [sp, #12]
 80049d6:	e000      	b.n	80049da <_vfiprintf_r+0x1ea>
 80049d8:	bf00      	nop
 80049da:	9004      	str	r0, [sp, #16]
 80049dc:	9b04      	ldr	r3, [sp, #16]
 80049de:	3301      	adds	r3, #1
 80049e0:	d1d6      	bne.n	8004990 <_vfiprintf_r+0x1a0>
 80049e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049e4:	07db      	lsls	r3, r3, #31
 80049e6:	d405      	bmi.n	80049f4 <_vfiprintf_r+0x204>
 80049e8:	89bb      	ldrh	r3, [r7, #12]
 80049ea:	059b      	lsls	r3, r3, #22
 80049ec:	d402      	bmi.n	80049f4 <_vfiprintf_r+0x204>
 80049ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80049f0:	f7ff fcce 	bl	8004390 <__retarget_lock_release_recursive>
 80049f4:	89bb      	ldrh	r3, [r7, #12]
 80049f6:	065b      	lsls	r3, r3, #25
 80049f8:	d500      	bpl.n	80049fc <_vfiprintf_r+0x20c>
 80049fa:	e71e      	b.n	800483a <_vfiprintf_r+0x4a>
 80049fc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80049fe:	e71e      	b.n	800483e <_vfiprintf_r+0x4e>
 8004a00:	aa07      	add	r2, sp, #28
 8004a02:	9200      	str	r2, [sp, #0]
 8004a04:	0021      	movs	r1, r4
 8004a06:	003a      	movs	r2, r7
 8004a08:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <_vfiprintf_r+0x234>)
 8004a0a:	9803      	ldr	r0, [sp, #12]
 8004a0c:	f000 f87c 	bl	8004b08 <_printf_i>
 8004a10:	e7e3      	b.n	80049da <_vfiprintf_r+0x1ea>
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	0800512b 	.word	0x0800512b
 8004a18:	08005131 	.word	0x08005131
 8004a1c:	08005135 	.word	0x08005135
 8004a20:	00000000 	.word	0x00000000
 8004a24:	080047cd 	.word	0x080047cd

08004a28 <_printf_common>:
 8004a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a2a:	0016      	movs	r6, r2
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	688a      	ldr	r2, [r1, #8]
 8004a30:	690b      	ldr	r3, [r1, #16]
 8004a32:	000c      	movs	r4, r1
 8004a34:	9000      	str	r0, [sp, #0]
 8004a36:	4293      	cmp	r3, r2
 8004a38:	da00      	bge.n	8004a3c <_printf_common+0x14>
 8004a3a:	0013      	movs	r3, r2
 8004a3c:	0022      	movs	r2, r4
 8004a3e:	6033      	str	r3, [r6, #0]
 8004a40:	3243      	adds	r2, #67	@ 0x43
 8004a42:	7812      	ldrb	r2, [r2, #0]
 8004a44:	2a00      	cmp	r2, #0
 8004a46:	d001      	beq.n	8004a4c <_printf_common+0x24>
 8004a48:	3301      	adds	r3, #1
 8004a4a:	6033      	str	r3, [r6, #0]
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	069b      	lsls	r3, r3, #26
 8004a50:	d502      	bpl.n	8004a58 <_printf_common+0x30>
 8004a52:	6833      	ldr	r3, [r6, #0]
 8004a54:	3302      	adds	r3, #2
 8004a56:	6033      	str	r3, [r6, #0]
 8004a58:	6822      	ldr	r2, [r4, #0]
 8004a5a:	2306      	movs	r3, #6
 8004a5c:	0015      	movs	r5, r2
 8004a5e:	401d      	ands	r5, r3
 8004a60:	421a      	tst	r2, r3
 8004a62:	d027      	beq.n	8004ab4 <_printf_common+0x8c>
 8004a64:	0023      	movs	r3, r4
 8004a66:	3343      	adds	r3, #67	@ 0x43
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	1e5a      	subs	r2, r3, #1
 8004a6c:	4193      	sbcs	r3, r2
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	0692      	lsls	r2, r2, #26
 8004a72:	d430      	bmi.n	8004ad6 <_printf_common+0xae>
 8004a74:	0022      	movs	r2, r4
 8004a76:	9901      	ldr	r1, [sp, #4]
 8004a78:	9800      	ldr	r0, [sp, #0]
 8004a7a:	9d08      	ldr	r5, [sp, #32]
 8004a7c:	3243      	adds	r2, #67	@ 0x43
 8004a7e:	47a8      	blx	r5
 8004a80:	3001      	adds	r0, #1
 8004a82:	d025      	beq.n	8004ad0 <_printf_common+0xa8>
 8004a84:	2206      	movs	r2, #6
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	2500      	movs	r5, #0
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d105      	bne.n	8004a9c <_printf_common+0x74>
 8004a90:	6833      	ldr	r3, [r6, #0]
 8004a92:	68e5      	ldr	r5, [r4, #12]
 8004a94:	1aed      	subs	r5, r5, r3
 8004a96:	43eb      	mvns	r3, r5
 8004a98:	17db      	asrs	r3, r3, #31
 8004a9a:	401d      	ands	r5, r3
 8004a9c:	68a3      	ldr	r3, [r4, #8]
 8004a9e:	6922      	ldr	r2, [r4, #16]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	dd01      	ble.n	8004aa8 <_printf_common+0x80>
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	18ed      	adds	r5, r5, r3
 8004aa8:	2600      	movs	r6, #0
 8004aaa:	42b5      	cmp	r5, r6
 8004aac:	d120      	bne.n	8004af0 <_printf_common+0xc8>
 8004aae:	2000      	movs	r0, #0
 8004ab0:	e010      	b.n	8004ad4 <_printf_common+0xac>
 8004ab2:	3501      	adds	r5, #1
 8004ab4:	68e3      	ldr	r3, [r4, #12]
 8004ab6:	6832      	ldr	r2, [r6, #0]
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	42ab      	cmp	r3, r5
 8004abc:	ddd2      	ble.n	8004a64 <_printf_common+0x3c>
 8004abe:	0022      	movs	r2, r4
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	9901      	ldr	r1, [sp, #4]
 8004ac4:	9800      	ldr	r0, [sp, #0]
 8004ac6:	9f08      	ldr	r7, [sp, #32]
 8004ac8:	3219      	adds	r2, #25
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	d1f0      	bne.n	8004ab2 <_printf_common+0x8a>
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	4240      	negs	r0, r0
 8004ad4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ad6:	2030      	movs	r0, #48	@ 0x30
 8004ad8:	18e1      	adds	r1, r4, r3
 8004ada:	3143      	adds	r1, #67	@ 0x43
 8004adc:	7008      	strb	r0, [r1, #0]
 8004ade:	0021      	movs	r1, r4
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	3145      	adds	r1, #69	@ 0x45
 8004ae4:	7809      	ldrb	r1, [r1, #0]
 8004ae6:	18a2      	adds	r2, r4, r2
 8004ae8:	3243      	adds	r2, #67	@ 0x43
 8004aea:	3302      	adds	r3, #2
 8004aec:	7011      	strb	r1, [r2, #0]
 8004aee:	e7c1      	b.n	8004a74 <_printf_common+0x4c>
 8004af0:	0022      	movs	r2, r4
 8004af2:	2301      	movs	r3, #1
 8004af4:	9901      	ldr	r1, [sp, #4]
 8004af6:	9800      	ldr	r0, [sp, #0]
 8004af8:	9f08      	ldr	r7, [sp, #32]
 8004afa:	321a      	adds	r2, #26
 8004afc:	47b8      	blx	r7
 8004afe:	3001      	adds	r0, #1
 8004b00:	d0e6      	beq.n	8004ad0 <_printf_common+0xa8>
 8004b02:	3601      	adds	r6, #1
 8004b04:	e7d1      	b.n	8004aaa <_printf_common+0x82>
	...

08004b08 <_printf_i>:
 8004b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0a:	b08b      	sub	sp, #44	@ 0x2c
 8004b0c:	9206      	str	r2, [sp, #24]
 8004b0e:	000a      	movs	r2, r1
 8004b10:	3243      	adds	r2, #67	@ 0x43
 8004b12:	9307      	str	r3, [sp, #28]
 8004b14:	9005      	str	r0, [sp, #20]
 8004b16:	9203      	str	r2, [sp, #12]
 8004b18:	7e0a      	ldrb	r2, [r1, #24]
 8004b1a:	000c      	movs	r4, r1
 8004b1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004b1e:	2a78      	cmp	r2, #120	@ 0x78
 8004b20:	d809      	bhi.n	8004b36 <_printf_i+0x2e>
 8004b22:	2a62      	cmp	r2, #98	@ 0x62
 8004b24:	d80b      	bhi.n	8004b3e <_printf_i+0x36>
 8004b26:	2a00      	cmp	r2, #0
 8004b28:	d100      	bne.n	8004b2c <_printf_i+0x24>
 8004b2a:	e0bc      	b.n	8004ca6 <_printf_i+0x19e>
 8004b2c:	497b      	ldr	r1, [pc, #492]	@ (8004d1c <_printf_i+0x214>)
 8004b2e:	9104      	str	r1, [sp, #16]
 8004b30:	2a58      	cmp	r2, #88	@ 0x58
 8004b32:	d100      	bne.n	8004b36 <_printf_i+0x2e>
 8004b34:	e090      	b.n	8004c58 <_printf_i+0x150>
 8004b36:	0025      	movs	r5, r4
 8004b38:	3542      	adds	r5, #66	@ 0x42
 8004b3a:	702a      	strb	r2, [r5, #0]
 8004b3c:	e022      	b.n	8004b84 <_printf_i+0x7c>
 8004b3e:	0010      	movs	r0, r2
 8004b40:	3863      	subs	r0, #99	@ 0x63
 8004b42:	2815      	cmp	r0, #21
 8004b44:	d8f7      	bhi.n	8004b36 <_printf_i+0x2e>
 8004b46:	f7fb fadf 	bl	8000108 <__gnu_thumb1_case_shi>
 8004b4a:	0016      	.short	0x0016
 8004b4c:	fff6001f 	.word	0xfff6001f
 8004b50:	fff6fff6 	.word	0xfff6fff6
 8004b54:	001ffff6 	.word	0x001ffff6
 8004b58:	fff6fff6 	.word	0xfff6fff6
 8004b5c:	fff6fff6 	.word	0xfff6fff6
 8004b60:	003600a1 	.word	0x003600a1
 8004b64:	fff60080 	.word	0xfff60080
 8004b68:	00b2fff6 	.word	0x00b2fff6
 8004b6c:	0036fff6 	.word	0x0036fff6
 8004b70:	fff6fff6 	.word	0xfff6fff6
 8004b74:	0084      	.short	0x0084
 8004b76:	0025      	movs	r5, r4
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	3542      	adds	r5, #66	@ 0x42
 8004b7c:	1d11      	adds	r1, r2, #4
 8004b7e:	6019      	str	r1, [r3, #0]
 8004b80:	6813      	ldr	r3, [r2, #0]
 8004b82:	702b      	strb	r3, [r5, #0]
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0a0      	b.n	8004cca <_printf_i+0x1c2>
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	6809      	ldr	r1, [r1, #0]
 8004b8c:	1d02      	adds	r2, r0, #4
 8004b8e:	060d      	lsls	r5, r1, #24
 8004b90:	d50b      	bpl.n	8004baa <_printf_i+0xa2>
 8004b92:	6806      	ldr	r6, [r0, #0]
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	2e00      	cmp	r6, #0
 8004b98:	da03      	bge.n	8004ba2 <_printf_i+0x9a>
 8004b9a:	232d      	movs	r3, #45	@ 0x2d
 8004b9c:	9a03      	ldr	r2, [sp, #12]
 8004b9e:	4276      	negs	r6, r6
 8004ba0:	7013      	strb	r3, [r2, #0]
 8004ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8004d1c <_printf_i+0x214>)
 8004ba4:	270a      	movs	r7, #10
 8004ba6:	9304      	str	r3, [sp, #16]
 8004ba8:	e018      	b.n	8004bdc <_printf_i+0xd4>
 8004baa:	6806      	ldr	r6, [r0, #0]
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	0649      	lsls	r1, r1, #25
 8004bb0:	d5f1      	bpl.n	8004b96 <_printf_i+0x8e>
 8004bb2:	b236      	sxth	r6, r6
 8004bb4:	e7ef      	b.n	8004b96 <_printf_i+0x8e>
 8004bb6:	6808      	ldr	r0, [r1, #0]
 8004bb8:	6819      	ldr	r1, [r3, #0]
 8004bba:	c940      	ldmia	r1!, {r6}
 8004bbc:	0605      	lsls	r5, r0, #24
 8004bbe:	d402      	bmi.n	8004bc6 <_printf_i+0xbe>
 8004bc0:	0640      	lsls	r0, r0, #25
 8004bc2:	d500      	bpl.n	8004bc6 <_printf_i+0xbe>
 8004bc4:	b2b6      	uxth	r6, r6
 8004bc6:	6019      	str	r1, [r3, #0]
 8004bc8:	4b54      	ldr	r3, [pc, #336]	@ (8004d1c <_printf_i+0x214>)
 8004bca:	270a      	movs	r7, #10
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	2a6f      	cmp	r2, #111	@ 0x6f
 8004bd0:	d100      	bne.n	8004bd4 <_printf_i+0xcc>
 8004bd2:	3f02      	subs	r7, #2
 8004bd4:	0023      	movs	r3, r4
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	3343      	adds	r3, #67	@ 0x43
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	60a3      	str	r3, [r4, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	db03      	blt.n	8004bec <_printf_i+0xe4>
 8004be4:	2104      	movs	r1, #4
 8004be6:	6822      	ldr	r2, [r4, #0]
 8004be8:	438a      	bics	r2, r1
 8004bea:	6022      	str	r2, [r4, #0]
 8004bec:	2e00      	cmp	r6, #0
 8004bee:	d102      	bne.n	8004bf6 <_printf_i+0xee>
 8004bf0:	9d03      	ldr	r5, [sp, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00c      	beq.n	8004c10 <_printf_i+0x108>
 8004bf6:	9d03      	ldr	r5, [sp, #12]
 8004bf8:	0030      	movs	r0, r6
 8004bfa:	0039      	movs	r1, r7
 8004bfc:	f7fb fb14 	bl	8000228 <__aeabi_uidivmod>
 8004c00:	9b04      	ldr	r3, [sp, #16]
 8004c02:	3d01      	subs	r5, #1
 8004c04:	5c5b      	ldrb	r3, [r3, r1]
 8004c06:	702b      	strb	r3, [r5, #0]
 8004c08:	0033      	movs	r3, r6
 8004c0a:	0006      	movs	r6, r0
 8004c0c:	429f      	cmp	r7, r3
 8004c0e:	d9f3      	bls.n	8004bf8 <_printf_i+0xf0>
 8004c10:	2f08      	cmp	r7, #8
 8004c12:	d109      	bne.n	8004c28 <_printf_i+0x120>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	07db      	lsls	r3, r3, #31
 8004c18:	d506      	bpl.n	8004c28 <_printf_i+0x120>
 8004c1a:	6862      	ldr	r2, [r4, #4]
 8004c1c:	6923      	ldr	r3, [r4, #16]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	dc02      	bgt.n	8004c28 <_printf_i+0x120>
 8004c22:	2330      	movs	r3, #48	@ 0x30
 8004c24:	3d01      	subs	r5, #1
 8004c26:	702b      	strb	r3, [r5, #0]
 8004c28:	9b03      	ldr	r3, [sp, #12]
 8004c2a:	1b5b      	subs	r3, r3, r5
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	9b07      	ldr	r3, [sp, #28]
 8004c30:	0021      	movs	r1, r4
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	9805      	ldr	r0, [sp, #20]
 8004c36:	9b06      	ldr	r3, [sp, #24]
 8004c38:	aa09      	add	r2, sp, #36	@ 0x24
 8004c3a:	f7ff fef5 	bl	8004a28 <_printf_common>
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d148      	bne.n	8004cd4 <_printf_i+0x1cc>
 8004c42:	2001      	movs	r0, #1
 8004c44:	4240      	negs	r0, r0
 8004c46:	b00b      	add	sp, #44	@ 0x2c
 8004c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	6809      	ldr	r1, [r1, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	6022      	str	r2, [r4, #0]
 8004c52:	2278      	movs	r2, #120	@ 0x78
 8004c54:	4932      	ldr	r1, [pc, #200]	@ (8004d20 <_printf_i+0x218>)
 8004c56:	9104      	str	r1, [sp, #16]
 8004c58:	0021      	movs	r1, r4
 8004c5a:	3145      	adds	r1, #69	@ 0x45
 8004c5c:	700a      	strb	r2, [r1, #0]
 8004c5e:	6819      	ldr	r1, [r3, #0]
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	c940      	ldmia	r1!, {r6}
 8004c64:	0610      	lsls	r0, r2, #24
 8004c66:	d402      	bmi.n	8004c6e <_printf_i+0x166>
 8004c68:	0650      	lsls	r0, r2, #25
 8004c6a:	d500      	bpl.n	8004c6e <_printf_i+0x166>
 8004c6c:	b2b6      	uxth	r6, r6
 8004c6e:	6019      	str	r1, [r3, #0]
 8004c70:	07d3      	lsls	r3, r2, #31
 8004c72:	d502      	bpl.n	8004c7a <_printf_i+0x172>
 8004c74:	2320      	movs	r3, #32
 8004c76:	4313      	orrs	r3, r2
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	2e00      	cmp	r6, #0
 8004c7c:	d001      	beq.n	8004c82 <_printf_i+0x17a>
 8004c7e:	2710      	movs	r7, #16
 8004c80:	e7a8      	b.n	8004bd4 <_printf_i+0xcc>
 8004c82:	2220      	movs	r2, #32
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	4393      	bics	r3, r2
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	e7f8      	b.n	8004c7e <_printf_i+0x176>
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	680d      	ldr	r5, [r1, #0]
 8004c90:	1d10      	adds	r0, r2, #4
 8004c92:	6949      	ldr	r1, [r1, #20]
 8004c94:	6018      	str	r0, [r3, #0]
 8004c96:	6813      	ldr	r3, [r2, #0]
 8004c98:	062e      	lsls	r6, r5, #24
 8004c9a:	d501      	bpl.n	8004ca0 <_printf_i+0x198>
 8004c9c:	6019      	str	r1, [r3, #0]
 8004c9e:	e002      	b.n	8004ca6 <_printf_i+0x19e>
 8004ca0:	066d      	lsls	r5, r5, #25
 8004ca2:	d5fb      	bpl.n	8004c9c <_printf_i+0x194>
 8004ca4:	8019      	strh	r1, [r3, #0]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9d03      	ldr	r5, [sp, #12]
 8004caa:	6123      	str	r3, [r4, #16]
 8004cac:	e7bf      	b.n	8004c2e <_printf_i+0x126>
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	1d11      	adds	r1, r2, #4
 8004cb2:	6019      	str	r1, [r3, #0]
 8004cb4:	6815      	ldr	r5, [r2, #0]
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	0028      	movs	r0, r5
 8004cba:	6862      	ldr	r2, [r4, #4]
 8004cbc:	f000 f91c 	bl	8004ef8 <memchr>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d001      	beq.n	8004cc8 <_printf_i+0x1c0>
 8004cc4:	1b40      	subs	r0, r0, r5
 8004cc6:	6060      	str	r0, [r4, #4]
 8004cc8:	6863      	ldr	r3, [r4, #4]
 8004cca:	6123      	str	r3, [r4, #16]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	9a03      	ldr	r2, [sp, #12]
 8004cd0:	7013      	strb	r3, [r2, #0]
 8004cd2:	e7ac      	b.n	8004c2e <_printf_i+0x126>
 8004cd4:	002a      	movs	r2, r5
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	9906      	ldr	r1, [sp, #24]
 8004cda:	9805      	ldr	r0, [sp, #20]
 8004cdc:	9d07      	ldr	r5, [sp, #28]
 8004cde:	47a8      	blx	r5
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d0ae      	beq.n	8004c42 <_printf_i+0x13a>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	079b      	lsls	r3, r3, #30
 8004ce8:	d415      	bmi.n	8004d16 <_printf_i+0x20e>
 8004cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cec:	68e0      	ldr	r0, [r4, #12]
 8004cee:	4298      	cmp	r0, r3
 8004cf0:	daa9      	bge.n	8004c46 <_printf_i+0x13e>
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	e7a7      	b.n	8004c46 <_printf_i+0x13e>
 8004cf6:	0022      	movs	r2, r4
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	9906      	ldr	r1, [sp, #24]
 8004cfc:	9805      	ldr	r0, [sp, #20]
 8004cfe:	9e07      	ldr	r6, [sp, #28]
 8004d00:	3219      	adds	r2, #25
 8004d02:	47b0      	blx	r6
 8004d04:	3001      	adds	r0, #1
 8004d06:	d09c      	beq.n	8004c42 <_printf_i+0x13a>
 8004d08:	3501      	adds	r5, #1
 8004d0a:	68e3      	ldr	r3, [r4, #12]
 8004d0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	42ab      	cmp	r3, r5
 8004d12:	dcf0      	bgt.n	8004cf6 <_printf_i+0x1ee>
 8004d14:	e7e9      	b.n	8004cea <_printf_i+0x1e2>
 8004d16:	2500      	movs	r5, #0
 8004d18:	e7f7      	b.n	8004d0a <_printf_i+0x202>
 8004d1a:	46c0      	nop			@ (mov r8, r8)
 8004d1c:	0800513c 	.word	0x0800513c
 8004d20:	0800514d 	.word	0x0800514d

08004d24 <__swbuf_r>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	0006      	movs	r6, r0
 8004d28:	000d      	movs	r5, r1
 8004d2a:	0014      	movs	r4, r2
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d004      	beq.n	8004d3a <__swbuf_r+0x16>
 8004d30:	6a03      	ldr	r3, [r0, #32]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <__swbuf_r+0x16>
 8004d36:	f7ff fa1b 	bl	8004170 <__sinit>
 8004d3a:	69a3      	ldr	r3, [r4, #24]
 8004d3c:	60a3      	str	r3, [r4, #8]
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	071b      	lsls	r3, r3, #28
 8004d42:	d502      	bpl.n	8004d4a <__swbuf_r+0x26>
 8004d44:	6923      	ldr	r3, [r4, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <__swbuf_r+0x3a>
 8004d4a:	0021      	movs	r1, r4
 8004d4c:	0030      	movs	r0, r6
 8004d4e:	f000 f82b 	bl	8004da8 <__swsetup_r>
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d003      	beq.n	8004d5e <__swbuf_r+0x3a>
 8004d56:	2501      	movs	r5, #1
 8004d58:	426d      	negs	r5, r5
 8004d5a:	0028      	movs	r0, r5
 8004d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	6820      	ldr	r0, [r4, #0]
 8004d62:	b2ef      	uxtb	r7, r5
 8004d64:	1ac0      	subs	r0, r0, r3
 8004d66:	6963      	ldr	r3, [r4, #20]
 8004d68:	b2ed      	uxtb	r5, r5
 8004d6a:	4283      	cmp	r3, r0
 8004d6c:	dc05      	bgt.n	8004d7a <__swbuf_r+0x56>
 8004d6e:	0021      	movs	r1, r4
 8004d70:	0030      	movs	r0, r6
 8004d72:	f7ff fcc1 	bl	80046f8 <_fflush_r>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d1ed      	bne.n	8004d56 <__swbuf_r+0x32>
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	60a3      	str	r3, [r4, #8]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	6022      	str	r2, [r4, #0]
 8004d88:	701f      	strb	r7, [r3, #0]
 8004d8a:	6963      	ldr	r3, [r4, #20]
 8004d8c:	4283      	cmp	r3, r0
 8004d8e:	d004      	beq.n	8004d9a <__swbuf_r+0x76>
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	07db      	lsls	r3, r3, #31
 8004d94:	d5e1      	bpl.n	8004d5a <__swbuf_r+0x36>
 8004d96:	2d0a      	cmp	r5, #10
 8004d98:	d1df      	bne.n	8004d5a <__swbuf_r+0x36>
 8004d9a:	0021      	movs	r1, r4
 8004d9c:	0030      	movs	r0, r6
 8004d9e:	f7ff fcab 	bl	80046f8 <_fflush_r>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d0d9      	beq.n	8004d5a <__swbuf_r+0x36>
 8004da6:	e7d6      	b.n	8004d56 <__swbuf_r+0x32>

08004da8 <__swsetup_r>:
 8004da8:	4b2d      	ldr	r3, [pc, #180]	@ (8004e60 <__swsetup_r+0xb8>)
 8004daa:	b570      	push	{r4, r5, r6, lr}
 8004dac:	0005      	movs	r5, r0
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	000c      	movs	r4, r1
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d004      	beq.n	8004dc0 <__swsetup_r+0x18>
 8004db6:	6a03      	ldr	r3, [r0, #32]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <__swsetup_r+0x18>
 8004dbc:	f7ff f9d8 	bl	8004170 <__sinit>
 8004dc0:	230c      	movs	r3, #12
 8004dc2:	5ee2      	ldrsh	r2, [r4, r3]
 8004dc4:	0713      	lsls	r3, r2, #28
 8004dc6:	d423      	bmi.n	8004e10 <__swsetup_r+0x68>
 8004dc8:	06d3      	lsls	r3, r2, #27
 8004dca:	d407      	bmi.n	8004ddc <__swsetup_r+0x34>
 8004dcc:	2309      	movs	r3, #9
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	2340      	movs	r3, #64	@ 0x40
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	4240      	negs	r0, r0
 8004dda:	e03a      	b.n	8004e52 <__swsetup_r+0xaa>
 8004ddc:	0752      	lsls	r2, r2, #29
 8004dde:	d513      	bpl.n	8004e08 <__swsetup_r+0x60>
 8004de0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004de2:	2900      	cmp	r1, #0
 8004de4:	d008      	beq.n	8004df8 <__swsetup_r+0x50>
 8004de6:	0023      	movs	r3, r4
 8004de8:	3344      	adds	r3, #68	@ 0x44
 8004dea:	4299      	cmp	r1, r3
 8004dec:	d002      	beq.n	8004df4 <__swsetup_r+0x4c>
 8004dee:	0028      	movs	r0, r5
 8004df0:	f7ff faf6 	bl	80043e0 <_free_r>
 8004df4:	2300      	movs	r3, #0
 8004df6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004df8:	2224      	movs	r2, #36	@ 0x24
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	4393      	bics	r3, r2
 8004dfe:	81a3      	strh	r3, [r4, #12]
 8004e00:	2300      	movs	r3, #0
 8004e02:	6063      	str	r3, [r4, #4]
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	2308      	movs	r3, #8
 8004e0a:	89a2      	ldrh	r2, [r4, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <__swsetup_r+0x86>
 8004e16:	21a0      	movs	r1, #160	@ 0xa0
 8004e18:	2280      	movs	r2, #128	@ 0x80
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	0089      	lsls	r1, r1, #2
 8004e1e:	0092      	lsls	r2, r2, #2
 8004e20:	400b      	ands	r3, r1
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <__swsetup_r+0x86>
 8004e26:	0021      	movs	r1, r4
 8004e28:	0028      	movs	r0, r5
 8004e2a:	f000 f89b 	bl	8004f64 <__smakebuf_r>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	5ee2      	ldrsh	r2, [r4, r3]
 8004e32:	2101      	movs	r1, #1
 8004e34:	0013      	movs	r3, r2
 8004e36:	400b      	ands	r3, r1
 8004e38:	420a      	tst	r2, r1
 8004e3a:	d00b      	beq.n	8004e54 <__swsetup_r+0xac>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60a3      	str	r3, [r4, #8]
 8004e40:	6963      	ldr	r3, [r4, #20]
 8004e42:	425b      	negs	r3, r3
 8004e44:	61a3      	str	r3, [r4, #24]
 8004e46:	2000      	movs	r0, #0
 8004e48:	6923      	ldr	r3, [r4, #16]
 8004e4a:	4283      	cmp	r3, r0
 8004e4c:	d101      	bne.n	8004e52 <__swsetup_r+0xaa>
 8004e4e:	0613      	lsls	r3, r2, #24
 8004e50:	d4be      	bmi.n	8004dd0 <__swsetup_r+0x28>
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	0791      	lsls	r1, r2, #30
 8004e56:	d400      	bmi.n	8004e5a <__swsetup_r+0xb2>
 8004e58:	6963      	ldr	r3, [r4, #20]
 8004e5a:	60a3      	str	r3, [r4, #8]
 8004e5c:	e7f3      	b.n	8004e46 <__swsetup_r+0x9e>
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	20000030 	.word	0x20000030

08004e64 <_raise_r>:
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	0004      	movs	r4, r0
 8004e68:	000d      	movs	r5, r1
 8004e6a:	291f      	cmp	r1, #31
 8004e6c:	d904      	bls.n	8004e78 <_raise_r+0x14>
 8004e6e:	2316      	movs	r3, #22
 8004e70:	6003      	str	r3, [r0, #0]
 8004e72:	2001      	movs	r0, #1
 8004e74:	4240      	negs	r0, r0
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d004      	beq.n	8004e88 <_raise_r+0x24>
 8004e7e:	008a      	lsls	r2, r1, #2
 8004e80:	189b      	adds	r3, r3, r2
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	d108      	bne.n	8004e9a <_raise_r+0x36>
 8004e88:	0020      	movs	r0, r4
 8004e8a:	f000 f831 	bl	8004ef0 <_getpid_r>
 8004e8e:	002a      	movs	r2, r5
 8004e90:	0001      	movs	r1, r0
 8004e92:	0020      	movs	r0, r4
 8004e94:	f000 f81a 	bl	8004ecc <_kill_r>
 8004e98:	e7ed      	b.n	8004e76 <_raise_r+0x12>
 8004e9a:	2a01      	cmp	r2, #1
 8004e9c:	d009      	beq.n	8004eb2 <_raise_r+0x4e>
 8004e9e:	1c51      	adds	r1, r2, #1
 8004ea0:	d103      	bne.n	8004eaa <_raise_r+0x46>
 8004ea2:	2316      	movs	r3, #22
 8004ea4:	6003      	str	r3, [r0, #0]
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	e7e5      	b.n	8004e76 <_raise_r+0x12>
 8004eaa:	2100      	movs	r1, #0
 8004eac:	0028      	movs	r0, r5
 8004eae:	6019      	str	r1, [r3, #0]
 8004eb0:	4790      	blx	r2
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	e7df      	b.n	8004e76 <_raise_r+0x12>
	...

08004eb8 <raise>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4b03      	ldr	r3, [pc, #12]	@ (8004ec8 <raise+0x10>)
 8004ebc:	0001      	movs	r1, r0
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	f7ff ffd0 	bl	8004e64 <_raise_r>
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	20000030 	.word	0x20000030

08004ecc <_kill_r>:
 8004ecc:	2300      	movs	r3, #0
 8004ece:	b570      	push	{r4, r5, r6, lr}
 8004ed0:	4d06      	ldr	r5, [pc, #24]	@ (8004eec <_kill_r+0x20>)
 8004ed2:	0004      	movs	r4, r0
 8004ed4:	0008      	movs	r0, r1
 8004ed6:	0011      	movs	r1, r2
 8004ed8:	602b      	str	r3, [r5, #0]
 8004eda:	f7fc fd2d 	bl	8001938 <_kill>
 8004ede:	1c43      	adds	r3, r0, #1
 8004ee0:	d103      	bne.n	8004eea <_kill_r+0x1e>
 8004ee2:	682b      	ldr	r3, [r5, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d000      	beq.n	8004eea <_kill_r+0x1e>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd70      	pop	{r4, r5, r6, pc}
 8004eec:	200003f0 	.word	0x200003f0

08004ef0 <_getpid_r>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	f7fc fd1b 	bl	800192c <_getpid>
 8004ef6:	bd10      	pop	{r4, pc}

08004ef8 <memchr>:
 8004ef8:	b2c9      	uxtb	r1, r1
 8004efa:	1882      	adds	r2, r0, r2
 8004efc:	4290      	cmp	r0, r2
 8004efe:	d101      	bne.n	8004f04 <memchr+0xc>
 8004f00:	2000      	movs	r0, #0
 8004f02:	4770      	bx	lr
 8004f04:	7803      	ldrb	r3, [r0, #0]
 8004f06:	428b      	cmp	r3, r1
 8004f08:	d0fb      	beq.n	8004f02 <memchr+0xa>
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	e7f6      	b.n	8004efc <memchr+0x4>
	...

08004f10 <__swhatbuf_r>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	000e      	movs	r6, r1
 8004f14:	001d      	movs	r5, r3
 8004f16:	230e      	movs	r3, #14
 8004f18:	5ec9      	ldrsh	r1, [r1, r3]
 8004f1a:	0014      	movs	r4, r2
 8004f1c:	b096      	sub	sp, #88	@ 0x58
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	da0c      	bge.n	8004f3c <__swhatbuf_r+0x2c>
 8004f22:	89b2      	ldrh	r2, [r6, #12]
 8004f24:	2380      	movs	r3, #128	@ 0x80
 8004f26:	0011      	movs	r1, r2
 8004f28:	4019      	ands	r1, r3
 8004f2a:	421a      	tst	r2, r3
 8004f2c:	d114      	bne.n	8004f58 <__swhatbuf_r+0x48>
 8004f2e:	2380      	movs	r3, #128	@ 0x80
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	2000      	movs	r0, #0
 8004f34:	6029      	str	r1, [r5, #0]
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	b016      	add	sp, #88	@ 0x58
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	466a      	mov	r2, sp
 8004f3e:	f000 f853 	bl	8004fe8 <_fstat_r>
 8004f42:	2800      	cmp	r0, #0
 8004f44:	dbed      	blt.n	8004f22 <__swhatbuf_r+0x12>
 8004f46:	23f0      	movs	r3, #240	@ 0xf0
 8004f48:	9901      	ldr	r1, [sp, #4]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	4019      	ands	r1, r3
 8004f4e:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <__swhatbuf_r+0x50>)
 8004f50:	18c9      	adds	r1, r1, r3
 8004f52:	424b      	negs	r3, r1
 8004f54:	4159      	adcs	r1, r3
 8004f56:	e7ea      	b.n	8004f2e <__swhatbuf_r+0x1e>
 8004f58:	2100      	movs	r1, #0
 8004f5a:	2340      	movs	r3, #64	@ 0x40
 8004f5c:	e7e9      	b.n	8004f32 <__swhatbuf_r+0x22>
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	ffffe000 	.word	0xffffe000

08004f64 <__smakebuf_r>:
 8004f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f66:	2602      	movs	r6, #2
 8004f68:	898b      	ldrh	r3, [r1, #12]
 8004f6a:	0005      	movs	r5, r0
 8004f6c:	000c      	movs	r4, r1
 8004f6e:	b085      	sub	sp, #20
 8004f70:	4233      	tst	r3, r6
 8004f72:	d007      	beq.n	8004f84 <__smakebuf_r+0x20>
 8004f74:	0023      	movs	r3, r4
 8004f76:	3347      	adds	r3, #71	@ 0x47
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	6163      	str	r3, [r4, #20]
 8004f80:	b005      	add	sp, #20
 8004f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f84:	ab03      	add	r3, sp, #12
 8004f86:	aa02      	add	r2, sp, #8
 8004f88:	f7ff ffc2 	bl	8004f10 <__swhatbuf_r>
 8004f8c:	9f02      	ldr	r7, [sp, #8]
 8004f8e:	9001      	str	r0, [sp, #4]
 8004f90:	0039      	movs	r1, r7
 8004f92:	0028      	movs	r0, r5
 8004f94:	f7ff fa9a 	bl	80044cc <_malloc_r>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d108      	bne.n	8004fae <__smakebuf_r+0x4a>
 8004f9c:	220c      	movs	r2, #12
 8004f9e:	5ea3      	ldrsh	r3, [r4, r2]
 8004fa0:	059a      	lsls	r2, r3, #22
 8004fa2:	d4ed      	bmi.n	8004f80 <__smakebuf_r+0x1c>
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	4393      	bics	r3, r2
 8004fa8:	431e      	orrs	r6, r3
 8004faa:	81a6      	strh	r6, [r4, #12]
 8004fac:	e7e2      	b.n	8004f74 <__smakebuf_r+0x10>
 8004fae:	2380      	movs	r3, #128	@ 0x80
 8004fb0:	89a2      	ldrh	r2, [r4, #12]
 8004fb2:	6020      	str	r0, [r4, #0]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	9b03      	ldr	r3, [sp, #12]
 8004fba:	6120      	str	r0, [r4, #16]
 8004fbc:	6167      	str	r7, [r4, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <__smakebuf_r+0x78>
 8004fc2:	0028      	movs	r0, r5
 8004fc4:	230e      	movs	r3, #14
 8004fc6:	5ee1      	ldrsh	r1, [r4, r3]
 8004fc8:	f000 f820 	bl	800500c <_isatty_r>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d005      	beq.n	8004fdc <__smakebuf_r+0x78>
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	89a2      	ldrh	r2, [r4, #12]
 8004fd4:	439a      	bics	r2, r3
 8004fd6:	3b02      	subs	r3, #2
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	9a01      	ldr	r2, [sp, #4]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	81a3      	strh	r3, [r4, #12]
 8004fe4:	e7cc      	b.n	8004f80 <__smakebuf_r+0x1c>
	...

08004fe8 <_fstat_r>:
 8004fe8:	2300      	movs	r3, #0
 8004fea:	b570      	push	{r4, r5, r6, lr}
 8004fec:	4d06      	ldr	r5, [pc, #24]	@ (8005008 <_fstat_r+0x20>)
 8004fee:	0004      	movs	r4, r0
 8004ff0:	0008      	movs	r0, r1
 8004ff2:	0011      	movs	r1, r2
 8004ff4:	602b      	str	r3, [r5, #0]
 8004ff6:	f7fc fcff 	bl	80019f8 <_fstat>
 8004ffa:	1c43      	adds	r3, r0, #1
 8004ffc:	d103      	bne.n	8005006 <_fstat_r+0x1e>
 8004ffe:	682b      	ldr	r3, [r5, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d000      	beq.n	8005006 <_fstat_r+0x1e>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	200003f0 	.word	0x200003f0

0800500c <_isatty_r>:
 800500c:	2300      	movs	r3, #0
 800500e:	b570      	push	{r4, r5, r6, lr}
 8005010:	4d06      	ldr	r5, [pc, #24]	@ (800502c <_isatty_r+0x20>)
 8005012:	0004      	movs	r4, r0
 8005014:	0008      	movs	r0, r1
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	f7fc fcfc 	bl	8001a14 <_isatty>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d103      	bne.n	8005028 <_isatty_r+0x1c>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d000      	beq.n	8005028 <_isatty_r+0x1c>
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	bd70      	pop	{r4, r5, r6, pc}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	200003f0 	.word	0x200003f0

08005030 <_init>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	46c0      	nop			@ (mov r8, r8)
 8005034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005036:	bc08      	pop	{r3}
 8005038:	469e      	mov	lr, r3
 800503a:	4770      	bx	lr

0800503c <_fini>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005042:	bc08      	pop	{r3}
 8005044:	469e      	mov	lr, r3
 8005046:	4770      	bx	lr
