
Magnet_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004170  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004230  08004230  00005230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004348  08004348  0000607c  2**0
                  CONTENTS
  4 .ARM          00000000  08004348  08004348  0000607c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004348  08004348  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004348  08004348  00005348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800434c  0800434c  0000534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08004350  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000007c  080043cc  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080043cc  000062c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c457  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5d  00000000  00000000  000124fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00014158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000975  00000000  00000000  00014d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113e7  00000000  00000000  000156dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6c9  00000000  00000000  00026ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006702d  00000000  00000000  0003518d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c1ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f8  00000000  00000000  0009c200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0009f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004218 	.word	0x08004218

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08004218 	.word	0x08004218

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1824      	adds	r4, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	42a3      	cmp	r3, r4
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0424      	lsls	r4, r4, #16
 8000456:	1960      	adds	r0, r4, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b087      	sub	sp, #28
 8000468:	af00      	add	r7, sp, #0
 800046a:	0004      	movs	r4, r0
 800046c:	0008      	movs	r0, r1
 800046e:	0011      	movs	r1, r2
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	1c22      	adds	r2, r4, #0
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	1dbb      	adds	r3, r7, #6
 8000478:	1c02      	adds	r2, r0, #0
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	1d7b      	adds	r3, r7, #5
 800047e:	1c0a      	adds	r2, r1, #0
 8000480:	701a      	strb	r2, [r3, #0]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8000482:	1dfb      	adds	r3, r7, #7
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b29a      	uxth	r2, r3
 8000488:	1dbb      	adds	r3, r7, #6
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b29b      	uxth	r3, r3
 800048e:	18d3      	adds	r3, r2, r3
 8000490:	b29a      	uxth	r2, r3
 8000492:	1d7b      	adds	r3, r7, #5
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	b29b      	uxth	r3, r3
 8000498:	18d3      	adds	r3, r2, r3
 800049a:	b29a      	uxth	r2, r3
 800049c:	2016      	movs	r0, #22
 800049e:	183b      	adds	r3, r7, r0
 80004a0:	3206      	adds	r2, #6
 80004a2:	32ff      	adds	r2, #255	@ 0xff
 80004a4:	801a      	strh	r2, [r3, #0]
	Checksum = 0-Checksum;
 80004a6:	183b      	adds	r3, r7, r0
 80004a8:	183a      	adds	r2, r7, r0
 80004aa:	8812      	ldrh	r2, [r2, #0]
 80004ac:	4252      	negs	r2, r2
 80004ae:	801a      	strh	r2, [r3, #0]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 80004b0:	210c      	movs	r1, #12
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	227e      	movs	r2, #126	@ 0x7e
 80004b6:	701a      	strb	r2, [r3, #0]
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	22ff      	movs	r2, #255	@ 0xff
 80004bc:	705a      	strb	r2, [r3, #1]
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2206      	movs	r2, #6
 80004c2:	709a      	strb	r2, [r3, #2]
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	1dfa      	adds	r2, r7, #7
 80004c8:	7812      	ldrb	r2, [r2, #0]
 80004ca:	70da      	strb	r2, [r3, #3]
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	711a      	strb	r2, [r3, #4]
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	1dba      	adds	r2, r7, #6
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	715a      	strb	r2, [r3, #5]
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	1d7a      	adds	r2, r7, #5
 80004de:	7812      	ldrb	r2, [r2, #0]
 80004e0:	719a      	strb	r2, [r3, #6]
 80004e2:	183b      	adds	r3, r7, r0
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	71da      	strb	r2, [r3, #7]
 80004f0:	183b      	adds	r3, r7, r0
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	721a      	strb	r2, [r3, #8]
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	22ef      	movs	r2, #239	@ 0xef
 80004fe:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 8000500:	2301      	movs	r3, #1
 8000502:	425b      	negs	r3, r3
 8000504:	1879      	adds	r1, r7, r1
 8000506:	4804      	ldr	r0, [pc, #16]	@ (8000518 <Send_cmd+0xb4>)
 8000508:	220a      	movs	r2, #10
 800050a:	f002 fa2d 	bl	8002968 <HAL_UART_Transmit>
}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b007      	add	sp, #28
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	200000e0 	.word	0x200000e0

0800051c <DF_Choose>:
{
  Send_cmd(0x03,0x00,0x01);
  HAL_Delay(200);
}
void DF_Choose (uint8_t par)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	0002      	movs	r2, r0
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x03, 0,par);
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	2003      	movs	r0, #3
 8000532:	f7ff ff97 	bl	8000464 <Send_cmd>
	HAL_Delay(200);
 8000536:	20c8      	movs	r0, #200	@ 0xc8
 8000538:	f001 f804 	bl	8001544 <HAL_Delay>
}
 800053c:	46c0      	nop			@ (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b002      	add	sp, #8
 8000542:	bd80      	pop	{r7, pc}

08000544 <DF_Init>:
void DF_Init (uint8_t volume)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	0002      	movs	r2, r0
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x3F, 0x00, Source);
 8000550:	2202      	movs	r2, #2
 8000552:	2100      	movs	r1, #0
 8000554:	203f      	movs	r0, #63	@ 0x3f
 8000556:	f7ff ff85 	bl	8000464 <Send_cmd>
	HAL_Delay(200);
 800055a:	20c8      	movs	r0, #200	@ 0xc8
 800055c:	f000 fff2 	bl	8001544 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	2006      	movs	r0, #6
 800056a:	f7ff ff7b 	bl	8000464 <Send_cmd>
	HAL_Delay(500);
 800056e:	23fa      	movs	r3, #250	@ 0xfa
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	0018      	movs	r0, r3
 8000574:	f000 ffe6 	bl	8001544 <HAL_Delay>
}
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}

08000580 <DF_Pause>:
	Send_cmd(0x01, 0x00, 0x00);
	HAL_Delay(200);
}

void DF_Pause (void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	200e      	movs	r0, #14
 800058a:	f7ff ff6b 	bl	8000464 <Send_cmd>
	HAL_Delay(200);
 800058e:	20c8      	movs	r0, #200	@ 0xc8
 8000590:	f000 ffd8 	bl	8001544 <HAL_Delay>
}
 8000594:	46c0      	nop			@ (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <segment_Update>:




void segment_Update(int num)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	if(num==0)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d136      	bne.n	8000618 <segment_Update+0x7c>
	{
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 80005aa:	2380      	movs	r3, #128	@ 0x80
 80005ac:	0159      	lsls	r1, r3, #5
 80005ae:	2390      	movs	r3, #144	@ 0x90
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	2201      	movs	r2, #1
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fa2a 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 80005ba:	2380      	movs	r3, #128	@ 0x80
 80005bc:	0119      	lsls	r1, r3, #4
 80005be:	2390      	movs	r3, #144	@ 0x90
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	2201      	movs	r2, #1
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fa22 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 80005ca:	2380      	movs	r3, #128	@ 0x80
 80005cc:	00d9      	lsls	r1, r3, #3
 80005ce:	2390      	movs	r3, #144	@ 0x90
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	2201      	movs	r2, #1
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fa1a 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 80005da:	2380      	movs	r3, #128	@ 0x80
 80005dc:	0099      	lsls	r1, r3, #2
 80005de:	2390      	movs	r3, #144	@ 0x90
 80005e0:	05db      	lsls	r3, r3, #23
 80005e2:	2201      	movs	r2, #1
 80005e4:	0018      	movs	r0, r3
 80005e6:	f001 fa12 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 80005ea:	2380      	movs	r3, #128	@ 0x80
 80005ec:	0059      	lsls	r1, r3, #1
 80005ee:	2390      	movs	r3, #144	@ 0x90
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	2201      	movs	r2, #1
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fa0a 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 80005fa:	2380      	movs	r3, #128	@ 0x80
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	48ee      	ldr	r0, [pc, #952]	@ (80009b8 <segment_Update+0x41c>)
 8000600:	2201      	movs	r2, #1
 8000602:	0019      	movs	r1, r3
 8000604:	f001 fa03 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 8000608:	2380      	movs	r3, #128	@ 0x80
 800060a:	01db      	lsls	r3, r3, #7
 800060c:	48ea      	ldr	r0, [pc, #936]	@ (80009b8 <segment_Update+0x41c>)
 800060e:	2200      	movs	r2, #0
 8000610:	0019      	movs	r1, r3
 8000612:	f001 f9fc 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
	}
}
 8000616:	e241      	b.n	8000a9c <segment_Update+0x500>
	else if(num==1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d136      	bne.n	800068c <segment_Update+0xf0>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,0);
 800061e:	2380      	movs	r3, #128	@ 0x80
 8000620:	0159      	lsls	r1, r3, #5
 8000622:	2390      	movs	r3, #144	@ 0x90
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2200      	movs	r2, #0
 8000628:	0018      	movs	r0, r3
 800062a:	f001 f9f0 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 800062e:	2380      	movs	r3, #128	@ 0x80
 8000630:	0119      	lsls	r1, r3, #4
 8000632:	2390      	movs	r3, #144	@ 0x90
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	2201      	movs	r2, #1
 8000638:	0018      	movs	r0, r3
 800063a:	f001 f9e8 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 800063e:	2380      	movs	r3, #128	@ 0x80
 8000640:	00d9      	lsls	r1, r3, #3
 8000642:	2390      	movs	r3, #144	@ 0x90
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	2201      	movs	r2, #1
 8000648:	0018      	movs	r0, r3
 800064a:	f001 f9e0 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 800064e:	2380      	movs	r3, #128	@ 0x80
 8000650:	0099      	lsls	r1, r3, #2
 8000652:	2390      	movs	r3, #144	@ 0x90
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2200      	movs	r2, #0
 8000658:	0018      	movs	r0, r3
 800065a:	f001 f9d8 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 800065e:	2380      	movs	r3, #128	@ 0x80
 8000660:	0059      	lsls	r1, r3, #1
 8000662:	2390      	movs	r3, #144	@ 0x90
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2200      	movs	r2, #0
 8000668:	0018      	movs	r0, r3
 800066a:	f001 f9d0 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 800066e:	2380      	movs	r3, #128	@ 0x80
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	48d1      	ldr	r0, [pc, #836]	@ (80009b8 <segment_Update+0x41c>)
 8000674:	2200      	movs	r2, #0
 8000676:	0019      	movs	r1, r3
 8000678:	f001 f9c9 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 800067c:	2380      	movs	r3, #128	@ 0x80
 800067e:	01db      	lsls	r3, r3, #7
 8000680:	48cd      	ldr	r0, [pc, #820]	@ (80009b8 <segment_Update+0x41c>)
 8000682:	2200      	movs	r2, #0
 8000684:	0019      	movs	r1, r3
 8000686:	f001 f9c2 	bl	8001a0e <HAL_GPIO_WritePin>
}
 800068a:	e207      	b.n	8000a9c <segment_Update+0x500>
	else if(num==2)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d136      	bne.n	8000700 <segment_Update+0x164>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000692:	2380      	movs	r3, #128	@ 0x80
 8000694:	0159      	lsls	r1, r3, #5
 8000696:	2390      	movs	r3, #144	@ 0x90
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2201      	movs	r2, #1
 800069c:	0018      	movs	r0, r3
 800069e:	f001 f9b6 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	0119      	lsls	r1, r3, #4
 80006a6:	2390      	movs	r3, #144	@ 0x90
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	2201      	movs	r2, #1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 f9ae 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,0);
 80006b2:	2380      	movs	r3, #128	@ 0x80
 80006b4:	00d9      	lsls	r1, r3, #3
 80006b6:	2390      	movs	r3, #144	@ 0x90
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2200      	movs	r2, #0
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 f9a6 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 80006c2:	2380      	movs	r3, #128	@ 0x80
 80006c4:	0099      	lsls	r1, r3, #2
 80006c6:	2390      	movs	r3, #144	@ 0x90
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	2201      	movs	r2, #1
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f99e 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 80006d2:	2380      	movs	r3, #128	@ 0x80
 80006d4:	0059      	lsls	r1, r3, #1
 80006d6:	2390      	movs	r3, #144	@ 0x90
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	2201      	movs	r2, #1
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 f996 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 80006e2:	2380      	movs	r3, #128	@ 0x80
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	48b4      	ldr	r0, [pc, #720]	@ (80009b8 <segment_Update+0x41c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	0019      	movs	r1, r3
 80006ec:	f001 f98f 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	01db      	lsls	r3, r3, #7
 80006f4:	48b0      	ldr	r0, [pc, #704]	@ (80009b8 <segment_Update+0x41c>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	0019      	movs	r1, r3
 80006fa:	f001 f988 	bl	8001a0e <HAL_GPIO_WritePin>
}
 80006fe:	e1cd      	b.n	8000a9c <segment_Update+0x500>
	else if(num==3)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b03      	cmp	r3, #3
 8000704:	d136      	bne.n	8000774 <segment_Update+0x1d8>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000706:	2380      	movs	r3, #128	@ 0x80
 8000708:	0159      	lsls	r1, r3, #5
 800070a:	2390      	movs	r3, #144	@ 0x90
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	2201      	movs	r2, #1
 8000710:	0018      	movs	r0, r3
 8000712:	f001 f97c 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000716:	2380      	movs	r3, #128	@ 0x80
 8000718:	0119      	lsls	r1, r3, #4
 800071a:	2390      	movs	r3, #144	@ 0x90
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	2201      	movs	r2, #1
 8000720:	0018      	movs	r0, r3
 8000722:	f001 f974 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 8000726:	2380      	movs	r3, #128	@ 0x80
 8000728:	00d9      	lsls	r1, r3, #3
 800072a:	2390      	movs	r3, #144	@ 0x90
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	2201      	movs	r2, #1
 8000730:	0018      	movs	r0, r3
 8000732:	f001 f96c 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 8000736:	2380      	movs	r3, #128	@ 0x80
 8000738:	0099      	lsls	r1, r3, #2
 800073a:	2390      	movs	r3, #144	@ 0x90
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2201      	movs	r2, #1
 8000740:	0018      	movs	r0, r3
 8000742:	f001 f964 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8000746:	2380      	movs	r3, #128	@ 0x80
 8000748:	0059      	lsls	r1, r3, #1
 800074a:	2390      	movs	r3, #144	@ 0x90
 800074c:	05db      	lsls	r3, r3, #23
 800074e:	2200      	movs	r2, #0
 8000750:	0018      	movs	r0, r3
 8000752:	f001 f95c 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 8000756:	2380      	movs	r3, #128	@ 0x80
 8000758:	021b      	lsls	r3, r3, #8
 800075a:	4897      	ldr	r0, [pc, #604]	@ (80009b8 <segment_Update+0x41c>)
 800075c:	2200      	movs	r2, #0
 800075e:	0019      	movs	r1, r3
 8000760:	f001 f955 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 8000764:	2380      	movs	r3, #128	@ 0x80
 8000766:	01db      	lsls	r3, r3, #7
 8000768:	4893      	ldr	r0, [pc, #588]	@ (80009b8 <segment_Update+0x41c>)
 800076a:	2201      	movs	r2, #1
 800076c:	0019      	movs	r1, r3
 800076e:	f001 f94e 	bl	8001a0e <HAL_GPIO_WritePin>
}
 8000772:	e193      	b.n	8000a9c <segment_Update+0x500>
	else if(num==4)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d136      	bne.n	80007e8 <segment_Update+0x24c>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,0);
 800077a:	2380      	movs	r3, #128	@ 0x80
 800077c:	0159      	lsls	r1, r3, #5
 800077e:	2390      	movs	r3, #144	@ 0x90
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	2200      	movs	r2, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f001 f942 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 800078a:	2380      	movs	r3, #128	@ 0x80
 800078c:	0119      	lsls	r1, r3, #4
 800078e:	2390      	movs	r3, #144	@ 0x90
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	2201      	movs	r2, #1
 8000794:	0018      	movs	r0, r3
 8000796:	f001 f93a 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 800079a:	2380      	movs	r3, #128	@ 0x80
 800079c:	00d9      	lsls	r1, r3, #3
 800079e:	2390      	movs	r3, #144	@ 0x90
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	2201      	movs	r2, #1
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 f932 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 80007aa:	2380      	movs	r3, #128	@ 0x80
 80007ac:	0099      	lsls	r1, r3, #2
 80007ae:	2390      	movs	r3, #144	@ 0x90
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	2200      	movs	r2, #0
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 f92a 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 80007ba:	2380      	movs	r3, #128	@ 0x80
 80007bc:	0059      	lsls	r1, r3, #1
 80007be:	2390      	movs	r3, #144	@ 0x90
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	2200      	movs	r2, #0
 80007c4:	0018      	movs	r0, r3
 80007c6:	f001 f922 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 80007ca:	2380      	movs	r3, #128	@ 0x80
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	487a      	ldr	r0, [pc, #488]	@ (80009b8 <segment_Update+0x41c>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	0019      	movs	r1, r3
 80007d4:	f001 f91b 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 80007d8:	2380      	movs	r3, #128	@ 0x80
 80007da:	01db      	lsls	r3, r3, #7
 80007dc:	4876      	ldr	r0, [pc, #472]	@ (80009b8 <segment_Update+0x41c>)
 80007de:	2201      	movs	r2, #1
 80007e0:	0019      	movs	r1, r3
 80007e2:	f001 f914 	bl	8001a0e <HAL_GPIO_WritePin>
}
 80007e6:	e159      	b.n	8000a9c <segment_Update+0x500>
	else if(num==5)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b05      	cmp	r3, #5
 80007ec:	d136      	bne.n	800085c <segment_Update+0x2c0>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 80007ee:	2380      	movs	r3, #128	@ 0x80
 80007f0:	0159      	lsls	r1, r3, #5
 80007f2:	2390      	movs	r3, #144	@ 0x90
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	2201      	movs	r2, #1
 80007f8:	0018      	movs	r0, r3
 80007fa:	f001 f908 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,0);
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	0119      	lsls	r1, r3, #4
 8000802:	2390      	movs	r3, #144	@ 0x90
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	2200      	movs	r2, #0
 8000808:	0018      	movs	r0, r3
 800080a:	f001 f900 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 800080e:	2380      	movs	r3, #128	@ 0x80
 8000810:	00d9      	lsls	r1, r3, #3
 8000812:	2390      	movs	r3, #144	@ 0x90
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	2201      	movs	r2, #1
 8000818:	0018      	movs	r0, r3
 800081a:	f001 f8f8 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 800081e:	2380      	movs	r3, #128	@ 0x80
 8000820:	0099      	lsls	r1, r3, #2
 8000822:	2390      	movs	r3, #144	@ 0x90
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	2201      	movs	r2, #1
 8000828:	0018      	movs	r0, r3
 800082a:	f001 f8f0 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	0059      	lsls	r1, r3, #1
 8000832:	2390      	movs	r3, #144	@ 0x90
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	2200      	movs	r2, #0
 8000838:	0018      	movs	r0, r3
 800083a:	f001 f8e8 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 800083e:	2380      	movs	r3, #128	@ 0x80
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	485d      	ldr	r0, [pc, #372]	@ (80009b8 <segment_Update+0x41c>)
 8000844:	2201      	movs	r2, #1
 8000846:	0019      	movs	r1, r3
 8000848:	f001 f8e1 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 800084c:	2380      	movs	r3, #128	@ 0x80
 800084e:	01db      	lsls	r3, r3, #7
 8000850:	4859      	ldr	r0, [pc, #356]	@ (80009b8 <segment_Update+0x41c>)
 8000852:	2201      	movs	r2, #1
 8000854:	0019      	movs	r1, r3
 8000856:	f001 f8da 	bl	8001a0e <HAL_GPIO_WritePin>
}
 800085a:	e11f      	b.n	8000a9c <segment_Update+0x500>
	else if(num==6)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b06      	cmp	r3, #6
 8000860:	d136      	bne.n	80008d0 <segment_Update+0x334>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000862:	2380      	movs	r3, #128	@ 0x80
 8000864:	0159      	lsls	r1, r3, #5
 8000866:	2390      	movs	r3, #144	@ 0x90
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	2201      	movs	r2, #1
 800086c:	0018      	movs	r0, r3
 800086e:	f001 f8ce 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000872:	2380      	movs	r3, #128	@ 0x80
 8000874:	0119      	lsls	r1, r3, #4
 8000876:	2390      	movs	r3, #144	@ 0x90
 8000878:	05db      	lsls	r3, r3, #23
 800087a:	2201      	movs	r2, #1
 800087c:	0018      	movs	r0, r3
 800087e:	f001 f8c6 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 8000882:	2380      	movs	r3, #128	@ 0x80
 8000884:	00d9      	lsls	r1, r3, #3
 8000886:	2390      	movs	r3, #144	@ 0x90
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	2201      	movs	r2, #1
 800088c:	0018      	movs	r0, r3
 800088e:	f001 f8be 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 8000892:	2380      	movs	r3, #128	@ 0x80
 8000894:	0099      	lsls	r1, r3, #2
 8000896:	2390      	movs	r3, #144	@ 0x90
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2201      	movs	r2, #1
 800089c:	0018      	movs	r0, r3
 800089e:	f001 f8b6 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 80008a2:	2380      	movs	r3, #128	@ 0x80
 80008a4:	0059      	lsls	r1, r3, #1
 80008a6:	2390      	movs	r3, #144	@ 0x90
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	2201      	movs	r2, #1
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 f8ae 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 80008b2:	2380      	movs	r3, #128	@ 0x80
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	4840      	ldr	r0, [pc, #256]	@ (80009b8 <segment_Update+0x41c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	0019      	movs	r1, r3
 80008bc:	f001 f8a7 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	01db      	lsls	r3, r3, #7
 80008c4:	483c      	ldr	r0, [pc, #240]	@ (80009b8 <segment_Update+0x41c>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	0019      	movs	r1, r3
 80008ca:	f001 f8a0 	bl	8001a0e <HAL_GPIO_WritePin>
}
 80008ce:	e0e5      	b.n	8000a9c <segment_Update+0x500>
	else if(num==7)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b07      	cmp	r3, #7
 80008d4:	d136      	bne.n	8000944 <segment_Update+0x3a8>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 80008d6:	2380      	movs	r3, #128	@ 0x80
 80008d8:	0159      	lsls	r1, r3, #5
 80008da:	2390      	movs	r3, #144	@ 0x90
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	2201      	movs	r2, #1
 80008e0:	0018      	movs	r0, r3
 80008e2:	f001 f894 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 80008e6:	2380      	movs	r3, #128	@ 0x80
 80008e8:	0119      	lsls	r1, r3, #4
 80008ea:	2390      	movs	r3, #144	@ 0x90
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2201      	movs	r2, #1
 80008f0:	0018      	movs	r0, r3
 80008f2:	f001 f88c 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 80008f6:	2380      	movs	r3, #128	@ 0x80
 80008f8:	00d9      	lsls	r1, r3, #3
 80008fa:	2390      	movs	r3, #144	@ 0x90
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	2201      	movs	r2, #1
 8000900:	0018      	movs	r0, r3
 8000902:	f001 f884 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 8000906:	2380      	movs	r3, #128	@ 0x80
 8000908:	0099      	lsls	r1, r3, #2
 800090a:	2390      	movs	r3, #144	@ 0x90
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	2200      	movs	r2, #0
 8000910:	0018      	movs	r0, r3
 8000912:	f001 f87c 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8000916:	2380      	movs	r3, #128	@ 0x80
 8000918:	0059      	lsls	r1, r3, #1
 800091a:	2390      	movs	r3, #144	@ 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2200      	movs	r2, #0
 8000920:	0018      	movs	r0, r3
 8000922:	f001 f874 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 8000926:	2380      	movs	r3, #128	@ 0x80
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	4823      	ldr	r0, [pc, #140]	@ (80009b8 <segment_Update+0x41c>)
 800092c:	2200      	movs	r2, #0
 800092e:	0019      	movs	r1, r3
 8000930:	f001 f86d 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	01db      	lsls	r3, r3, #7
 8000938:	481f      	ldr	r0, [pc, #124]	@ (80009b8 <segment_Update+0x41c>)
 800093a:	2200      	movs	r2, #0
 800093c:	0019      	movs	r1, r3
 800093e:	f001 f866 	bl	8001a0e <HAL_GPIO_WritePin>
}
 8000942:	e0ab      	b.n	8000a9c <segment_Update+0x500>
	else if(num==8)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b08      	cmp	r3, #8
 8000948:	d138      	bne.n	80009bc <segment_Update+0x420>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 800094a:	2380      	movs	r3, #128	@ 0x80
 800094c:	0159      	lsls	r1, r3, #5
 800094e:	2390      	movs	r3, #144	@ 0x90
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2201      	movs	r2, #1
 8000954:	0018      	movs	r0, r3
 8000956:	f001 f85a 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 800095a:	2380      	movs	r3, #128	@ 0x80
 800095c:	0119      	lsls	r1, r3, #4
 800095e:	2390      	movs	r3, #144	@ 0x90
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2201      	movs	r2, #1
 8000964:	0018      	movs	r0, r3
 8000966:	f001 f852 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 800096a:	2380      	movs	r3, #128	@ 0x80
 800096c:	00d9      	lsls	r1, r3, #3
 800096e:	2390      	movs	r3, #144	@ 0x90
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	2201      	movs	r2, #1
 8000974:	0018      	movs	r0, r3
 8000976:	f001 f84a 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 800097a:	2380      	movs	r3, #128	@ 0x80
 800097c:	0099      	lsls	r1, r3, #2
 800097e:	2390      	movs	r3, #144	@ 0x90
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2201      	movs	r2, #1
 8000984:	0018      	movs	r0, r3
 8000986:	f001 f842 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	0059      	lsls	r1, r3, #1
 800098e:	2390      	movs	r3, #144	@ 0x90
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	2201      	movs	r2, #1
 8000994:	0018      	movs	r0, r3
 8000996:	f001 f83a 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 800099a:	2380      	movs	r3, #128	@ 0x80
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <segment_Update+0x41c>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	0019      	movs	r1, r3
 80009a4:	f001 f833 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 80009a8:	2380      	movs	r3, #128	@ 0x80
 80009aa:	01db      	lsls	r3, r3, #7
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <segment_Update+0x41c>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	0019      	movs	r1, r3
 80009b2:	f001 f82c 	bl	8001a0e <HAL_GPIO_WritePin>
}
 80009b6:	e071      	b.n	8000a9c <segment_Update+0x500>
 80009b8:	48000400 	.word	0x48000400
	else if(num==9)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b09      	cmp	r3, #9
 80009c0:	d136      	bne.n	8000a30 <segment_Update+0x494>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	0159      	lsls	r1, r3, #5
 80009c6:	2390      	movs	r3, #144	@ 0x90
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	2201      	movs	r2, #1
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 f81e 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 80009d2:	2380      	movs	r3, #128	@ 0x80
 80009d4:	0119      	lsls	r1, r3, #4
 80009d6:	2390      	movs	r3, #144	@ 0x90
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	2201      	movs	r2, #1
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 f816 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 80009e2:	2380      	movs	r3, #128	@ 0x80
 80009e4:	00d9      	lsls	r1, r3, #3
 80009e6:	2390      	movs	r3, #144	@ 0x90
 80009e8:	05db      	lsls	r3, r3, #23
 80009ea:	2201      	movs	r2, #1
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 f80e 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 80009f2:	2380      	movs	r3, #128	@ 0x80
 80009f4:	0099      	lsls	r1, r3, #2
 80009f6:	2390      	movs	r3, #144	@ 0x90
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	2201      	movs	r2, #1
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 f806 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8000a02:	2380      	movs	r3, #128	@ 0x80
 8000a04:	0059      	lsls	r1, r3, #1
 8000a06:	2390      	movs	r3, #144	@ 0x90
 8000a08:	05db      	lsls	r3, r3, #23
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f000 fffe 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 8000a12:	2380      	movs	r3, #128	@ 0x80
 8000a14:	021b      	lsls	r3, r3, #8
 8000a16:	4823      	ldr	r0, [pc, #140]	@ (8000aa4 <segment_Update+0x508>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	0019      	movs	r1, r3
 8000a1c:	f000 fff7 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 8000a20:	2380      	movs	r3, #128	@ 0x80
 8000a22:	01db      	lsls	r3, r3, #7
 8000a24:	481f      	ldr	r0, [pc, #124]	@ (8000aa4 <segment_Update+0x508>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	0019      	movs	r1, r3
 8000a2a:	f000 fff0 	bl	8001a0e <HAL_GPIO_WritePin>
}
 8000a2e:	e035      	b.n	8000a9c <segment_Update+0x500>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,0);
 8000a30:	2380      	movs	r3, #128	@ 0x80
 8000a32:	0159      	lsls	r1, r3, #5
 8000a34:	2390      	movs	r3, #144	@ 0x90
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	2200      	movs	r2, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 ffe7 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,0);
 8000a40:	2380      	movs	r3, #128	@ 0x80
 8000a42:	0119      	lsls	r1, r3, #4
 8000a44:	2390      	movs	r3, #144	@ 0x90
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	2200      	movs	r2, #0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 ffdf 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,0);
 8000a50:	2380      	movs	r3, #128	@ 0x80
 8000a52:	00d9      	lsls	r1, r3, #3
 8000a54:	2390      	movs	r3, #144	@ 0x90
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	2200      	movs	r2, #0
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 ffd7 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 8000a60:	2380      	movs	r3, #128	@ 0x80
 8000a62:	0099      	lsls	r1, r3, #2
 8000a64:	2390      	movs	r3, #144	@ 0x90
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	2200      	movs	r2, #0
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 ffcf 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	0059      	lsls	r1, r3, #1
 8000a74:	2390      	movs	r3, #144	@ 0x90
 8000a76:	05db      	lsls	r3, r3, #23
 8000a78:	2200      	movs	r2, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 ffc7 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 8000a80:	2380      	movs	r3, #128	@ 0x80
 8000a82:	021b      	lsls	r3, r3, #8
 8000a84:	4807      	ldr	r0, [pc, #28]	@ (8000aa4 <segment_Update+0x508>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	0019      	movs	r1, r3
 8000a8a:	f000 ffc0 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 8000a8e:	2380      	movs	r3, #128	@ 0x80
 8000a90:	01db      	lsls	r3, r3, #7
 8000a92:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <segment_Update+0x508>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	0019      	movs	r1, r3
 8000a98:	f000 ffb9 	bl	8001a0e <HAL_GPIO_WritePin>
}
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	48000400 	.word	0x48000400

08000aa8 <shuffle>:


void shuffle(uint8_t *array, uint8_t size)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	000a      	movs	r2, r1
 8000ab2:	1cfb      	adds	r3, r7, #3
 8000ab4:	701a      	strb	r2, [r3, #0]
	for (int i = size - 1; i > 0; i--) {
 8000ab6:	1cfb      	adds	r3, r7, #3
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	e020      	b.n	8000b02 <shuffle+0x5a>
		int j = rand() % (i + 1);
 8000ac0:	f002 fb92 	bl	80031e8 <rand>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	0019      	movs	r1, r3
 8000acc:	0010      	movs	r0, r2
 8000ace:	f7ff fc95 	bl	80003fc <__aeabi_idivmod>
 8000ad2:	000b      	movs	r3, r1
 8000ad4:	613b      	str	r3, [r7, #16]

		int temp = array[i];
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	18d3      	adds	r3, r2, r3
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]
		array[i] = array[j];
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	18d2      	adds	r2, r2, r3
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	18cb      	adds	r3, r1, r3
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	701a      	strb	r2, [r3, #0]
		array[j] = temp;
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	18d3      	adds	r3, r2, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	701a      	strb	r2, [r3, #0]
	for (int i = size - 1; i > 0; i--) {
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	dcdb      	bgt.n	8000ac0 <shuffle+0x18>
	}
}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b006      	add	sp, #24
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <button_Click>:


void button_Click()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
	DF_Choose(2);
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff fcfe 	bl	800051c <DF_Choose>
	for(int i = 3; i>=0; i--)
 8000b20:	2303      	movs	r3, #3
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	e00b      	b.n	8000b3e <button_Click+0x2a>
	{
		segment_Update(i);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff fd37 	bl	800059c <segment_Update>
		HAL_Delay(1000);
 8000b2e:	23fa      	movs	r3, #250	@ 0xfa
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 fd06 	bl	8001544 <HAL_Delay>
	for(int i = 3; i>=0; i--)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	daf0      	bge.n	8000b26 <button_Click+0x12>
	}
	segment_Update(10);
 8000b44:	200a      	movs	r0, #10
 8000b46:	f7ff fd29 	bl	800059c <segment_Update>
	state=playing_Game;
 8000b4a:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <button_Click+0x48>)
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <button_Click+0x4c>)
 8000b50:	701a      	strb	r2, [r3, #0]
}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	20000001 	.word	0x20000001
 8000b60:	20000168 	.word	0x20000168

08000b64 <start_Game>:
//
//}


void start_Game()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	DF_Choose(1);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f7ff fcd6 	bl	800051c <DF_Choose>
	shuffle(randomNumber, 16);
 8000b70:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce0 <start_Game+0x17c>)
 8000b72:	2110      	movs	r1, #16
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ff97 	bl	8000aa8 <shuffle>

	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 0);
 8000b7a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ce4 <start_Game+0x180>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2101      	movs	r1, #1
 8000b80:	0018      	movs	r0, r3
 8000b82:	f000 ff44 	bl	8001a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 1);
 8000b86:	2380      	movs	r3, #128	@ 0x80
 8000b88:	01db      	lsls	r3, r3, #7
 8000b8a:	4857      	ldr	r0, [pc, #348]	@ (8000ce8 <start_Game+0x184>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	0019      	movs	r1, r3
 8000b90:	f000 ff3d 	bl	8001a0e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f000 fcd5 	bl	8001544 <HAL_Delay>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 0);
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	01db      	lsls	r3, r3, #7
 8000b9e:	4852      	ldr	r0, [pc, #328]	@ (8000ce8 <start_Game+0x184>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	f000 ff33 	bl	8001a0e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f000 fccb 	bl	8001544 <HAL_Delay>
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 1);
 8000bae:	4b4d      	ldr	r3, [pc, #308]	@ (8000ce4 <start_Game+0x180>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 ff2a 	bl	8001a0e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f000 fcc2 	bl	8001544 <HAL_Delay>

	for(int i = 0; i<16; i++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	e05f      	b.n	8000c86 <start_Game+0x122>
	{

		data = data | (0x01 << randomNumber[i]);
 8000bc6:	4a46      	ldr	r2, [pc, #280]	@ (8000ce0 <start_Game+0x17c>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	18d3      	adds	r3, r2, r3
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	001a      	movs	r2, r3
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	4093      	lsls	r3, r2
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	4b45      	ldr	r3, [pc, #276]	@ (8000cec <start_Game+0x188>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b42      	ldr	r3, [pc, #264]	@ (8000cec <start_Game+0x188>)
 8000be4:	801a      	strh	r2, [r3, #0]
		for(int j=0;j<16;j++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	e026      	b.n	8000c3a <start_Game+0xd6>
		{
			HAL_GPIO_WritePin(SER_GPIO_Port, SER_Pin, (data >> j) & 1);
 8000bec:	4b3f      	ldr	r3, [pc, #252]	@ (8000cec <start_Game+0x188>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	411a      	asrs	r2, r3
 8000bf6:	0013      	movs	r3, r2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	2380      	movs	r3, #128	@ 0x80
 8000c02:	019b      	lsls	r3, r3, #6
 8000c04:	4838      	ldr	r0, [pc, #224]	@ (8000ce8 <start_Game+0x184>)
 8000c06:	0019      	movs	r1, r3
 8000c08:	f000 ff01 	bl	8001a0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, 1);
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	4835      	ldr	r0, [pc, #212]	@ (8000ce8 <start_Game+0x184>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	0019      	movs	r1, r3
 8000c16:	f000 fefa 	bl	8001a0e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f000 fc92 	bl	8001544 <HAL_Delay>
			HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, 0);
 8000c20:	2380      	movs	r3, #128	@ 0x80
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	4830      	ldr	r0, [pc, #192]	@ (8000ce8 <start_Game+0x184>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	0019      	movs	r1, r3
 8000c2a:	f000 fef0 	bl	8001a0e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f000 fc88 	bl	8001544 <HAL_Delay>
		for(int j=0;j<16;j++)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	ddd5      	ble.n	8000bec <start_Game+0x88>
		}
		segment_Update(randomNumber[i]);
 8000c40:	4a27      	ldr	r2, [pc, #156]	@ (8000ce0 <start_Game+0x17c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	18d3      	adds	r3, r2, r3
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff fca7 	bl	800059c <segment_Update>
		HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 1);
 8000c4e:	2380      	movs	r3, #128	@ 0x80
 8000c50:	01db      	lsls	r3, r3, #7
 8000c52:	4825      	ldr	r0, [pc, #148]	@ (8000ce8 <start_Game+0x184>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	0019      	movs	r1, r3
 8000c58:	f000 fed9 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f000 fc71 	bl	8001544 <HAL_Delay>
		HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 0);
 8000c62:	2380      	movs	r3, #128	@ 0x80
 8000c64:	01db      	lsls	r3, r3, #7
 8000c66:	4820      	ldr	r0, [pc, #128]	@ (8000ce8 <start_Game+0x184>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	f000 fecf 	bl	8001a0e <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f000 fc67 	bl	8001544 <HAL_Delay>


		//		set_shiftregister_bit(randomNumber[i]);
		HAL_Delay(1000);
 8000c76:	23fa      	movs	r3, #250	@ 0xfa
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fc62 	bl	8001544 <HAL_Delay>
	for(int i = 0; i<16; i++)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3301      	adds	r3, #1
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	dd9c      	ble.n	8000bc6 <start_Game+0x62>
	}

	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 0);
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <start_Game+0x180>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2101      	movs	r1, #1
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 febb 	bl	8001a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 1);
 8000c98:	2380      	movs	r3, #128	@ 0x80
 8000c9a:	01db      	lsls	r3, r3, #7
 8000c9c:	4812      	ldr	r0, [pc, #72]	@ (8000ce8 <start_Game+0x184>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	f000 feb4 	bl	8001a0e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 fc4c 	bl	8001544 <HAL_Delay>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 0);
 8000cac:	2380      	movs	r3, #128	@ 0x80
 8000cae:	01db      	lsls	r3, r3, #7
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <start_Game+0x184>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	f000 feaa 	bl	8001a0e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 fc42 	bl	8001544 <HAL_Delay>
	segment_Update(10);
 8000cc0:	200a      	movs	r0, #10
 8000cc2:	f7ff fc6b 	bl	800059c <segment_Update>
	DF_Pause();
 8000cc6:	f7ff fc5b 	bl	8000580 <DF_Pause>
	data=0;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <start_Game+0x188>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	801a      	strh	r2, [r3, #0]
	state=waiting_For_Start;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <start_Game+0x18c>)
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <start_Game+0x190>)
 8000cd6:	701a      	strb	r2, [r3, #0]
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	48001400 	.word	0x48001400
 8000ce8:	48000800 	.word	0x48000800
 8000cec:	2000016a 	.word	0x2000016a
 8000cf0:	20000169 	.word	0x20000169
 8000cf4:	20000168 	.word	0x20000168

08000cf8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cfc:	f000 fbbe 	bl	800147c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d00:	f000 f86e 	bl	8000de0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d04:	f000 f932 	bl	8000f6c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000d08:	f000 f900 	bl	8000f0c <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8000d0c:	f000 f8a8 	bl	8000e60 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	DF_Init(30);
 8000d10:	201e      	movs	r0, #30
 8000d12:	f7ff fc17 	bl	8000544 <DF_Init>
	HAL_TIM_Base_Start(&htim3);
 8000d16:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <main+0xc0>)
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fb43 	bl	80023a4 <HAL_TIM_Base_Start>

	seed = __HAL_TIM_GET_COUNTER(&htim3);
 8000d1e:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <main+0xc0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d24:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <main+0xc4>)
 8000d26:	601a      	str	r2, [r3, #0]
	srand(seed);
 8000d28:	4b24      	ldr	r3, [pc, #144]	@ (8000dbc <main+0xc4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f002 fa2b 	bl	8003188 <srand>
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 0);
 8000d32:	4b23      	ldr	r3, [pc, #140]	@ (8000dc0 <main+0xc8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	2101      	movs	r1, #1
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 fe68 	bl	8001a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 1);
 8000d3e:	2380      	movs	r3, #128	@ 0x80
 8000d40:	01db      	lsls	r3, r3, #7
 8000d42:	4820      	ldr	r0, [pc, #128]	@ (8000dc4 <main+0xcc>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	0019      	movs	r1, r3
 8000d48:	f000 fe61 	bl	8001a0e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f000 fbf9 	bl	8001544 <HAL_Delay>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 0);
 8000d52:	2380      	movs	r3, #128	@ 0x80
 8000d54:	01db      	lsls	r3, r3, #7
 8000d56:	481b      	ldr	r0, [pc, #108]	@ (8000dc4 <main+0xcc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	f000 fe57 	bl	8001a0e <HAL_GPIO_WritePin>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(state==waiting_For_Start)//check coin & ask & start button
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <main+0xd0>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <main+0xd4>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d112      	bne.n	8000d92 <main+0x9a>
		{
			if(!HAL_GPIO_ReadPin(Ext_IO1_GPIO_Port, Ext_IO1_Pin))
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	011b      	lsls	r3, r3, #4
 8000d70:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <main+0xd8>)
 8000d72:	0019      	movs	r1, r3
 8000d74:	0010      	movs	r0, r2
 8000d76:	f000 fe2d 	bl	80019d4 <HAL_GPIO_ReadPin>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d103      	bne.n	8000d86 <main+0x8e>
				state = button_Clicked;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <main+0xdc>)
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <main+0xd0>)
 8000d84:	701a      	strb	r2, [r3, #0]
			shuffle(randomNumber, 16);
 8000d86:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <main+0xe0>)
 8000d88:	2110      	movs	r1, #16
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fe8c 	bl	8000aa8 <shuffle>
 8000d90:	e7e6      	b.n	8000d60 <main+0x68>
		}
		else if(state==button_Clicked)
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <main+0xd0>)
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <main+0xdc>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d102      	bne.n	8000da4 <main+0xac>
			button_Click();
 8000d9e:	f7ff feb9 	bl	8000b14 <button_Click>
 8000da2:	e7dd      	b.n	8000d60 <main+0x68>

		else if(state==playing_Game)
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <main+0xd0>)
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <main+0xe4>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d1d7      	bne.n	8000d60 <main+0x68>
			start_Game();
 8000db0:	f7ff fed8 	bl	8000b64 <start_Game>
		if(state==waiting_For_Start)//check coin & ask & start button
 8000db4:	e7d4      	b.n	8000d60 <main+0x68>
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	20000098 	.word	0x20000098
 8000dbc:	2000016c 	.word	0x2000016c
 8000dc0:	48001400 	.word	0x48001400
 8000dc4:	48000800 	.word	0x48000800
 8000dc8:	20000168 	.word	0x20000168
 8000dcc:	20000169 	.word	0x20000169
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000004 	.word	0x20000004
 8000ddc:	20000001 	.word	0x20000001

08000de0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b091      	sub	sp, #68	@ 0x44
 8000de4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	2410      	movs	r4, #16
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	0018      	movs	r0, r3
 8000dec:	2330      	movs	r3, #48	@ 0x30
 8000dee:	001a      	movs	r2, r3
 8000df0:	2100      	movs	r1, #0
 8000df2:	f002 fb47 	bl	8003484 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df6:	003b      	movs	r3, r7
 8000df8:	0018      	movs	r0, r3
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f002 fb40 	bl	8003484 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e04:	0021      	movs	r1, r4
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2202      	movs	r2, #2
 8000e0a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2201      	movs	r2, #1
 8000e10:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2210      	movs	r2, #16
 8000e16:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	0018      	movs	r0, r3
 8000e22:	f000 fe11 	bl	8001a48 <HAL_RCC_OscConfig>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x4e>
	{
		Error_Handler();
 8000e2a:	f000 f98b 	bl	8001144 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2e:	003b      	movs	r3, r7
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e34:	003b      	movs	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e40:	003b      	movs	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e46:	003b      	movs	r3, r7
 8000e48:	2100      	movs	r1, #0
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f001 f916 	bl	800207c <HAL_RCC_ClockConfig>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8000e54:	f000 f976 	bl	8001144 <Error_Handler>
	}
}
 8000e58:	46c0      	nop			@ (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b011      	add	sp, #68	@ 0x44
 8000e5e:	bd90      	pop	{r4, r7, pc}

08000e60 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	2308      	movs	r3, #8
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	f002 fb07 	bl	8003484 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e76:	003b      	movs	r3, r7
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f002 fb00 	bl	8003484 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000e84:	4b1e      	ldr	r3, [pc, #120]	@ (8000f00 <MX_TIM3_Init+0xa0>)
 8000e86:	4a1f      	ldr	r2, [pc, #124]	@ (8000f04 <MX_TIM3_Init+0xa4>)
 8000e88:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <MX_TIM3_Init+0xa0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <MX_TIM3_Init+0xa0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 48000-1;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <MX_TIM3_Init+0xa0>)
 8000e98:	4a1b      	ldr	r2, [pc, #108]	@ (8000f08 <MX_TIM3_Init+0xa8>)
 8000e9a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <MX_TIM3_Init+0xa0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_TIM3_Init+0xa0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <MX_TIM3_Init+0xa0>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f001 fa2a 	bl	8002304 <HAL_TIM_Base_Init>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 8000eb4:	f000 f946 	bl	8001144 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	2108      	movs	r1, #8
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2280      	movs	r2, #128	@ 0x80
 8000ebe:	0152      	lsls	r2, r2, #5
 8000ec0:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ec2:	187a      	adds	r2, r7, r1
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <MX_TIM3_Init+0xa0>)
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f001 faaf 	bl	800242c <HAL_TIM_ConfigClockSource>
 8000ece:	1e03      	subs	r3, r0, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8000ed2:	f000 f937 	bl	8001144 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ee2:	003a      	movs	r2, r7
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_TIM3_Init+0xa0>)
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f001 fc91 	bl	8002810 <HAL_TIMEx_MasterConfigSynchronization>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 8000ef2:	f000 f927 	bl	8001144 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b006      	add	sp, #24
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	20000098 	.word	0x20000098
 8000f04:	40000400 	.word	0x40000400
 8000f08:	0000bb7f 	.word	0x0000bb7f

08000f0c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000f10:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f12:	4a15      	ldr	r2, [pc, #84]	@ (8000f68 <MX_USART2_UART_Init+0x5c>)
 8000f14:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000f16:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f18:	2296      	movs	r2, #150	@ 0x96
 8000f1a:	0192      	lsls	r2, r2, #6
 8000f1c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4e:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f50:	0018      	movs	r0, r3
 8000f52:	f001 fcb5 	bl	80028c0 <HAL_UART_Init>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000f5a:	f000 f8f3 	bl	8001144 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200000e0 	.word	0x200000e0
 8000f68:	40004400 	.word	0x40004400

08000f6c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b08b      	sub	sp, #44	@ 0x2c
 8000f70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	2414      	movs	r4, #20
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	0018      	movs	r0, r3
 8000f78:	2314      	movs	r3, #20
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	f002 fa81 	bl	8003484 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b6b      	ldr	r3, [pc, #428]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	4b6a      	ldr	r3, [pc, #424]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000f88:	2180      	movs	r1, #128	@ 0x80
 8000f8a:	0309      	lsls	r1, r1, #12
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	4b67      	ldr	r3, [pc, #412]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	031b      	lsls	r3, r3, #12
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000f9e:	4b64      	ldr	r3, [pc, #400]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	4b63      	ldr	r3, [pc, #396]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000fa4:	2180      	movs	r1, #128	@ 0x80
 8000fa6:	03c9      	lsls	r1, r1, #15
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	4b60      	ldr	r3, [pc, #384]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000fae:	695a      	ldr	r2, [r3, #20]
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	03db      	lsls	r3, r3, #15
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b5d      	ldr	r3, [pc, #372]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000fbc:	695a      	ldr	r2, [r3, #20]
 8000fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000fc0:	2180      	movs	r1, #128	@ 0x80
 8000fc2:	0289      	lsls	r1, r1, #10
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	4b59      	ldr	r3, [pc, #356]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000fca:	695a      	ldr	r2, [r3, #20]
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	029b      	lsls	r3, r3, #10
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b56      	ldr	r3, [pc, #344]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	4b55      	ldr	r3, [pc, #340]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	02c9      	lsls	r1, r1, #11
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	4b52      	ldr	r3, [pc, #328]	@ (8001130 <MX_GPIO_Init+0x1c4>)
 8000fe6:	695a      	ldr	r2, [r3, #20]
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	02db      	lsls	r3, r3, #11
 8000fec:	4013      	ands	r3, r2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, SER_Pin|LATCH_Pin|CLK_Pin, GPIO_PIN_RESET);
 8000ff2:	23e0      	movs	r3, #224	@ 0xe0
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	484f      	ldr	r0, [pc, #316]	@ (8001134 <MX_GPIO_Init+0x1c8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	f000 fd07 	bl	8001a0e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, GPIO_PIN_RESET);
 8001000:	4b4d      	ldr	r3, [pc, #308]	@ (8001138 <MX_GPIO_Init+0x1cc>)
 8001002:	2200      	movs	r2, #0
 8001004:	2101      	movs	r1, #1
 8001006:	0018      	movs	r0, r3
 8001008:	f000 fd01 	bl	8001a0e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, MCU_LED_Pin|G_Pin|F_Pin, GPIO_PIN_RESET);
 800100c:	23d0      	movs	r3, #208	@ 0xd0
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	484a      	ldr	r0, [pc, #296]	@ (800113c <MX_GPIO_Init+0x1d0>)
 8001012:	2200      	movs	r2, #0
 8001014:	0019      	movs	r1, r3
 8001016:	f000 fcfa 	bl	8001a0e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, E_Pin|D_Pin|C_Pin|B_Pin
 800101a:	23f8      	movs	r3, #248	@ 0xf8
 800101c:	0159      	lsls	r1, r3, #5
 800101e:	2390      	movs	r3, #144	@ 0x90
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	2200      	movs	r2, #0
 8001024:	0018      	movs	r0, r3
 8001026:	f000 fcf2 	bl	8001a0e <HAL_GPIO_WritePin>
			|A_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : SER_Pin LATCH_Pin CLK_Pin */
	GPIO_InitStruct.Pin = SER_Pin|LATCH_Pin|CLK_Pin;
 800102a:	193b      	adds	r3, r7, r4
 800102c:	22e0      	movs	r2, #224	@ 0xe0
 800102e:	0212      	lsls	r2, r2, #8
 8001030:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	2201      	movs	r2, #1
 8001036:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	193b      	adds	r3, r7, r4
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	193b      	adds	r3, r7, r4
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	193b      	adds	r3, r7, r4
 8001046:	4a3b      	ldr	r2, [pc, #236]	@ (8001134 <MX_GPIO_Init+0x1c8>)
 8001048:	0019      	movs	r1, r3
 800104a:	0010      	movs	r0, r2
 800104c:	f000 fb52 	bl	80016f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MR_Pin */
	GPIO_InitStruct.Pin = MR_Pin;
 8001050:	193b      	adds	r3, r7, r4
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2201      	movs	r2, #1
 800105a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	193b      	adds	r3, r7, r4
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	193b      	adds	r3, r7, r4
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(MR_GPIO_Port, &GPIO_InitStruct);
 8001068:	193b      	adds	r3, r7, r4
 800106a:	4a33      	ldr	r2, [pc, #204]	@ (8001138 <MX_GPIO_Init+0x1cc>)
 800106c:	0019      	movs	r1, r3
 800106e:	0010      	movs	r0, r2
 8001070:	f000 fb40 	bl	80016f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Ext_BTN_Pin */
	GPIO_InitStruct.Pin = Ext_BTN_Pin;
 8001074:	193b      	adds	r3, r7, r4
 8001076:	2202      	movs	r2, #2
 8001078:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	193b      	adds	r3, r7, r4
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001080:	193b      	adds	r3, r7, r4
 8001082:	2201      	movs	r2, #1
 8001084:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(Ext_BTN_GPIO_Port, &GPIO_InitStruct);
 8001086:	193b      	adds	r3, r7, r4
 8001088:	4a2b      	ldr	r2, [pc, #172]	@ (8001138 <MX_GPIO_Init+0x1cc>)
 800108a:	0019      	movs	r1, r3
 800108c:	0010      	movs	r0, r2
 800108e:	f000 fb31 	bl	80016f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ASK_IN_SIG_Pin */
	GPIO_InitStruct.Pin = ASK_IN_SIG_Pin;
 8001092:	193b      	adds	r3, r7, r4
 8001094:	2202      	movs	r2, #2
 8001096:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001098:	193b      	adds	r3, r7, r4
 800109a:	2288      	movs	r2, #136	@ 0x88
 800109c:	0352      	lsls	r2, r2, #13
 800109e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(ASK_IN_SIG_GPIO_Port, &GPIO_InitStruct);
 80010a6:	193a      	adds	r2, r7, r4
 80010a8:	2390      	movs	r3, #144	@ 0x90
 80010aa:	05db      	lsls	r3, r3, #23
 80010ac:	0011      	movs	r1, r2
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 fb20 	bl	80016f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : Ext_IO4_Pin Ext_IO3_Pin Ext_IO2_Pin Ext_IO1_Pin
                           Coin_Reader_Pin */
	GPIO_InitStruct.Pin = Ext_IO4_Pin|Ext_IO3_Pin|Ext_IO2_Pin|Ext_IO1_Pin
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	4a22      	ldr	r2, [pc, #136]	@ (8001140 <MX_GPIO_Init+0x1d4>)
 80010b8:	601a      	str	r2, [r3, #0]
			|Coin_Reader_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	2201      	movs	r2, #1
 80010c4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	193b      	adds	r3, r7, r4
 80010c8:	4a1c      	ldr	r2, [pc, #112]	@ (800113c <MX_GPIO_Init+0x1d0>)
 80010ca:	0019      	movs	r1, r3
 80010cc:	0010      	movs	r0, r2
 80010ce:	f000 fb11 	bl	80016f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : MCU_LED_Pin G_Pin F_Pin */
	GPIO_InitStruct.Pin = MCU_LED_Pin|G_Pin|F_Pin;
 80010d2:	0021      	movs	r1, r4
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	22d0      	movs	r2, #208	@ 0xd0
 80010d8:	0212      	lsls	r2, r2, #8
 80010da:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	000c      	movs	r4, r1
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	2201      	movs	r2, #1
 80010e2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	4a12      	ldr	r2, [pc, #72]	@ (800113c <MX_GPIO_Init+0x1d0>)
 80010f4:	0019      	movs	r1, r3
 80010f6:	0010      	movs	r0, r2
 80010f8:	f000 fafc 	bl	80016f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : E_Pin D_Pin C_Pin B_Pin
                           A_Pin */
	GPIO_InitStruct.Pin = E_Pin|D_Pin|C_Pin|B_Pin
 80010fc:	0021      	movs	r1, r4
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	22f8      	movs	r2, #248	@ 0xf8
 8001102:	0152      	lsls	r2, r2, #5
 8001104:	601a      	str	r2, [r3, #0]
			|A_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2201      	movs	r2, #1
 800110a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	187a      	adds	r2, r7, r1
 800111a:	2390      	movs	r3, #144	@ 0x90
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	0011      	movs	r1, r2
 8001120:	0018      	movs	r0, r3
 8001122:	f000 fae7 	bl	80016f4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b00b      	add	sp, #44	@ 0x2c
 800112c:	bd90      	pop	{r4, r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	40021000 	.word	0x40021000
 8001134:	48000800 	.word	0x48000800
 8001138:	48001400 	.word	0x48001400
 800113c:	48000400 	.word	0x48000400
 8001140:	00002c06 	.word	0x00002c06

08001144 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800114c:	46c0      	nop			@ (mov r8, r8)
 800114e:	e7fd      	b.n	800114c <Error_Handler+0x8>

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_MspInit+0x44>)
 8001158:	699a      	ldr	r2, [r3, #24]
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_MspInit+0x44>)
 800115c:	2101      	movs	r1, #1
 800115e:	430a      	orrs	r2, r1
 8001160:	619a      	str	r2, [r3, #24]
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <HAL_MspInit+0x44>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	2201      	movs	r2, #1
 8001168:	4013      	ands	r3, r2
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_MspInit+0x44>)
 8001170:	69da      	ldr	r2, [r3, #28]
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HAL_MspInit+0x44>)
 8001174:	2180      	movs	r1, #128	@ 0x80
 8001176:	0549      	lsls	r1, r1, #21
 8001178:	430a      	orrs	r2, r1
 800117a:	61da      	str	r2, [r3, #28]
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HAL_MspInit+0x44>)
 800117e:	69da      	ldr	r2, [r3, #28]
 8001180:	2380      	movs	r3, #128	@ 0x80
 8001182:	055b      	lsls	r3, r3, #21
 8001184:	4013      	ands	r3, r2
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a09      	ldr	r2, [pc, #36]	@ (80011cc <HAL_TIM_Base_MspInit+0x34>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10b      	bne.n	80011c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <HAL_TIM_Base_MspInit+0x38>)
 80011ac:	69da      	ldr	r2, [r3, #28]
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <HAL_TIM_Base_MspInit+0x38>)
 80011b0:	2102      	movs	r1, #2
 80011b2:	430a      	orrs	r2, r1
 80011b4:	61da      	str	r2, [r3, #28]
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <HAL_TIM_Base_MspInit+0x38>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	2202      	movs	r2, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b004      	add	sp, #16
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	40000400 	.word	0x40000400
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b08b      	sub	sp, #44	@ 0x2c
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	2414      	movs	r4, #20
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	0018      	movs	r0, r3
 80011e2:	2314      	movs	r3, #20
 80011e4:	001a      	movs	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	f002 f94c 	bl	8003484 <memset>
  if(huart->Instance==USART2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001264 <HAL_UART_MspInit+0x90>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d132      	bne.n	800125c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <HAL_UART_MspInit+0x94>)
 80011f8:	69da      	ldr	r2, [r3, #28]
 80011fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <HAL_UART_MspInit+0x94>)
 80011fc:	2180      	movs	r1, #128	@ 0x80
 80011fe:	0289      	lsls	r1, r1, #10
 8001200:	430a      	orrs	r2, r1
 8001202:	61da      	str	r2, [r3, #28]
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <HAL_UART_MspInit+0x94>)
 8001206:	69da      	ldr	r2, [r3, #28]
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	029b      	lsls	r3, r3, #10
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <HAL_UART_MspInit+0x94>)
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <HAL_UART_MspInit+0x94>)
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	0289      	lsls	r1, r1, #10
 800121c:	430a      	orrs	r2, r1
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <HAL_UART_MspInit+0x94>)
 8001222:	695a      	ldr	r2, [r3, #20]
 8001224:	2380      	movs	r3, #128	@ 0x80
 8001226:	029b      	lsls	r3, r3, #10
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800122e:	0021      	movs	r1, r4
 8001230:	187b      	adds	r3, r7, r1
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2202      	movs	r2, #2
 800123a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2203      	movs	r2, #3
 8001246:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2201      	movs	r2, #1
 800124c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	187a      	adds	r2, r7, r1
 8001250:	2390      	movs	r3, #144	@ 0x90
 8001252:	05db      	lsls	r3, r3, #23
 8001254:	0011      	movs	r1, r2
 8001256:	0018      	movs	r0, r3
 8001258:	f000 fa4c 	bl	80016f4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b00b      	add	sp, #44	@ 0x2c
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	40004400 	.word	0x40004400
 8001268:	40021000 	.word	0x40021000

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	e7fd      	b.n	8001270 <NMI_Handler+0x4>

08001274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	e7fd      	b.n	8001278 <HardFault_Handler+0x4>

0800127c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001280:	46c0      	nop			@ (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f93a 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  return 1;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_kill>:

int _kill(int pid, int sig)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012b4:	f002 f93c 	bl	8003530 <__errno>
 80012b8:	0003      	movs	r3, r0
 80012ba:	2216      	movs	r2, #22
 80012bc:	601a      	str	r2, [r3, #0]
  return -1;
 80012be:	2301      	movs	r3, #1
 80012c0:	425b      	negs	r3, r3
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_exit>:

void _exit (int status)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012d2:	2301      	movs	r3, #1
 80012d4:	425a      	negs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0011      	movs	r1, r2
 80012da:	0018      	movs	r0, r3
 80012dc:	f7ff ffe5 	bl	80012aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80012e0:	46c0      	nop			@ (mov r8, r8)
 80012e2:	e7fd      	b.n	80012e0 <_exit+0x16>

080012e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	e00a      	b.n	800130c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012f6:	e000      	b.n	80012fa <_read+0x16>
 80012f8:	bf00      	nop
 80012fa:	0001      	movs	r1, r0
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	60ba      	str	r2, [r7, #8]
 8001302:	b2ca      	uxtb	r2, r1
 8001304:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbf0      	blt.n	80012f6 <_read+0x12>
  }

  return len;
 8001314:	687b      	ldr	r3, [r7, #4]
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b006      	add	sp, #24
 800131c:	bd80      	pop	{r7, pc}

0800131e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	e009      	b.n	8001344 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	60ba      	str	r2, [r7, #8]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	0018      	movs	r0, r3
 800133a:	e000      	b.n	800133e <_write+0x20>
 800133c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	dbf1      	blt.n	8001330 <_write+0x12>
  }
  return len;
 800134c:	687b      	ldr	r3, [r7, #4]
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b006      	add	sp, #24
 8001354:	bd80      	pop	{r7, pc}

08001356 <_close>:

int _close(int file)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800135e:	2301      	movs	r3, #1
 8001360:	425b      	negs	r3, r3
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}

0800136a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2280      	movs	r2, #128	@ 0x80
 8001378:	0192      	lsls	r2, r2, #6
 800137a:	605a      	str	r2, [r3, #4]
  return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}

08001386 <_isatty>:

int _isatty(int file)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800138e:	2301      	movs	r3, #1
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}

08001398 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b004      	add	sp, #16
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b8:	4a14      	ldr	r2, [pc, #80]	@ (800140c <_sbrk+0x5c>)
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <_sbrk+0x60>)
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <_sbrk+0x64>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <_sbrk+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	18d3      	adds	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d207      	bcs.n	80013f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e0:	f002 f8a6 	bl	8003530 <__errno>
 80013e4:	0003      	movs	r3, r0
 80013e6:	220c      	movs	r2, #12
 80013e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	425b      	negs	r3, r3
 80013ee:	e009      	b.n	8001404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	18d2      	adds	r2, r2, r3
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <_sbrk+0x64>)
 8001400:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b006      	add	sp, #24
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20002000 	.word	0x20002000
 8001410:	00000400 	.word	0x00000400
 8001414:	20000170 	.word	0x20000170
 8001418:	200002c8 	.word	0x200002c8

0800141c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001420:	46c0      	nop			@ (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001428:	480d      	ldr	r0, [pc, #52]	@ (8001460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800142a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800142c:	f7ff fff6 	bl	800141c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <LoopForever+0x6>)
  ldr r1, =_edata
 8001432:	490d      	ldr	r1, [pc, #52]	@ (8001468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <LoopForever+0xe>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001448:	4c0a      	ldr	r4, [pc, #40]	@ (8001474 <LoopForever+0x16>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001456:	f002 f871 	bl	800353c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7ff fc4d 	bl	8000cf8 <main>

0800145e <LoopForever>:

LoopForever:
    b LoopForever
 800145e:	e7fe      	b.n	800145e <LoopForever>
  ldr   r0, =_estack
 8001460:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800146c:	08004350 	.word	0x08004350
  ldr r2, =_sbss
 8001470:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001474:	200002c4 	.word	0x200002c4

08001478 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC1_IRQHandler>
	...

0800147c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <HAL_Init+0x24>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_Init+0x24>)
 8001486:	2110      	movs	r1, #16
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f809 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001492:	f7ff fe5d 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <HAL_InitTick+0x5c>)
 80014ae:	681c      	ldr	r4, [r3, #0]
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <HAL_InitTick+0x60>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	0019      	movs	r1, r3
 80014b6:	23fa      	movs	r3, #250	@ 0xfa
 80014b8:	0098      	lsls	r0, r3, #2
 80014ba:	f7fe fe2f 	bl	800011c <__udivsi3>
 80014be:	0003      	movs	r3, r0
 80014c0:	0019      	movs	r1, r3
 80014c2:	0020      	movs	r0, r4
 80014c4:	f7fe fe2a 	bl	800011c <__udivsi3>
 80014c8:	0003      	movs	r3, r0
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 f905 	bl	80016da <HAL_SYSTICK_Config>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e00f      	b.n	80014f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d80b      	bhi.n	80014f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	2301      	movs	r3, #1
 80014e2:	425b      	negs	r3, r3
 80014e4:	2200      	movs	r2, #0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 f8e2 	bl	80016b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_InitTick+0x64>)
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b003      	add	sp, #12
 80014fe:	bd90      	pop	{r4, r7, pc}
 8001500:	20000014 	.word	0x20000014
 8001504:	2000001c 	.word	0x2000001c
 8001508:	20000018 	.word	0x20000018

0800150c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_IncTick+0x1c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	001a      	movs	r2, r3
 8001516:	4b05      	ldr	r3, [pc, #20]	@ (800152c <HAL_IncTick+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	18d2      	adds	r2, r2, r3
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <HAL_IncTick+0x20>)
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	46c0      	nop			@ (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	2000001c 	.word	0x2000001c
 800152c:	20000174 	.word	0x20000174

08001530 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b02      	ldr	r3, [pc, #8]	@ (8001540 <HAL_GetTick+0x10>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	20000174 	.word	0x20000174

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff fff0 	bl	8001530 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3301      	adds	r3, #1
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <HAL_Delay+0x44>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	001a      	movs	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	189b      	adds	r3, r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	f7ff ffe0 	bl	8001530 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	46c0      	nop			@ (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b004      	add	sp, #16
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	2000001c 	.word	0x2000001c

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	0002      	movs	r2, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b7f      	cmp	r3, #127	@ 0x7f
 80015a0:	d828      	bhi.n	80015f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001660 <__NVIC_SetPriority+0xd4>)
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	33c0      	adds	r3, #192	@ 0xc0
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	589b      	ldr	r3, [r3, r2]
 80015b2:	1dfa      	adds	r2, r7, #7
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	0011      	movs	r1, r2
 80015b8:	2203      	movs	r2, #3
 80015ba:	400a      	ands	r2, r1
 80015bc:	00d2      	lsls	r2, r2, #3
 80015be:	21ff      	movs	r1, #255	@ 0xff
 80015c0:	4091      	lsls	r1, r2
 80015c2:	000a      	movs	r2, r1
 80015c4:	43d2      	mvns	r2, r2
 80015c6:	401a      	ands	r2, r3
 80015c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	22ff      	movs	r2, #255	@ 0xff
 80015d0:	401a      	ands	r2, r3
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	0018      	movs	r0, r3
 80015d8:	2303      	movs	r3, #3
 80015da:	4003      	ands	r3, r0
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e0:	481f      	ldr	r0, [pc, #124]	@ (8001660 <__NVIC_SetPriority+0xd4>)
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	430a      	orrs	r2, r1
 80015ec:	33c0      	adds	r3, #192	@ 0xc0
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015f2:	e031      	b.n	8001658 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001664 <__NVIC_SetPriority+0xd8>)
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	0019      	movs	r1, r3
 80015fc:	230f      	movs	r3, #15
 80015fe:	400b      	ands	r3, r1
 8001600:	3b08      	subs	r3, #8
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3306      	adds	r3, #6
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	18d3      	adds	r3, r2, r3
 800160a:	3304      	adds	r3, #4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1dfa      	adds	r2, r7, #7
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	0011      	movs	r1, r2
 8001614:	2203      	movs	r2, #3
 8001616:	400a      	ands	r2, r1
 8001618:	00d2      	lsls	r2, r2, #3
 800161a:	21ff      	movs	r1, #255	@ 0xff
 800161c:	4091      	lsls	r1, r2
 800161e:	000a      	movs	r2, r1
 8001620:	43d2      	mvns	r2, r2
 8001622:	401a      	ands	r2, r3
 8001624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	22ff      	movs	r2, #255	@ 0xff
 800162c:	401a      	ands	r2, r3
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	0018      	movs	r0, r3
 8001634:	2303      	movs	r3, #3
 8001636:	4003      	ands	r3, r0
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800163c:	4809      	ldr	r0, [pc, #36]	@ (8001664 <__NVIC_SetPriority+0xd8>)
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	001c      	movs	r4, r3
 8001644:	230f      	movs	r3, #15
 8001646:	4023      	ands	r3, r4
 8001648:	3b08      	subs	r3, #8
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	430a      	orrs	r2, r1
 800164e:	3306      	adds	r3, #6
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	18c3      	adds	r3, r0, r3
 8001654:	3304      	adds	r3, #4
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	46c0      	nop			@ (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b003      	add	sp, #12
 800165e:	bd90      	pop	{r4, r7, pc}
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	1e5a      	subs	r2, r3, #1
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	045b      	lsls	r3, r3, #17
 8001678:	429a      	cmp	r2, r3
 800167a:	d301      	bcc.n	8001680 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167c:	2301      	movs	r3, #1
 800167e:	e010      	b.n	80016a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001680:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <SysTick_Config+0x44>)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	3a01      	subs	r2, #1
 8001686:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001688:	2301      	movs	r3, #1
 800168a:	425b      	negs	r3, r3
 800168c:	2103      	movs	r1, #3
 800168e:	0018      	movs	r0, r3
 8001690:	f7ff ff7c 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <SysTick_Config+0x44>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <SysTick_Config+0x44>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			@ (mov r8, r8)
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	210f      	movs	r1, #15
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	1c02      	adds	r2, r0, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	0011      	movs	r1, r2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff ffbf 	bl	8001668 <SysTick_Config>
 80016ea:	0003      	movs	r3, r0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001702:	e14f      	b.n	80019a4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4091      	lsls	r1, r2
 800170e:	000a      	movs	r2, r1
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d100      	bne.n	800171c <HAL_GPIO_Init+0x28>
 800171a:	e140      	b.n	800199e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2203      	movs	r2, #3
 8001722:	4013      	ands	r3, r2
 8001724:	2b01      	cmp	r3, #1
 8001726:	d005      	beq.n	8001734 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2203      	movs	r2, #3
 800172e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001730:	2b02      	cmp	r3, #2
 8001732:	d130      	bne.n	8001796 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	409a      	lsls	r2, r3
 8001742:	0013      	movs	r3, r2
 8001744:	43da      	mvns	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	409a      	lsls	r2, r3
 8001756:	0013      	movs	r3, r2
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800176a:	2201      	movs	r2, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	43da      	mvns	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	2201      	movs	r2, #1
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2203      	movs	r2, #3
 800179c:	4013      	ands	r3, r2
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d017      	beq.n	80017d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	43da      	mvns	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2203      	movs	r2, #3
 80017d8:	4013      	ands	r3, r2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d123      	bne.n	8001826 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	58d3      	ldr	r3, [r2, r3]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2207      	movs	r2, #7
 80017f0:	4013      	ands	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2107      	movs	r1, #7
 800180a:	400b      	ands	r3, r1
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	6939      	ldr	r1, [r7, #16]
 8001824:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2203      	movs	r2, #3
 8001844:	401a      	ands	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	0013      	movs	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	23c0      	movs	r3, #192	@ 0xc0
 8001860:	029b      	lsls	r3, r3, #10
 8001862:	4013      	ands	r3, r2
 8001864:	d100      	bne.n	8001868 <HAL_GPIO_Init+0x174>
 8001866:	e09a      	b.n	800199e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001868:	4b54      	ldr	r3, [pc, #336]	@ (80019bc <HAL_GPIO_Init+0x2c8>)
 800186a:	699a      	ldr	r2, [r3, #24]
 800186c:	4b53      	ldr	r3, [pc, #332]	@ (80019bc <HAL_GPIO_Init+0x2c8>)
 800186e:	2101      	movs	r1, #1
 8001870:	430a      	orrs	r2, r1
 8001872:	619a      	str	r2, [r3, #24]
 8001874:	4b51      	ldr	r3, [pc, #324]	@ (80019bc <HAL_GPIO_Init+0x2c8>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2201      	movs	r2, #1
 800187a:	4013      	ands	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001880:	4a4f      	ldr	r2, [pc, #316]	@ (80019c0 <HAL_GPIO_Init+0x2cc>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	589b      	ldr	r3, [r3, r2]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2203      	movs	r2, #3
 8001892:	4013      	ands	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	409a      	lsls	r2, r3
 800189a:	0013      	movs	r3, r2
 800189c:	43da      	mvns	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	2390      	movs	r3, #144	@ 0x90
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x1e2>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a44      	ldr	r2, [pc, #272]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x1de>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a43      	ldr	r2, [pc, #268]	@ (80019c8 <HAL_GPIO_Init+0x2d4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x1da>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a42      	ldr	r2, [pc, #264]	@ (80019cc <HAL_GPIO_Init+0x2d8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x1d6>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x1e4>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e004      	b.n	80018d8 <HAL_GPIO_Init+0x1e4>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_Init+0x1e4>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x1e4>
 80018d6:	2300      	movs	r3, #0
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	2103      	movs	r1, #3
 80018dc:	400a      	ands	r2, r1
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	4093      	lsls	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e8:	4935      	ldr	r1, [pc, #212]	@ (80019c0 <HAL_GPIO_Init+0x2cc>)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f6:	4b36      	ldr	r3, [pc, #216]	@ (80019d0 <HAL_GPIO_Init+0x2dc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43da      	mvns	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	2380      	movs	r3, #128	@ 0x80
 800190c:	035b      	lsls	r3, r3, #13
 800190e:	4013      	ands	r3, r2
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800191a:	4b2d      	ldr	r3, [pc, #180]	@ (80019d0 <HAL_GPIO_Init+0x2dc>)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001920:	4b2b      	ldr	r3, [pc, #172]	@ (80019d0 <HAL_GPIO_Init+0x2dc>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43da      	mvns	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	039b      	lsls	r3, r3, #14
 8001938:	4013      	ands	r3, r2
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001944:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <HAL_GPIO_Init+0x2dc>)
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800194a:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_GPIO_Init+0x2dc>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43da      	mvns	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	2380      	movs	r3, #128	@ 0x80
 8001960:	029b      	lsls	r3, r3, #10
 8001962:	4013      	ands	r3, r2
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800196e:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <HAL_GPIO_Init+0x2dc>)
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001974:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <HAL_GPIO_Init+0x2dc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43da      	mvns	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	025b      	lsls	r3, r3, #9
 800198c:	4013      	ands	r3, r2
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001998:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <HAL_GPIO_Init+0x2dc>)
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	40da      	lsrs	r2, r3
 80019ac:	1e13      	subs	r3, r2, #0
 80019ae:	d000      	beq.n	80019b2 <HAL_GPIO_Init+0x2be>
 80019b0:	e6a8      	b.n	8001704 <HAL_GPIO_Init+0x10>
  } 
}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	46c0      	nop			@ (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b006      	add	sp, #24
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010000 	.word	0x40010000
 80019c4:	48000400 	.word	0x48000400
 80019c8:	48000800 	.word	0x48000800
 80019cc:	48000c00 	.word	0x48000c00
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	000a      	movs	r2, r1
 80019de:	1cbb      	adds	r3, r7, #2
 80019e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	1cba      	adds	r2, r7, #2
 80019e8:	8812      	ldrh	r2, [r2, #0]
 80019ea:	4013      	ands	r3, r2
 80019ec:	d004      	beq.n	80019f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80019ee:	230f      	movs	r3, #15
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	e003      	b.n	8001a00 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019f8:	230f      	movs	r3, #15
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a00:	230f      	movs	r3, #15
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	781b      	ldrb	r3, [r3, #0]
  }
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b004      	add	sp, #16
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	0008      	movs	r0, r1
 8001a18:	0011      	movs	r1, r2
 8001a1a:	1cbb      	adds	r3, r7, #2
 8001a1c:	1c02      	adds	r2, r0, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
 8001a20:	1c7b      	adds	r3, r7, #1
 8001a22:	1c0a      	adds	r2, r1, #0
 8001a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a26:	1c7b      	adds	r3, r7, #1
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a2e:	1cbb      	adds	r3, r7, #2
 8001a30:	881a      	ldrh	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a36:	e003      	b.n	8001a40 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a38:	1cbb      	adds	r3, r7, #2
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e301      	b.n	800205e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4013      	ands	r3, r2
 8001a62:	d100      	bne.n	8001a66 <HAL_RCC_OscConfig+0x1e>
 8001a64:	e08d      	b.n	8001b82 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a66:	4bc3      	ldr	r3, [pc, #780]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d00e      	beq.n	8001a90 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a72:	4bc0      	ldr	r3, [pc, #768]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	220c      	movs	r2, #12
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d116      	bne.n	8001aac <HAL_RCC_OscConfig+0x64>
 8001a7e:	4bbd      	ldr	r3, [pc, #756]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	025b      	lsls	r3, r3, #9
 8001a86:	401a      	ands	r2, r3
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	025b      	lsls	r3, r3, #9
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d10d      	bne.n	8001aac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	4bb8      	ldr	r3, [pc, #736]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	029b      	lsls	r3, r3, #10
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d100      	bne.n	8001a9e <HAL_RCC_OscConfig+0x56>
 8001a9c:	e070      	b.n	8001b80 <HAL_RCC_OscConfig+0x138>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d000      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x60>
 8001aa6:	e06b      	b.n	8001b80 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e2d8      	b.n	800205e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x7c>
 8001ab4:	4baf      	ldr	r3, [pc, #700]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4bae      	ldr	r3, [pc, #696]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	0249      	lsls	r1, r1, #9
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e02f      	b.n	8001b24 <HAL_RCC_OscConfig+0xdc>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10c      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x9e>
 8001acc:	4ba9      	ldr	r3, [pc, #676]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4ba8      	ldr	r3, [pc, #672]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	49a9      	ldr	r1, [pc, #676]	@ (8001d78 <HAL_RCC_OscConfig+0x330>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	4ba6      	ldr	r3, [pc, #664]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4ba5      	ldr	r3, [pc, #660]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	49a7      	ldr	r1, [pc, #668]	@ (8001d7c <HAL_RCC_OscConfig+0x334>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e01e      	b.n	8001b24 <HAL_RCC_OscConfig+0xdc>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d10e      	bne.n	8001b0c <HAL_RCC_OscConfig+0xc4>
 8001aee:	4ba1      	ldr	r3, [pc, #644]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4ba0      	ldr	r3, [pc, #640]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	02c9      	lsls	r1, r1, #11
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	4b9d      	ldr	r3, [pc, #628]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b9c      	ldr	r3, [pc, #624]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001b02:	2180      	movs	r1, #128	@ 0x80
 8001b04:	0249      	lsls	r1, r1, #9
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xdc>
 8001b0c:	4b99      	ldr	r3, [pc, #612]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b98      	ldr	r3, [pc, #608]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	4999      	ldr	r1, [pc, #612]	@ (8001d78 <HAL_RCC_OscConfig+0x330>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	4b96      	ldr	r3, [pc, #600]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b95      	ldr	r3, [pc, #596]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	4997      	ldr	r1, [pc, #604]	@ (8001d7c <HAL_RCC_OscConfig+0x334>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d014      	beq.n	8001b56 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fd00 	bl	8001530 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b36:	f7ff fcfb 	bl	8001530 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	@ 0x64
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e28a      	b.n	800205e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b48:	4b8a      	ldr	r3, [pc, #552]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	029b      	lsls	r3, r3, #10
 8001b50:	4013      	ands	r3, r2
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0xee>
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7ff fceb 	bl	8001530 <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fce6 	bl	8001530 <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	@ 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e275      	b.n	800205e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	4b80      	ldr	r3, [pc, #512]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	@ 0x80
 8001b78:	029b      	lsls	r3, r3, #10
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x118>
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d100      	bne.n	8001b8e <HAL_RCC_OscConfig+0x146>
 8001b8c:	e069      	b.n	8001c62 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b8e:	4b79      	ldr	r3, [pc, #484]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	220c      	movs	r2, #12
 8001b94:	4013      	ands	r3, r2
 8001b96:	d00b      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b98:	4b76      	ldr	r3, [pc, #472]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	220c      	movs	r2, #12
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d11c      	bne.n	8001bde <HAL_RCC_OscConfig+0x196>
 8001ba4:	4b73      	ldr	r3, [pc, #460]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	025b      	lsls	r3, r3, #9
 8001bac:	4013      	ands	r3, r2
 8001bae:	d116      	bne.n	8001bde <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb0:	4b70      	ldr	r3, [pc, #448]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x17e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e24b      	b.n	800205e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b6b      	ldr	r3, [pc, #428]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	22f8      	movs	r2, #248	@ 0xf8
 8001bcc:	4393      	bics	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	00da      	lsls	r2, r3, #3
 8001bd6:	4b67      	ldr	r3, [pc, #412]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bdc:	e041      	b.n	8001c62 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d024      	beq.n	8001c30 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be6:	4b63      	ldr	r3, [pc, #396]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b62      	ldr	r3, [pc, #392]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fc9d 	bl	8001530 <HAL_GetTick>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fc98 	bl	8001530 <HAL_GetTick>
 8001c00:	0002      	movs	r2, r0
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e227      	b.n	800205e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	4b59      	ldr	r3, [pc, #356]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2202      	movs	r2, #2
 8001c14:	4013      	ands	r3, r2
 8001c16:	d0f1      	beq.n	8001bfc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b56      	ldr	r3, [pc, #344]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	22f8      	movs	r2, #248	@ 0xf8
 8001c1e:	4393      	bics	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00da      	lsls	r2, r3, #3
 8001c28:	4b52      	ldr	r3, [pc, #328]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e018      	b.n	8001c62 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c30:	4b50      	ldr	r3, [pc, #320]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b4f      	ldr	r3, [pc, #316]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	438a      	bics	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc78 	bl	8001530 <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c46:	f7ff fc73 	bl	8001530 <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e202      	b.n	800205e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c58:	4b46      	ldr	r3, [pc, #280]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d1f1      	bne.n	8001c46 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2208      	movs	r2, #8
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d036      	beq.n	8001cda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d019      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c74:	4b3f      	ldr	r3, [pc, #252]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c78:	4b3e      	ldr	r3, [pc, #248]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7ff fc56 	bl	8001530 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fc51 	bl	8001530 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1e0      	b.n	800205e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9c:	4b35      	ldr	r3, [pc, #212]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d0f1      	beq.n	8001c8a <HAL_RCC_OscConfig+0x242>
 8001ca6:	e018      	b.n	8001cda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca8:	4b32      	ldr	r3, [pc, #200]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001caa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cac:	4b31      	ldr	r3, [pc, #196]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	438a      	bics	r2, r1
 8001cb2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fc3c 	bl	8001530 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fc37 	bl	8001530 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e1c6      	b.n	800205e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	4b28      	ldr	r3, [pc, #160]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d1f1      	bne.n	8001cbe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x29e>
 8001ce4:	e0b4      	b.n	8001e50 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce6:	201f      	movs	r0, #31
 8001ce8:	183b      	adds	r3, r7, r0
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cee:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	055b      	lsls	r3, r3, #21
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d110      	bne.n	8001d1c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001d00:	2180      	movs	r1, #128	@ 0x80
 8001d02:	0549      	lsls	r1, r1, #21
 8001d04:	430a      	orrs	r2, r1
 8001d06:	61da      	str	r2, [r3, #28]
 8001d08:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	2380      	movs	r3, #128	@ 0x80
 8001d0e:	055b      	lsls	r3, r3, #21
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d16:	183b      	adds	r3, r7, r0
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4013      	ands	r3, r2
 8001d26:	d11a      	bne.n	8001d5e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d28:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d2e:	2180      	movs	r1, #128	@ 0x80
 8001d30:	0049      	lsls	r1, r1, #1
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fbfb 	bl	8001530 <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d40:	f7ff fbf6 	bl	8001530 <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	@ 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e185      	b.n	800205e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	@ 0x80
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d10e      	bne.n	8001d84 <HAL_RCC_OscConfig+0x33c>
 8001d66:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001d68:	6a1a      	ldr	r2, [r3, #32]
 8001d6a:	4b02      	ldr	r3, [pc, #8]	@ (8001d74 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	621a      	str	r2, [r3, #32]
 8001d72:	e035      	b.n	8001de0 <HAL_RCC_OscConfig+0x398>
 8001d74:	40021000 	.word	0x40021000
 8001d78:	fffeffff 	.word	0xfffeffff
 8001d7c:	fffbffff 	.word	0xfffbffff
 8001d80:	40007000 	.word	0x40007000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10c      	bne.n	8001da6 <HAL_RCC_OscConfig+0x35e>
 8001d8c:	4bb6      	ldr	r3, [pc, #728]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	4bb5      	ldr	r3, [pc, #724]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	438a      	bics	r2, r1
 8001d96:	621a      	str	r2, [r3, #32]
 8001d98:	4bb3      	ldr	r3, [pc, #716]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	4bb2      	ldr	r3, [pc, #712]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	2104      	movs	r1, #4
 8001da0:	438a      	bics	r2, r1
 8001da2:	621a      	str	r2, [r3, #32]
 8001da4:	e01c      	b.n	8001de0 <HAL_RCC_OscConfig+0x398>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x380>
 8001dae:	4bae      	ldr	r3, [pc, #696]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001db0:	6a1a      	ldr	r2, [r3, #32]
 8001db2:	4bad      	ldr	r3, [pc, #692]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001db4:	2104      	movs	r1, #4
 8001db6:	430a      	orrs	r2, r1
 8001db8:	621a      	str	r2, [r3, #32]
 8001dba:	4bab      	ldr	r3, [pc, #684]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001dbc:	6a1a      	ldr	r2, [r3, #32]
 8001dbe:	4baa      	ldr	r3, [pc, #680]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	621a      	str	r2, [r3, #32]
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0x398>
 8001dc8:	4ba7      	ldr	r3, [pc, #668]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001dca:	6a1a      	ldr	r2, [r3, #32]
 8001dcc:	4ba6      	ldr	r3, [pc, #664]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	438a      	bics	r2, r1
 8001dd2:	621a      	str	r2, [r3, #32]
 8001dd4:	4ba4      	ldr	r3, [pc, #656]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001dd6:	6a1a      	ldr	r2, [r3, #32]
 8001dd8:	4ba3      	ldr	r3, [pc, #652]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001dda:	2104      	movs	r1, #4
 8001ddc:	438a      	bics	r2, r1
 8001dde:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d014      	beq.n	8001e12 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff fba2 	bl	8001530 <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df0:	e009      	b.n	8001e06 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7ff fb9d 	bl	8001530 <HAL_GetTick>
 8001df6:	0002      	movs	r2, r0
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	4a9b      	ldr	r2, [pc, #620]	@ (800206c <HAL_RCC_OscConfig+0x624>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e12b      	b.n	800205e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e06:	4b98      	ldr	r3, [pc, #608]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x3aa>
 8001e10:	e013      	b.n	8001e3a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fb8d 	bl	8001530 <HAL_GetTick>
 8001e16:	0003      	movs	r3, r0
 8001e18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1a:	e009      	b.n	8001e30 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fb88 	bl	8001530 <HAL_GetTick>
 8001e20:	0002      	movs	r2, r0
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	4a91      	ldr	r2, [pc, #580]	@ (800206c <HAL_RCC_OscConfig+0x624>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e116      	b.n	800205e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e30:	4b8d      	ldr	r3, [pc, #564]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	2202      	movs	r2, #2
 8001e36:	4013      	ands	r3, r2
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e3a:	231f      	movs	r3, #31
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e44:	4b88      	ldr	r3, [pc, #544]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	4b87      	ldr	r3, [pc, #540]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001e4a:	4989      	ldr	r1, [pc, #548]	@ (8002070 <HAL_RCC_OscConfig+0x628>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2210      	movs	r2, #16
 8001e56:	4013      	ands	r3, r2
 8001e58:	d063      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d12a      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e62:	4b81      	ldr	r3, [pc, #516]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e66:	4b80      	ldr	r3, [pc, #512]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001e68:	2104      	movs	r1, #4
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e6e:	4b7e      	ldr	r3, [pc, #504]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e72:	4b7d      	ldr	r3, [pc, #500]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001e74:	2101      	movs	r1, #1
 8001e76:	430a      	orrs	r2, r1
 8001e78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fb59 	bl	8001530 <HAL_GetTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e84:	f7ff fb54 	bl	8001530 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e0e3      	b.n	800205e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e96:	4b74      	ldr	r3, [pc, #464]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d0f1      	beq.n	8001e84 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ea0:	4b71      	ldr	r3, [pc, #452]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea4:	22f8      	movs	r2, #248	@ 0xf8
 8001ea6:	4393      	bics	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	00da      	lsls	r2, r3, #3
 8001eb0:	4b6d      	ldr	r3, [pc, #436]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eb6:	e034      	b.n	8001f22 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	3305      	adds	r3, #5
 8001ebe:	d111      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ec0:	4b69      	ldr	r3, [pc, #420]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec4:	4b68      	ldr	r3, [pc, #416]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	438a      	bics	r2, r1
 8001eca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ecc:	4b66      	ldr	r3, [pc, #408]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed0:	22f8      	movs	r2, #248	@ 0xf8
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	00da      	lsls	r2, r3, #3
 8001edc:	4b62      	ldr	r3, [pc, #392]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ee2:	e01e      	b.n	8001f22 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ee4:	4b60      	ldr	r3, [pc, #384]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ee8:	4b5f      	ldr	r3, [pc, #380]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001eea:	2104      	movs	r1, #4
 8001eec:	430a      	orrs	r2, r1
 8001eee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ef0:	4b5d      	ldr	r3, [pc, #372]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef4:	4b5c      	ldr	r3, [pc, #368]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	438a      	bics	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7ff fb18 	bl	8001530 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f06:	f7ff fb13 	bl	8001530 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e0a2      	b.n	800205e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f18:	4b53      	ldr	r3, [pc, #332]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d1f1      	bne.n	8001f06 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d100      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4e4>
 8001f2a:	e097      	b.n	800205c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f2c:	4b4e      	ldr	r3, [pc, #312]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	220c      	movs	r2, #12
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d100      	bne.n	8001f3a <HAL_RCC_OscConfig+0x4f2>
 8001f38:	e06b      	b.n	8002012 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d14c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b49      	ldr	r3, [pc, #292]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b48      	ldr	r3, [pc, #288]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001f48:	494a      	ldr	r1, [pc, #296]	@ (8002074 <HAL_RCC_OscConfig+0x62c>)
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff faef 	bl	8001530 <HAL_GetTick>
 8001f52:	0003      	movs	r3, r0
 8001f54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff faea 	bl	8001530 <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e079      	b.n	800205e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	049b      	lsls	r3, r3, #18
 8001f72:	4013      	ands	r3, r2
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f76:	4b3c      	ldr	r3, [pc, #240]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	4393      	bics	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f84:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001f86:	430a      	orrs	r2, r1
 8001f88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f8a:	4b37      	ldr	r3, [pc, #220]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a3a      	ldr	r2, [pc, #232]	@ (8002078 <HAL_RCC_OscConfig+0x630>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	4b32      	ldr	r3, [pc, #200]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa4:	4b30      	ldr	r3, [pc, #192]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001faa:	2180      	movs	r1, #128	@ 0x80
 8001fac:	0449      	lsls	r1, r1, #17
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fabd 	bl	8001530 <HAL_GetTick>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7ff fab8 	bl	8001530 <HAL_GetTick>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e047      	b.n	800205e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fce:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	049b      	lsls	r3, r3, #18
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x574>
 8001fda:	e03f      	b.n	800205c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fdc:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001fe2:	4924      	ldr	r1, [pc, #144]	@ (8002074 <HAL_RCC_OscConfig+0x62c>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff faa2 	bl	8001530 <HAL_GetTick>
 8001fec:	0003      	movs	r3, r0
 8001fee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff fa9d 	bl	8001530 <HAL_GetTick>
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e02c      	b.n	800205e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002004:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	049b      	lsls	r3, r3, #18
 800200c:	4013      	ands	r3, r2
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5aa>
 8002010:	e024      	b.n	800205c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e01f      	b.n	800205e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002024:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	2380      	movs	r3, #128	@ 0x80
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	401a      	ands	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	429a      	cmp	r2, r3
 8002038:	d10e      	bne.n	8002058 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	220f      	movs	r2, #15
 800203e:	401a      	ands	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d107      	bne.n	8002058 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	23f0      	movs	r3, #240	@ 0xf0
 800204c:	039b      	lsls	r3, r3, #14
 800204e:	401a      	ands	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b008      	add	sp, #32
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	40021000 	.word	0x40021000
 800206c:	00001388 	.word	0x00001388
 8002070:	efffffff 	.word	0xefffffff
 8002074:	feffffff 	.word	0xfeffffff
 8002078:	ffc2ffff 	.word	0xffc2ffff

0800207c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0b3      	b.n	80021f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b5b      	ldr	r3, [pc, #364]	@ (8002200 <HAL_RCC_ClockConfig+0x184>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	4013      	ands	r3, r2
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d911      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b58      	ldr	r3, [pc, #352]	@ (8002200 <HAL_RCC_ClockConfig+0x184>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	4b55      	ldr	r3, [pc, #340]	@ (8002200 <HAL_RCC_ClockConfig+0x184>)
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b0:	4b53      	ldr	r3, [pc, #332]	@ (8002200 <HAL_RCC_ClockConfig+0x184>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2201      	movs	r2, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e09a      	b.n	80021f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d015      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2204      	movs	r2, #4
 80020d2:	4013      	ands	r3, r2
 80020d4:	d006      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4b4a      	ldr	r3, [pc, #296]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 80020dc:	21e0      	movs	r1, #224	@ 0xe0
 80020de:	00c9      	lsls	r1, r1, #3
 80020e0:	430a      	orrs	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e4:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	22f0      	movs	r2, #240	@ 0xf0
 80020ea:	4393      	bics	r3, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	4b44      	ldr	r3, [pc, #272]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	4013      	ands	r3, r2
 8002100:	d040      	beq.n	8002184 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b3e      	ldr	r3, [pc, #248]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	029b      	lsls	r3, r3, #10
 8002112:	4013      	ands	r3, r2
 8002114:	d114      	bne.n	8002140 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06e      	b.n	80021f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002122:	4b38      	ldr	r3, [pc, #224]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	2380      	movs	r3, #128	@ 0x80
 8002128:	049b      	lsls	r3, r3, #18
 800212a:	4013      	ands	r3, r2
 800212c:	d108      	bne.n	8002140 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e062      	b.n	80021f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002132:	4b34      	ldr	r3, [pc, #208]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2202      	movs	r2, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e05b      	b.n	80021f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002140:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2203      	movs	r2, #3
 8002146:	4393      	bics	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 8002150:	430a      	orrs	r2, r1
 8002152:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002154:	f7ff f9ec 	bl	8001530 <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215c:	e009      	b.n	8002172 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215e:	f7ff f9e7 	bl	8001530 <HAL_GetTick>
 8002162:	0002      	movs	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	4a27      	ldr	r2, [pc, #156]	@ (8002208 <HAL_RCC_ClockConfig+0x18c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e042      	b.n	80021f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	4b24      	ldr	r3, [pc, #144]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	220c      	movs	r2, #12
 8002178:	401a      	ands	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	429a      	cmp	r2, r3
 8002182:	d1ec      	bne.n	800215e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002184:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <HAL_RCC_ClockConfig+0x184>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2201      	movs	r2, #1
 800218a:	4013      	ands	r3, r2
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d211      	bcs.n	80021b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_RCC_ClockConfig+0x184>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2201      	movs	r2, #1
 8002198:	4393      	bics	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <HAL_RCC_ClockConfig+0x184>)
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a4:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <HAL_RCC_ClockConfig+0x184>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4013      	ands	r3, r2
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e020      	b.n	80021f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2204      	movs	r2, #4
 80021bc:	4013      	ands	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021c0:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a11      	ldr	r2, [pc, #68]	@ (800220c <HAL_RCC_ClockConfig+0x190>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021d4:	f000 f820 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021d8:	0001      	movs	r1, r0
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <HAL_RCC_ClockConfig+0x188>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	220f      	movs	r2, #15
 80021e2:	4013      	ands	r3, r2
 80021e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <HAL_RCC_ClockConfig+0x194>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	000a      	movs	r2, r1
 80021ea:	40da      	lsrs	r2, r3
 80021ec:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_RCC_ClockConfig+0x198>)
 80021ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f7ff f957 	bl	80014a4 <HAL_InitTick>
  
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b004      	add	sp, #16
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	00001388 	.word	0x00001388
 800220c:	fffff8ff 	.word	0xfffff8ff
 8002210:	08004230 	.word	0x08004230
 8002214:	20000014 	.word	0x20000014

08002218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002232:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	220c      	movs	r2, #12
 800223c:	4013      	ands	r3, r2
 800223e:	2b04      	cmp	r3, #4
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x30>
 8002242:	2b08      	cmp	r3, #8
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x36>
 8002246:	e02c      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002248:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800224a:	613b      	str	r3, [r7, #16]
      break;
 800224c:	e02c      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	220f      	movs	r2, #15
 8002254:	4013      	ands	r3, r2
 8002256:	4a19      	ldr	r2, [pc, #100]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800225c:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	220f      	movs	r2, #15
 8002262:	4013      	ands	r3, r2
 8002264:	4a16      	ldr	r2, [pc, #88]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	2380      	movs	r3, #128	@ 0x80
 800226e:	025b      	lsls	r3, r3, #9
 8002270:	4013      	ands	r3, r2
 8002272:	d009      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	4810      	ldr	r0, [pc, #64]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002278:	f7fd ff50 	bl	800011c <__udivsi3>
 800227c:	0003      	movs	r3, r0
 800227e:	001a      	movs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4353      	muls	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e009      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	000a      	movs	r2, r1
 800228c:	0152      	lsls	r2, r2, #5
 800228e:	1a52      	subs	r2, r2, r1
 8002290:	0193      	lsls	r3, r2, #6
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	185b      	adds	r3, r3, r1
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	613b      	str	r3, [r7, #16]
      break;
 80022a0:	e002      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022a2:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022a4:	613b      	str	r3, [r7, #16]
      break;
 80022a6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022a8:	693b      	ldr	r3, [r7, #16]
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b006      	add	sp, #24
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	40021000 	.word	0x40021000
 80022b8:	007a1200 	.word	0x007a1200
 80022bc:	08004248 	.word	0x08004248
 80022c0:	08004258 	.word	0x08004258

080022c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c8:	4b02      	ldr	r3, [pc, #8]	@ (80022d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	20000014 	.word	0x20000014

080022d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80022dc:	f7ff fff2 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 80022e0:	0001      	movs	r1, r0
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	2207      	movs	r2, #7
 80022ea:	4013      	ands	r3, r2
 80022ec:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	40d9      	lsrs	r1, r3
 80022f2:	000b      	movs	r3, r1
}    
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	40021000 	.word	0x40021000
 8002300:	08004240 	.word	0x08004240

08002304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e042      	b.n	800239c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	223d      	movs	r2, #61	@ 0x3d
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	223c      	movs	r2, #60	@ 0x3c
 8002326:	2100      	movs	r1, #0
 8002328:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0018      	movs	r0, r3
 800232e:	f7fe ff33 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223d      	movs	r2, #61	@ 0x3d
 8002336:	2102      	movs	r1, #2
 8002338:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	0019      	movs	r1, r3
 8002344:	0010      	movs	r0, r2
 8002346:	f000 f945 	bl	80025d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2246      	movs	r2, #70	@ 0x46
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	223e      	movs	r2, #62	@ 0x3e
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	223f      	movs	r2, #63	@ 0x3f
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2240      	movs	r2, #64	@ 0x40
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2241      	movs	r2, #65	@ 0x41
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2242      	movs	r2, #66	@ 0x42
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2243      	movs	r2, #67	@ 0x43
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2244      	movs	r2, #68	@ 0x44
 8002386:	2101      	movs	r1, #1
 8002388:	5499      	strb	r1, [r3, r2]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2245      	movs	r2, #69	@ 0x45
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	223d      	movs	r2, #61	@ 0x3d
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	223d      	movs	r2, #61	@ 0x3d
 80023b0:	5c9b      	ldrb	r3, [r3, r2]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d001      	beq.n	80023bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e02d      	b.n	8002418 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	223d      	movs	r2, #61	@ 0x3d
 80023c0:	2102      	movs	r1, #2
 80023c2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a15      	ldr	r2, [pc, #84]	@ (8002420 <HAL_TIM_Base_Start+0x7c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d009      	beq.n	80023e2 <HAL_TIM_Base_Start+0x3e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a14      	ldr	r2, [pc, #80]	@ (8002424 <HAL_TIM_Base_Start+0x80>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_TIM_Base_Start+0x3e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <HAL_TIM_Base_Start+0x84>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d111      	bne.n	8002406 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2207      	movs	r2, #7
 80023ea:	4013      	ands	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b06      	cmp	r3, #6
 80023f2:	d010      	beq.n	8002416 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2101      	movs	r1, #1
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002404:	e007      	b.n	8002416 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	0018      	movs	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	b004      	add	sp, #16
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40000400 	.word	0x40000400
 8002428:	40014000 	.word	0x40014000

0800242c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002436:	230f      	movs	r3, #15
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	223c      	movs	r2, #60	@ 0x3c
 8002442:	5c9b      	ldrb	r3, [r3, r2]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_TIM_ConfigClockSource+0x20>
 8002448:	2302      	movs	r3, #2
 800244a:	e0bc      	b.n	80025c6 <HAL_TIM_ConfigClockSource+0x19a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	223c      	movs	r2, #60	@ 0x3c
 8002450:	2101      	movs	r1, #1
 8002452:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	223d      	movs	r2, #61	@ 0x3d
 8002458:	2102      	movs	r1, #2
 800245a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2277      	movs	r2, #119	@ 0x77
 8002468:	4393      	bics	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4a58      	ldr	r2, [pc, #352]	@ (80025d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002470:	4013      	ands	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2280      	movs	r2, #128	@ 0x80
 8002482:	0192      	lsls	r2, r2, #6
 8002484:	4293      	cmp	r3, r2
 8002486:	d040      	beq.n	800250a <HAL_TIM_ConfigClockSource+0xde>
 8002488:	2280      	movs	r2, #128	@ 0x80
 800248a:	0192      	lsls	r2, r2, #6
 800248c:	4293      	cmp	r3, r2
 800248e:	d900      	bls.n	8002492 <HAL_TIM_ConfigClockSource+0x66>
 8002490:	e088      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x178>
 8002492:	2280      	movs	r2, #128	@ 0x80
 8002494:	0152      	lsls	r2, r2, #5
 8002496:	4293      	cmp	r3, r2
 8002498:	d100      	bne.n	800249c <HAL_TIM_ConfigClockSource+0x70>
 800249a:	e088      	b.n	80025ae <HAL_TIM_ConfigClockSource+0x182>
 800249c:	2280      	movs	r2, #128	@ 0x80
 800249e:	0152      	lsls	r2, r2, #5
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d900      	bls.n	80024a6 <HAL_TIM_ConfigClockSource+0x7a>
 80024a4:	e07e      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x178>
 80024a6:	2b70      	cmp	r3, #112	@ 0x70
 80024a8:	d018      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0xb0>
 80024aa:	d900      	bls.n	80024ae <HAL_TIM_ConfigClockSource+0x82>
 80024ac:	e07a      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x178>
 80024ae:	2b60      	cmp	r3, #96	@ 0x60
 80024b0:	d04f      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0x126>
 80024b2:	d900      	bls.n	80024b6 <HAL_TIM_ConfigClockSource+0x8a>
 80024b4:	e076      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x178>
 80024b6:	2b50      	cmp	r3, #80	@ 0x50
 80024b8:	d03b      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x106>
 80024ba:	d900      	bls.n	80024be <HAL_TIM_ConfigClockSource+0x92>
 80024bc:	e072      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x178>
 80024be:	2b40      	cmp	r3, #64	@ 0x40
 80024c0:	d057      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x146>
 80024c2:	d900      	bls.n	80024c6 <HAL_TIM_ConfigClockSource+0x9a>
 80024c4:	e06e      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x178>
 80024c6:	2b30      	cmp	r3, #48	@ 0x30
 80024c8:	d063      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x166>
 80024ca:	d86b      	bhi.n	80025a4 <HAL_TIM_ConfigClockSource+0x178>
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d060      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x166>
 80024d0:	d868      	bhi.n	80025a4 <HAL_TIM_ConfigClockSource+0x178>
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d05d      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x166>
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d05b      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x166>
 80024da:	e063      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024ec:	f000 f970 	bl	80027d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2277      	movs	r2, #119	@ 0x77
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	609a      	str	r2, [r3, #8]
      break;
 8002508:	e052      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800251a:	f000 f959 	bl	80027d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2180      	movs	r1, #128	@ 0x80
 800252a:	01c9      	lsls	r1, r1, #7
 800252c:	430a      	orrs	r2, r1
 800252e:	609a      	str	r2, [r3, #8]
      break;
 8002530:	e03e      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800253e:	001a      	movs	r2, r3
 8002540:	f000 f8cc 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2150      	movs	r1, #80	@ 0x50
 800254a:	0018      	movs	r0, r3
 800254c:	f000 f926 	bl	800279c <TIM_ITRx_SetConfig>
      break;
 8002550:	e02e      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800255e:	001a      	movs	r2, r3
 8002560:	f000 f8ea 	bl	8002738 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2160      	movs	r1, #96	@ 0x60
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f916 	bl	800279c <TIM_ITRx_SetConfig>
      break;
 8002570:	e01e      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800257e:	001a      	movs	r2, r3
 8002580:	f000 f8ac 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2140      	movs	r1, #64	@ 0x40
 800258a:	0018      	movs	r0, r3
 800258c:	f000 f906 	bl	800279c <TIM_ITRx_SetConfig>
      break;
 8002590:	e00e      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	0019      	movs	r1, r3
 800259c:	0010      	movs	r0, r2
 800259e:	f000 f8fd 	bl	800279c <TIM_ITRx_SetConfig>
      break;
 80025a2:	e005      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80025a4:	230f      	movs	r3, #15
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
      break;
 80025ac:	e000      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80025ae:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	223d      	movs	r2, #61	@ 0x3d
 80025b4:	2101      	movs	r1, #1
 80025b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	223c      	movs	r2, #60	@ 0x3c
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]

  return status;
 80025c0:	230f      	movs	r3, #15
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	781b      	ldrb	r3, [r3, #0]
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b004      	add	sp, #16
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	ffff00ff 	.word	0xffff00ff

080025d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a36      	ldr	r2, [pc, #216]	@ (80026c0 <TIM_Base_SetConfig+0xec>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d003      	beq.n	80025f4 <TIM_Base_SetConfig+0x20>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a35      	ldr	r2, [pc, #212]	@ (80026c4 <TIM_Base_SetConfig+0xf0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d108      	bne.n	8002606 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2270      	movs	r2, #112	@ 0x70
 80025f8:	4393      	bics	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a2d      	ldr	r2, [pc, #180]	@ (80026c0 <TIM_Base_SetConfig+0xec>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <TIM_Base_SetConfig+0x62>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2c      	ldr	r2, [pc, #176]	@ (80026c4 <TIM_Base_SetConfig+0xf0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00f      	beq.n	8002636 <TIM_Base_SetConfig+0x62>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a2b      	ldr	r2, [pc, #172]	@ (80026c8 <TIM_Base_SetConfig+0xf4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00b      	beq.n	8002636 <TIM_Base_SetConfig+0x62>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a2a      	ldr	r2, [pc, #168]	@ (80026cc <TIM_Base_SetConfig+0xf8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0x62>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a29      	ldr	r2, [pc, #164]	@ (80026d0 <TIM_Base_SetConfig+0xfc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x62>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a28      	ldr	r2, [pc, #160]	@ (80026d4 <TIM_Base_SetConfig+0x100>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a27      	ldr	r2, [pc, #156]	@ (80026d8 <TIM_Base_SetConfig+0x104>)
 800263a:	4013      	ands	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2280      	movs	r2, #128	@ 0x80
 800264c:	4393      	bics	r3, r2
 800264e:	001a      	movs	r2, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <TIM_Base_SetConfig+0xec>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00b      	beq.n	800268e <TIM_Base_SetConfig+0xba>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a14      	ldr	r2, [pc, #80]	@ (80026cc <TIM_Base_SetConfig+0xf8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d007      	beq.n	800268e <TIM_Base_SetConfig+0xba>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a13      	ldr	r2, [pc, #76]	@ (80026d0 <TIM_Base_SetConfig+0xfc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d003      	beq.n	800268e <TIM_Base_SetConfig+0xba>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a12      	ldr	r2, [pc, #72]	@ (80026d4 <TIM_Base_SetConfig+0x100>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d103      	bne.n	8002696 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2201      	movs	r2, #1
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d106      	bne.n	80026b6 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2201      	movs	r2, #1
 80026ae:	4393      	bics	r3, r2
 80026b0:	001a      	movs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	611a      	str	r2, [r3, #16]
  }
}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b004      	add	sp, #16
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40002000 	.word	0x40002000
 80026cc:	40014000 	.word	0x40014000
 80026d0:	40014400 	.word	0x40014400
 80026d4:	40014800 	.word	0x40014800
 80026d8:	fffffcff 	.word	0xfffffcff

080026dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	2201      	movs	r2, #1
 80026f4:	4393      	bics	r3, r2
 80026f6:	001a      	movs	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	22f0      	movs	r2, #240	@ 0xf0
 8002706:	4393      	bics	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	220a      	movs	r2, #10
 8002718:	4393      	bics	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	621a      	str	r2, [r3, #32]
}
 8002730:	46c0      	nop			@ (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b006      	add	sp, #24
 8002736:	bd80      	pop	{r7, pc}

08002738 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	2210      	movs	r2, #16
 8002750:	4393      	bics	r3, r2
 8002752:	001a      	movs	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4a0d      	ldr	r2, [pc, #52]	@ (8002798 <TIM_TI2_ConfigInputStage+0x60>)
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	031b      	lsls	r3, r3, #12
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	22a0      	movs	r2, #160	@ 0xa0
 8002774:	4393      	bics	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	621a      	str	r2, [r3, #32]
}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b006      	add	sp, #24
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	ffff0fff 	.word	0xffff0fff

0800279c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2270      	movs	r2, #112	@ 0x70
 80027b0:	4393      	bics	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	2207      	movs	r2, #7
 80027bc:	4313      	orrs	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	609a      	str	r2, [r3, #8]
}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b004      	add	sp, #16
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	4a09      	ldr	r2, [pc, #36]	@ (800280c <TIM_ETR_SetConfig+0x3c>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	021a      	lsls	r2, r3, #8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	46c0      	nop			@ (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	b006      	add	sp, #24
 800280a:	bd80      	pop	{r7, pc}
 800280c:	ffff00ff 	.word	0xffff00ff

08002810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	223c      	movs	r2, #60	@ 0x3c
 800281e:	5c9b      	ldrb	r3, [r3, r2]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002824:	2302      	movs	r3, #2
 8002826:	e041      	b.n	80028ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	223c      	movs	r2, #60	@ 0x3c
 800282c:	2101      	movs	r1, #1
 800282e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	223d      	movs	r2, #61	@ 0x3d
 8002834:	2102      	movs	r1, #2
 8002836:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2270      	movs	r2, #112	@ 0x70
 800284c:	4393      	bics	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a13      	ldr	r2, [pc, #76]	@ (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d009      	beq.n	8002880 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a11      	ldr	r2, [pc, #68]	@ (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d004      	beq.n	8002880 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a10      	ldr	r2, [pc, #64]	@ (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d10c      	bne.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2280      	movs	r2, #128	@ 0x80
 8002884:	4393      	bics	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	223d      	movs	r2, #61	@ 0x3d
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	223c      	movs	r2, #60	@ 0x3c
 80028a6:	2100      	movs	r1, #0
 80028a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40014000 	.word	0x40014000

080028c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e044      	b.n	800295c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2278      	movs	r2, #120	@ 0x78
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fe fc75 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2224      	movs	r2, #36	@ 0x24
 80028ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	438a      	bics	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	0018      	movs	r0, r3
 800290c:	f000 fa0c 	bl	8002d28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 f8c8 	bl	8002aa8 <UART_SetConfig>
 8002918:	0003      	movs	r3, r0
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e01c      	b.n	800295c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	490d      	ldr	r1, [pc, #52]	@ (8002964 <HAL_UART_Init+0xa4>)
 800292e:	400a      	ands	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2108      	movs	r1, #8
 800293e:	438a      	bics	r2, r1
 8002940:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2101      	movs	r1, #1
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	0018      	movs	r0, r3
 8002956:	f000 fa9b 	bl	8002e90 <UART_CheckIdleState>
 800295a:	0003      	movs	r3, r0
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b002      	add	sp, #8
 8002962:	bd80      	pop	{r7, pc}
 8002964:	fffff7ff 	.word	0xfffff7ff

08002968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	@ 0x28
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	1dbb      	adds	r3, r7, #6
 8002976:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800297c:	2b20      	cmp	r3, #32
 800297e:	d000      	beq.n	8002982 <HAL_UART_Transmit+0x1a>
 8002980:	e08c      	b.n	8002a9c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_UART_Transmit+0x28>
 8002988:	1dbb      	adds	r3, r7, #6
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e084      	b.n	8002a9e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	2380      	movs	r3, #128	@ 0x80
 800299a:	015b      	lsls	r3, r3, #5
 800299c:	429a      	cmp	r2, r3
 800299e:	d109      	bne.n	80029b4 <HAL_UART_Transmit+0x4c>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2201      	movs	r2, #1
 80029ac:	4013      	ands	r3, r2
 80029ae:	d001      	beq.n	80029b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e074      	b.n	8002a9e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2284      	movs	r2, #132	@ 0x84
 80029b8:	2100      	movs	r1, #0
 80029ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2221      	movs	r2, #33	@ 0x21
 80029c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029c2:	f7fe fdb5 	bl	8001530 <HAL_GetTick>
 80029c6:	0003      	movs	r3, r0
 80029c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1dba      	adds	r2, r7, #6
 80029ce:	2150      	movs	r1, #80	@ 0x50
 80029d0:	8812      	ldrh	r2, [r2, #0]
 80029d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1dba      	adds	r2, r7, #6
 80029d8:	2152      	movs	r1, #82	@ 0x52
 80029da:	8812      	ldrh	r2, [r2, #0]
 80029dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	015b      	lsls	r3, r3, #5
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d108      	bne.n	80029fc <HAL_UART_Transmit+0x94>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	e003      	b.n	8002a04 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a04:	e02f      	b.n	8002a66 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	0013      	movs	r3, r2
 8002a10:	2200      	movs	r2, #0
 8002a12:	2180      	movs	r1, #128	@ 0x80
 8002a14:	f000 fae4 	bl	8002fe0 <UART_WaitOnFlagUntilTimeout>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d004      	beq.n	8002a26 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e03b      	b.n	8002a9e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	881a      	ldrh	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	05d2      	lsls	r2, r2, #23
 8002a36:	0dd2      	lsrs	r2, r2, #23
 8002a38:	b292      	uxth	r2, r2
 8002a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	3302      	adds	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	e007      	b.n	8002a54 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2252      	movs	r2, #82	@ 0x52
 8002a58:	5a9b      	ldrh	r3, [r3, r2]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b299      	uxth	r1, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2252      	movs	r2, #82	@ 0x52
 8002a64:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2252      	movs	r2, #82	@ 0x52
 8002a6a:	5a9b      	ldrh	r3, [r3, r2]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1c9      	bne.n	8002a06 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	0013      	movs	r3, r2
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2140      	movs	r1, #64	@ 0x40
 8002a80:	f000 faae 	bl	8002fe0 <UART_WaitOnFlagUntilTimeout>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d004      	beq.n	8002a92 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e005      	b.n	8002a9e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b008      	add	sp, #32
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ab0:	231e      	movs	r3, #30
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a8d      	ldr	r2, [pc, #564]	@ (8002d0c <UART_SetConfig+0x264>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	0019      	movs	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a88      	ldr	r2, [pc, #544]	@ (8002d10 <UART_SetConfig+0x268>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a7f      	ldr	r2, [pc, #508]	@ (8002d14 <UART_SetConfig+0x26c>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	0019      	movs	r1, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a7b      	ldr	r2, [pc, #492]	@ (8002d18 <UART_SetConfig+0x270>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d127      	bne.n	8002b7e <UART_SetConfig+0xd6>
 8002b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002d1c <UART_SetConfig+0x274>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	2203      	movs	r2, #3
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d00d      	beq.n	8002b56 <UART_SetConfig+0xae>
 8002b3a:	d81b      	bhi.n	8002b74 <UART_SetConfig+0xcc>
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d014      	beq.n	8002b6a <UART_SetConfig+0xc2>
 8002b40:	d818      	bhi.n	8002b74 <UART_SetConfig+0xcc>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <UART_SetConfig+0xa4>
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d00a      	beq.n	8002b60 <UART_SetConfig+0xb8>
 8002b4a:	e013      	b.n	8002b74 <UART_SetConfig+0xcc>
 8002b4c:	231f      	movs	r3, #31
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e021      	b.n	8002b9a <UART_SetConfig+0xf2>
 8002b56:	231f      	movs	r3, #31
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	e01c      	b.n	8002b9a <UART_SetConfig+0xf2>
 8002b60:	231f      	movs	r3, #31
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	2204      	movs	r2, #4
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e017      	b.n	8002b9a <UART_SetConfig+0xf2>
 8002b6a:	231f      	movs	r3, #31
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	2208      	movs	r2, #8
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e012      	b.n	8002b9a <UART_SetConfig+0xf2>
 8002b74:	231f      	movs	r3, #31
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2210      	movs	r2, #16
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e00d      	b.n	8002b9a <UART_SetConfig+0xf2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a67      	ldr	r2, [pc, #412]	@ (8002d20 <UART_SetConfig+0x278>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d104      	bne.n	8002b92 <UART_SetConfig+0xea>
 8002b88:	231f      	movs	r3, #31
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e003      	b.n	8002b9a <UART_SetConfig+0xf2>
 8002b92:	231f      	movs	r3, #31
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	2210      	movs	r2, #16
 8002b98:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d15c      	bne.n	8002c60 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002ba6:	231f      	movs	r3, #31
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d015      	beq.n	8002bdc <UART_SetConfig+0x134>
 8002bb0:	dc18      	bgt.n	8002be4 <UART_SetConfig+0x13c>
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d00d      	beq.n	8002bd2 <UART_SetConfig+0x12a>
 8002bb6:	dc15      	bgt.n	8002be4 <UART_SetConfig+0x13c>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <UART_SetConfig+0x11a>
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d005      	beq.n	8002bcc <UART_SetConfig+0x124>
 8002bc0:	e010      	b.n	8002be4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bc2:	f7ff fb89 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	61bb      	str	r3, [r7, #24]
        break;
 8002bca:	e012      	b.n	8002bf2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bcc:	4b55      	ldr	r3, [pc, #340]	@ (8002d24 <UART_SetConfig+0x27c>)
 8002bce:	61bb      	str	r3, [r7, #24]
        break;
 8002bd0:	e00f      	b.n	8002bf2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bd2:	f7ff fb21 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	61bb      	str	r3, [r7, #24]
        break;
 8002bda:	e00a      	b.n	8002bf2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	61bb      	str	r3, [r7, #24]
        break;
 8002be2:	e006      	b.n	8002bf2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002be8:	231e      	movs	r3, #30
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
        break;
 8002bf0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d100      	bne.n	8002bfa <UART_SetConfig+0x152>
 8002bf8:	e07a      	b.n	8002cf0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	005a      	lsls	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	085b      	lsrs	r3, r3, #1
 8002c04:	18d2      	adds	r2, r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	0010      	movs	r0, r2
 8002c0e:	f7fd fa85 	bl	800011c <__udivsi3>
 8002c12:	0003      	movs	r3, r0
 8002c14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b0f      	cmp	r3, #15
 8002c1a:	d91c      	bls.n	8002c56 <UART_SetConfig+0x1ae>
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	025b      	lsls	r3, r3, #9
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d217      	bcs.n	8002c56 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	200e      	movs	r0, #14
 8002c2c:	183b      	adds	r3, r7, r0
 8002c2e:	210f      	movs	r1, #15
 8002c30:	438a      	bics	r2, r1
 8002c32:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	b299      	uxth	r1, r3
 8002c40:	183b      	adds	r3, r7, r0
 8002c42:	183a      	adds	r2, r7, r0
 8002c44:	8812      	ldrh	r2, [r2, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	183a      	adds	r2, r7, r0
 8002c50:	8812      	ldrh	r2, [r2, #0]
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	e04c      	b.n	8002cf0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002c56:	231e      	movs	r3, #30
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e047      	b.n	8002cf0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c60:	231f      	movs	r3, #31
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d015      	beq.n	8002c96 <UART_SetConfig+0x1ee>
 8002c6a:	dc18      	bgt.n	8002c9e <UART_SetConfig+0x1f6>
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d00d      	beq.n	8002c8c <UART_SetConfig+0x1e4>
 8002c70:	dc15      	bgt.n	8002c9e <UART_SetConfig+0x1f6>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <UART_SetConfig+0x1d4>
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d005      	beq.n	8002c86 <UART_SetConfig+0x1de>
 8002c7a:	e010      	b.n	8002c9e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7ff fb2c 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8002c80:	0003      	movs	r3, r0
 8002c82:	61bb      	str	r3, [r7, #24]
        break;
 8002c84:	e012      	b.n	8002cac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c86:	4b27      	ldr	r3, [pc, #156]	@ (8002d24 <UART_SetConfig+0x27c>)
 8002c88:	61bb      	str	r3, [r7, #24]
        break;
 8002c8a:	e00f      	b.n	8002cac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8c:	f7ff fac4 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8002c90:	0003      	movs	r3, r0
 8002c92:	61bb      	str	r3, [r7, #24]
        break;
 8002c94:	e00a      	b.n	8002cac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	61bb      	str	r3, [r7, #24]
        break;
 8002c9c:	e006      	b.n	8002cac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ca2:	231e      	movs	r3, #30
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
        break;
 8002caa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01e      	beq.n	8002cf0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	085a      	lsrs	r2, r3, #1
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	18d2      	adds	r2, r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	0010      	movs	r0, r2
 8002cc4:	f7fd fa2a 	bl	800011c <__udivsi3>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	d90a      	bls.n	8002ce8 <UART_SetConfig+0x240>
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	025b      	lsls	r3, r3, #9
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d205      	bcs.n	8002ce8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	e003      	b.n	8002cf0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002ce8:	231e      	movs	r3, #30
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002cfc:	231e      	movs	r3, #30
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	781b      	ldrb	r3, [r3, #0]
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b008      	add	sp, #32
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	ffff69f3 	.word	0xffff69f3
 8002d10:	ffffcfff 	.word	0xffffcfff
 8002d14:	fffff4ff 	.word	0xfffff4ff
 8002d18:	40013800 	.word	0x40013800
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40004400 	.word	0x40004400
 8002d24:	007a1200 	.word	0x007a1200

08002d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	2208      	movs	r2, #8
 8002d36:	4013      	ands	r3, r2
 8002d38:	d00b      	beq.n	8002d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a4a      	ldr	r2, [pc, #296]	@ (8002e6c <UART_AdvFeatureConfig+0x144>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	2201      	movs	r2, #1
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d00b      	beq.n	8002d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4a43      	ldr	r2, [pc, #268]	@ (8002e70 <UART_AdvFeatureConfig+0x148>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	2202      	movs	r2, #2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d00b      	beq.n	8002d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a3b      	ldr	r2, [pc, #236]	@ (8002e74 <UART_AdvFeatureConfig+0x14c>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d00b      	beq.n	8002db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a34      	ldr	r2, [pc, #208]	@ (8002e78 <UART_AdvFeatureConfig+0x150>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8002e7c <UART_AdvFeatureConfig+0x154>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	0019      	movs	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	2220      	movs	r2, #32
 8002de0:	4013      	ands	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	4a25      	ldr	r2, [pc, #148]	@ (8002e80 <UART_AdvFeatureConfig+0x158>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	0019      	movs	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	2240      	movs	r2, #64	@ 0x40
 8002e02:	4013      	ands	r3, r2
 8002e04:	d01d      	beq.n	8002e42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e84 <UART_AdvFeatureConfig+0x15c>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e22:	2380      	movs	r3, #128	@ 0x80
 8002e24:	035b      	lsls	r3, r3, #13
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d10b      	bne.n	8002e42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4a15      	ldr	r2, [pc, #84]	@ (8002e88 <UART_AdvFeatureConfig+0x160>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	0019      	movs	r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	2280      	movs	r2, #128	@ 0x80
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d00b      	beq.n	8002e64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4a0e      	ldr	r2, [pc, #56]	@ (8002e8c <UART_AdvFeatureConfig+0x164>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	0019      	movs	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
  }
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	ffff7fff 	.word	0xffff7fff
 8002e70:	fffdffff 	.word	0xfffdffff
 8002e74:	fffeffff 	.word	0xfffeffff
 8002e78:	fffbffff 	.word	0xfffbffff
 8002e7c:	ffffefff 	.word	0xffffefff
 8002e80:	ffffdfff 	.word	0xffffdfff
 8002e84:	ffefffff 	.word	0xffefffff
 8002e88:	ff9fffff 	.word	0xff9fffff
 8002e8c:	fff7ffff 	.word	0xfff7ffff

08002e90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b092      	sub	sp, #72	@ 0x48
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2284      	movs	r2, #132	@ 0x84
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ea0:	f7fe fb46 	bl	8001530 <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2208      	movs	r2, #8
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d12c      	bne.n	8002f10 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb8:	2280      	movs	r2, #128	@ 0x80
 8002eba:	0391      	lsls	r1, r2, #14
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4a46      	ldr	r2, [pc, #280]	@ (8002fd8 <UART_CheckIdleState+0x148>)
 8002ec0:	9200      	str	r2, [sp, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f000 f88c 	bl	8002fe0 <UART_WaitOnFlagUntilTimeout>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d021      	beq.n	8002f10 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002edc:	f383 8810 	msr	PRIMASK, r3
}
 8002ee0:	46c0      	nop			@ (mov r8, r8)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2180      	movs	r1, #128	@ 0x80
 8002eee:	438a      	bics	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef8:	f383 8810 	msr	PRIMASK, r3
}
 8002efc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2278      	movs	r2, #120	@ 0x78
 8002f08:	2100      	movs	r1, #0
 8002f0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e05f      	b.n	8002fd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2204      	movs	r2, #4
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d146      	bne.n	8002fac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f20:	2280      	movs	r2, #128	@ 0x80
 8002f22:	03d1      	lsls	r1, r2, #15
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd8 <UART_CheckIdleState+0x148>)
 8002f28:	9200      	str	r2, [sp, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f000 f858 	bl	8002fe0 <UART_WaitOnFlagUntilTimeout>
 8002f30:	1e03      	subs	r3, r0, #0
 8002f32:	d03b      	beq.n	8002fac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f34:	f3ef 8310 	mrs	r3, PRIMASK
 8002f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f3e:	2301      	movs	r3, #1
 8002f40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4921      	ldr	r1, [pc, #132]	@ (8002fdc <UART_CheckIdleState+0x14c>)
 8002f56:	400a      	ands	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f383 8810 	msr	PRIMASK, r3
}
 8002f64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f66:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f6c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f70:	2301      	movs	r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2101      	movs	r1, #1
 8002f88:	438a      	bics	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	f383 8810 	msr	PRIMASK, r3
}
 8002f96:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2280      	movs	r2, #128	@ 0x80
 8002f9c:	2120      	movs	r1, #32
 8002f9e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2278      	movs	r2, #120	@ 0x78
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e011      	b.n	8002fd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2280      	movs	r2, #128	@ 0x80
 8002fb6:	2120      	movs	r1, #32
 8002fb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2278      	movs	r2, #120	@ 0x78
 8002fca:	2100      	movs	r1, #0
 8002fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b010      	add	sp, #64	@ 0x40
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	01ffffff 	.word	0x01ffffff
 8002fdc:	fffffedf 	.word	0xfffffedf

08002fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	1dfb      	adds	r3, r7, #7
 8002fee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff0:	e051      	b.n	8003096 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	d04e      	beq.n	8003096 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff8:	f7fe fa9a 	bl	8001530 <HAL_GetTick>
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	429a      	cmp	r2, r3
 8003006:	d302      	bcc.n	800300e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e051      	b.n	80030b6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2204      	movs	r2, #4
 800301a:	4013      	ands	r3, r2
 800301c:	d03b      	beq.n	8003096 <UART_WaitOnFlagUntilTimeout+0xb6>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b80      	cmp	r3, #128	@ 0x80
 8003022:	d038      	beq.n	8003096 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b40      	cmp	r3, #64	@ 0x40
 8003028:	d035      	beq.n	8003096 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2208      	movs	r2, #8
 8003032:	4013      	ands	r3, r2
 8003034:	2b08      	cmp	r3, #8
 8003036:	d111      	bne.n	800305c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2208      	movs	r2, #8
 800303e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f83c 	bl	80030c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2284      	movs	r2, #132	@ 0x84
 800304c:	2108      	movs	r1, #8
 800304e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2278      	movs	r2, #120	@ 0x78
 8003054:	2100      	movs	r1, #0
 8003056:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e02c      	b.n	80030b6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	401a      	ands	r2, r3
 8003068:	2380      	movs	r3, #128	@ 0x80
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	429a      	cmp	r2, r3
 800306e:	d112      	bne.n	8003096 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2280      	movs	r2, #128	@ 0x80
 8003076:	0112      	lsls	r2, r2, #4
 8003078:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	0018      	movs	r0, r3
 800307e:	f000 f81f 	bl	80030c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2284      	movs	r2, #132	@ 0x84
 8003086:	2120      	movs	r1, #32
 8003088:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2278      	movs	r2, #120	@ 0x78
 800308e:	2100      	movs	r1, #0
 8003090:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e00f      	b.n	80030b6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	4013      	ands	r3, r2
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	425a      	negs	r2, r3
 80030a6:	4153      	adcs	r3, r2
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	001a      	movs	r2, r3
 80030ac:	1dfb      	adds	r3, r7, #7
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d09e      	beq.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b004      	add	sp, #16
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08e      	sub	sp, #56	@ 0x38
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c8:	f3ef 8310 	mrs	r3, PRIMASK
 80030cc:	617b      	str	r3, [r7, #20]
  return(result);
 80030ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030d2:	2301      	movs	r3, #1
 80030d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f383 8810 	msr	PRIMASK, r3
}
 80030dc:	46c0      	nop			@ (mov r8, r8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4926      	ldr	r1, [pc, #152]	@ (8003184 <UART_EndRxTransfer+0xc4>)
 80030ea:	400a      	ands	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f383 8810 	msr	PRIMASK, r3
}
 80030f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fa:	f3ef 8310 	mrs	r3, PRIMASK
 80030fe:	623b      	str	r3, [r7, #32]
  return(result);
 8003100:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003102:	633b      	str	r3, [r7, #48]	@ 0x30
 8003104:	2301      	movs	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	f383 8810 	msr	PRIMASK, r3
}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2101      	movs	r1, #1
 800311c:	438a      	bics	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003122:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003126:	f383 8810 	msr	PRIMASK, r3
}
 800312a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003130:	2b01      	cmp	r3, #1
 8003132:	d118      	bne.n	8003166 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003134:	f3ef 8310 	mrs	r3, PRIMASK
 8003138:	60bb      	str	r3, [r7, #8]
  return(result);
 800313a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800313c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800313e:	2301      	movs	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f383 8810 	msr	PRIMASK, r3
}
 8003148:	46c0      	nop			@ (mov r8, r8)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2110      	movs	r1, #16
 8003156:	438a      	bics	r2, r1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f383 8810 	msr	PRIMASK, r3
}
 8003164:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2280      	movs	r2, #128	@ 0x80
 800316a:	2120      	movs	r1, #32
 800316c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800317a:	46c0      	nop			@ (mov r8, r8)
 800317c:	46bd      	mov	sp, r7
 800317e:	b00e      	add	sp, #56	@ 0x38
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	fffffedf 	.word	0xfffffedf

08003188 <srand>:
 8003188:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <srand+0x48>)
 800318a:	b570      	push	{r4, r5, r6, lr}
 800318c:	681d      	ldr	r5, [r3, #0]
 800318e:	0004      	movs	r4, r0
 8003190:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <srand+0x3c>
 8003196:	2018      	movs	r0, #24
 8003198:	f000 fa60 	bl	800365c <malloc>
 800319c:	1e02      	subs	r2, r0, #0
 800319e:	6328      	str	r0, [r5, #48]	@ 0x30
 80031a0:	d104      	bne.n	80031ac <srand+0x24>
 80031a2:	2146      	movs	r1, #70	@ 0x46
 80031a4:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <srand+0x4c>)
 80031a6:	480c      	ldr	r0, [pc, #48]	@ (80031d8 <srand+0x50>)
 80031a8:	f000 f9f0 	bl	800358c <__assert_func>
 80031ac:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <srand+0x54>)
 80031ae:	2100      	movs	r1, #0
 80031b0:	6003      	str	r3, [r0, #0]
 80031b2:	4b0b      	ldr	r3, [pc, #44]	@ (80031e0 <srand+0x58>)
 80031b4:	6043      	str	r3, [r0, #4]
 80031b6:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <srand+0x5c>)
 80031b8:	6083      	str	r3, [r0, #8]
 80031ba:	230b      	movs	r3, #11
 80031bc:	8183      	strh	r3, [r0, #12]
 80031be:	2001      	movs	r0, #1
 80031c0:	6110      	str	r0, [r2, #16]
 80031c2:	6151      	str	r1, [r2, #20]
 80031c4:	2200      	movs	r2, #0
 80031c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80031c8:	611c      	str	r4, [r3, #16]
 80031ca:	615a      	str	r2, [r3, #20]
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	2000002c 	.word	0x2000002c
 80031d4:	08004268 	.word	0x08004268
 80031d8:	0800427f 	.word	0x0800427f
 80031dc:	abcd330e 	.word	0xabcd330e
 80031e0:	e66d1234 	.word	0xe66d1234
 80031e4:	0005deec 	.word	0x0005deec

080031e8 <rand>:
 80031e8:	4b16      	ldr	r3, [pc, #88]	@ (8003244 <rand+0x5c>)
 80031ea:	b510      	push	{r4, lr}
 80031ec:	681c      	ldr	r4, [r3, #0]
 80031ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d116      	bne.n	8003222 <rand+0x3a>
 80031f4:	2018      	movs	r0, #24
 80031f6:	f000 fa31 	bl	800365c <malloc>
 80031fa:	1e02      	subs	r2, r0, #0
 80031fc:	6320      	str	r0, [r4, #48]	@ 0x30
 80031fe:	d104      	bne.n	800320a <rand+0x22>
 8003200:	2152      	movs	r1, #82	@ 0x52
 8003202:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <rand+0x60>)
 8003204:	4811      	ldr	r0, [pc, #68]	@ (800324c <rand+0x64>)
 8003206:	f000 f9c1 	bl	800358c <__assert_func>
 800320a:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <rand+0x68>)
 800320c:	2100      	movs	r1, #0
 800320e:	6003      	str	r3, [r0, #0]
 8003210:	4b10      	ldr	r3, [pc, #64]	@ (8003254 <rand+0x6c>)
 8003212:	6043      	str	r3, [r0, #4]
 8003214:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <rand+0x70>)
 8003216:	6083      	str	r3, [r0, #8]
 8003218:	230b      	movs	r3, #11
 800321a:	8183      	strh	r3, [r0, #12]
 800321c:	2001      	movs	r0, #1
 800321e:	6110      	str	r0, [r2, #16]
 8003220:	6151      	str	r1, [r2, #20]
 8003222:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8003224:	4a0d      	ldr	r2, [pc, #52]	@ (800325c <rand+0x74>)
 8003226:	6920      	ldr	r0, [r4, #16]
 8003228:	6961      	ldr	r1, [r4, #20]
 800322a:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <rand+0x78>)
 800322c:	f7fd f8ec 	bl	8000408 <__aeabi_lmul>
 8003230:	2201      	movs	r2, #1
 8003232:	2300      	movs	r3, #0
 8003234:	1880      	adds	r0, r0, r2
 8003236:	4159      	adcs	r1, r3
 8003238:	6120      	str	r0, [r4, #16]
 800323a:	6161      	str	r1, [r4, #20]
 800323c:	0048      	lsls	r0, r1, #1
 800323e:	0840      	lsrs	r0, r0, #1
 8003240:	bd10      	pop	{r4, pc}
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	2000002c 	.word	0x2000002c
 8003248:	08004268 	.word	0x08004268
 800324c:	0800427f 	.word	0x0800427f
 8003250:	abcd330e 	.word	0xabcd330e
 8003254:	e66d1234 	.word	0xe66d1234
 8003258:	0005deec 	.word	0x0005deec
 800325c:	4c957f2d 	.word	0x4c957f2d
 8003260:	5851f42d 	.word	0x5851f42d

08003264 <std>:
 8003264:	2300      	movs	r3, #0
 8003266:	b510      	push	{r4, lr}
 8003268:	0004      	movs	r4, r0
 800326a:	6003      	str	r3, [r0, #0]
 800326c:	6043      	str	r3, [r0, #4]
 800326e:	6083      	str	r3, [r0, #8]
 8003270:	8181      	strh	r1, [r0, #12]
 8003272:	6643      	str	r3, [r0, #100]	@ 0x64
 8003274:	81c2      	strh	r2, [r0, #14]
 8003276:	6103      	str	r3, [r0, #16]
 8003278:	6143      	str	r3, [r0, #20]
 800327a:	6183      	str	r3, [r0, #24]
 800327c:	0019      	movs	r1, r3
 800327e:	2208      	movs	r2, #8
 8003280:	305c      	adds	r0, #92	@ 0x5c
 8003282:	f000 f8ff 	bl	8003484 <memset>
 8003286:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <std+0x50>)
 8003288:	6224      	str	r4, [r4, #32]
 800328a:	6263      	str	r3, [r4, #36]	@ 0x24
 800328c:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <std+0x54>)
 800328e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003290:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <std+0x58>)
 8003292:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003294:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <std+0x5c>)
 8003296:	6323      	str	r3, [r4, #48]	@ 0x30
 8003298:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <std+0x60>)
 800329a:	429c      	cmp	r4, r3
 800329c:	d005      	beq.n	80032aa <std+0x46>
 800329e:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <std+0x64>)
 80032a0:	429c      	cmp	r4, r3
 80032a2:	d002      	beq.n	80032aa <std+0x46>
 80032a4:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <std+0x68>)
 80032a6:	429c      	cmp	r4, r3
 80032a8:	d103      	bne.n	80032b2 <std+0x4e>
 80032aa:	0020      	movs	r0, r4
 80032ac:	3058      	adds	r0, #88	@ 0x58
 80032ae:	f000 f969 	bl	8003584 <__retarget_lock_init_recursive>
 80032b2:	bd10      	pop	{r4, pc}
 80032b4:	080033ed 	.word	0x080033ed
 80032b8:	08003415 	.word	0x08003415
 80032bc:	0800344d 	.word	0x0800344d
 80032c0:	08003479 	.word	0x08003479
 80032c4:	20000178 	.word	0x20000178
 80032c8:	200001e0 	.word	0x200001e0
 80032cc:	20000248 	.word	0x20000248

080032d0 <stdio_exit_handler>:
 80032d0:	b510      	push	{r4, lr}
 80032d2:	4a03      	ldr	r2, [pc, #12]	@ (80032e0 <stdio_exit_handler+0x10>)
 80032d4:	4903      	ldr	r1, [pc, #12]	@ (80032e4 <stdio_exit_handler+0x14>)
 80032d6:	4804      	ldr	r0, [pc, #16]	@ (80032e8 <stdio_exit_handler+0x18>)
 80032d8:	f000 f86c 	bl	80033b4 <_fwalk_sglue>
 80032dc:	bd10      	pop	{r4, pc}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	20000020 	.word	0x20000020
 80032e4:	080038e1 	.word	0x080038e1
 80032e8:	20000030 	.word	0x20000030

080032ec <cleanup_stdio>:
 80032ec:	6841      	ldr	r1, [r0, #4]
 80032ee:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <cleanup_stdio+0x30>)
 80032f0:	b510      	push	{r4, lr}
 80032f2:	0004      	movs	r4, r0
 80032f4:	4299      	cmp	r1, r3
 80032f6:	d001      	beq.n	80032fc <cleanup_stdio+0x10>
 80032f8:	f000 faf2 	bl	80038e0 <_fflush_r>
 80032fc:	68a1      	ldr	r1, [r4, #8]
 80032fe:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <cleanup_stdio+0x34>)
 8003300:	4299      	cmp	r1, r3
 8003302:	d002      	beq.n	800330a <cleanup_stdio+0x1e>
 8003304:	0020      	movs	r0, r4
 8003306:	f000 faeb 	bl	80038e0 <_fflush_r>
 800330a:	68e1      	ldr	r1, [r4, #12]
 800330c:	4b05      	ldr	r3, [pc, #20]	@ (8003324 <cleanup_stdio+0x38>)
 800330e:	4299      	cmp	r1, r3
 8003310:	d002      	beq.n	8003318 <cleanup_stdio+0x2c>
 8003312:	0020      	movs	r0, r4
 8003314:	f000 fae4 	bl	80038e0 <_fflush_r>
 8003318:	bd10      	pop	{r4, pc}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	20000178 	.word	0x20000178
 8003320:	200001e0 	.word	0x200001e0
 8003324:	20000248 	.word	0x20000248

08003328 <global_stdio_init.part.0>:
 8003328:	b510      	push	{r4, lr}
 800332a:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <global_stdio_init.part.0+0x28>)
 800332c:	4a09      	ldr	r2, [pc, #36]	@ (8003354 <global_stdio_init.part.0+0x2c>)
 800332e:	2104      	movs	r1, #4
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	4809      	ldr	r0, [pc, #36]	@ (8003358 <global_stdio_init.part.0+0x30>)
 8003334:	2200      	movs	r2, #0
 8003336:	f7ff ff95 	bl	8003264 <std>
 800333a:	2201      	movs	r2, #1
 800333c:	2109      	movs	r1, #9
 800333e:	4807      	ldr	r0, [pc, #28]	@ (800335c <global_stdio_init.part.0+0x34>)
 8003340:	f7ff ff90 	bl	8003264 <std>
 8003344:	2202      	movs	r2, #2
 8003346:	2112      	movs	r1, #18
 8003348:	4805      	ldr	r0, [pc, #20]	@ (8003360 <global_stdio_init.part.0+0x38>)
 800334a:	f7ff ff8b 	bl	8003264 <std>
 800334e:	bd10      	pop	{r4, pc}
 8003350:	200002b0 	.word	0x200002b0
 8003354:	080032d1 	.word	0x080032d1
 8003358:	20000178 	.word	0x20000178
 800335c:	200001e0 	.word	0x200001e0
 8003360:	20000248 	.word	0x20000248

08003364 <__sfp_lock_acquire>:
 8003364:	b510      	push	{r4, lr}
 8003366:	4802      	ldr	r0, [pc, #8]	@ (8003370 <__sfp_lock_acquire+0xc>)
 8003368:	f000 f90d 	bl	8003586 <__retarget_lock_acquire_recursive>
 800336c:	bd10      	pop	{r4, pc}
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	200002b9 	.word	0x200002b9

08003374 <__sfp_lock_release>:
 8003374:	b510      	push	{r4, lr}
 8003376:	4802      	ldr	r0, [pc, #8]	@ (8003380 <__sfp_lock_release+0xc>)
 8003378:	f000 f906 	bl	8003588 <__retarget_lock_release_recursive>
 800337c:	bd10      	pop	{r4, pc}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	200002b9 	.word	0x200002b9

08003384 <__sinit>:
 8003384:	b510      	push	{r4, lr}
 8003386:	0004      	movs	r4, r0
 8003388:	f7ff ffec 	bl	8003364 <__sfp_lock_acquire>
 800338c:	6a23      	ldr	r3, [r4, #32]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <__sinit+0x14>
 8003392:	f7ff ffef 	bl	8003374 <__sfp_lock_release>
 8003396:	bd10      	pop	{r4, pc}
 8003398:	4b04      	ldr	r3, [pc, #16]	@ (80033ac <__sinit+0x28>)
 800339a:	6223      	str	r3, [r4, #32]
 800339c:	4b04      	ldr	r3, [pc, #16]	@ (80033b0 <__sinit+0x2c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f6      	bne.n	8003392 <__sinit+0xe>
 80033a4:	f7ff ffc0 	bl	8003328 <global_stdio_init.part.0>
 80033a8:	e7f3      	b.n	8003392 <__sinit+0xe>
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	080032ed 	.word	0x080032ed
 80033b0:	200002b0 	.word	0x200002b0

080033b4 <_fwalk_sglue>:
 80033b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b6:	0014      	movs	r4, r2
 80033b8:	2600      	movs	r6, #0
 80033ba:	9000      	str	r0, [sp, #0]
 80033bc:	9101      	str	r1, [sp, #4]
 80033be:	68a5      	ldr	r5, [r4, #8]
 80033c0:	6867      	ldr	r7, [r4, #4]
 80033c2:	3f01      	subs	r7, #1
 80033c4:	d504      	bpl.n	80033d0 <_fwalk_sglue+0x1c>
 80033c6:	6824      	ldr	r4, [r4, #0]
 80033c8:	2c00      	cmp	r4, #0
 80033ca:	d1f8      	bne.n	80033be <_fwalk_sglue+0xa>
 80033cc:	0030      	movs	r0, r6
 80033ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033d0:	89ab      	ldrh	r3, [r5, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d908      	bls.n	80033e8 <_fwalk_sglue+0x34>
 80033d6:	220e      	movs	r2, #14
 80033d8:	5eab      	ldrsh	r3, [r5, r2]
 80033da:	3301      	adds	r3, #1
 80033dc:	d004      	beq.n	80033e8 <_fwalk_sglue+0x34>
 80033de:	0029      	movs	r1, r5
 80033e0:	9800      	ldr	r0, [sp, #0]
 80033e2:	9b01      	ldr	r3, [sp, #4]
 80033e4:	4798      	blx	r3
 80033e6:	4306      	orrs	r6, r0
 80033e8:	3568      	adds	r5, #104	@ 0x68
 80033ea:	e7ea      	b.n	80033c2 <_fwalk_sglue+0xe>

080033ec <__sread>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	000c      	movs	r4, r1
 80033f0:	250e      	movs	r5, #14
 80033f2:	5f49      	ldrsh	r1, [r1, r5]
 80033f4:	f000 f874 	bl	80034e0 <_read_r>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	db03      	blt.n	8003404 <__sread+0x18>
 80033fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80033fe:	181b      	adds	r3, r3, r0
 8003400:	6563      	str	r3, [r4, #84]	@ 0x54
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	89a3      	ldrh	r3, [r4, #12]
 8003406:	4a02      	ldr	r2, [pc, #8]	@ (8003410 <__sread+0x24>)
 8003408:	4013      	ands	r3, r2
 800340a:	81a3      	strh	r3, [r4, #12]
 800340c:	e7f9      	b.n	8003402 <__sread+0x16>
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	ffffefff 	.word	0xffffefff

08003414 <__swrite>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	001f      	movs	r7, r3
 8003418:	898b      	ldrh	r3, [r1, #12]
 800341a:	0005      	movs	r5, r0
 800341c:	000c      	movs	r4, r1
 800341e:	0016      	movs	r6, r2
 8003420:	05db      	lsls	r3, r3, #23
 8003422:	d505      	bpl.n	8003430 <__swrite+0x1c>
 8003424:	230e      	movs	r3, #14
 8003426:	5ec9      	ldrsh	r1, [r1, r3]
 8003428:	2200      	movs	r2, #0
 800342a:	2302      	movs	r3, #2
 800342c:	f000 f844 	bl	80034b8 <_lseek_r>
 8003430:	89a3      	ldrh	r3, [r4, #12]
 8003432:	4a05      	ldr	r2, [pc, #20]	@ (8003448 <__swrite+0x34>)
 8003434:	0028      	movs	r0, r5
 8003436:	4013      	ands	r3, r2
 8003438:	81a3      	strh	r3, [r4, #12]
 800343a:	0032      	movs	r2, r6
 800343c:	230e      	movs	r3, #14
 800343e:	5ee1      	ldrsh	r1, [r4, r3]
 8003440:	003b      	movs	r3, r7
 8003442:	f000 f861 	bl	8003508 <_write_r>
 8003446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003448:	ffffefff 	.word	0xffffefff

0800344c <__sseek>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	000c      	movs	r4, r1
 8003450:	250e      	movs	r5, #14
 8003452:	5f49      	ldrsh	r1, [r1, r5]
 8003454:	f000 f830 	bl	80034b8 <_lseek_r>
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	1c42      	adds	r2, r0, #1
 800345c:	d103      	bne.n	8003466 <__sseek+0x1a>
 800345e:	4a05      	ldr	r2, [pc, #20]	@ (8003474 <__sseek+0x28>)
 8003460:	4013      	ands	r3, r2
 8003462:	81a3      	strh	r3, [r4, #12]
 8003464:	bd70      	pop	{r4, r5, r6, pc}
 8003466:	2280      	movs	r2, #128	@ 0x80
 8003468:	0152      	lsls	r2, r2, #5
 800346a:	4313      	orrs	r3, r2
 800346c:	81a3      	strh	r3, [r4, #12]
 800346e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003470:	e7f8      	b.n	8003464 <__sseek+0x18>
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	ffffefff 	.word	0xffffefff

08003478 <__sclose>:
 8003478:	b510      	push	{r4, lr}
 800347a:	230e      	movs	r3, #14
 800347c:	5ec9      	ldrsh	r1, [r1, r3]
 800347e:	f000 f809 	bl	8003494 <_close_r>
 8003482:	bd10      	pop	{r4, pc}

08003484 <memset>:
 8003484:	0003      	movs	r3, r0
 8003486:	1882      	adds	r2, r0, r2
 8003488:	4293      	cmp	r3, r2
 800348a:	d100      	bne.n	800348e <memset+0xa>
 800348c:	4770      	bx	lr
 800348e:	7019      	strb	r1, [r3, #0]
 8003490:	3301      	adds	r3, #1
 8003492:	e7f9      	b.n	8003488 <memset+0x4>

08003494 <_close_r>:
 8003494:	2300      	movs	r3, #0
 8003496:	b570      	push	{r4, r5, r6, lr}
 8003498:	4d06      	ldr	r5, [pc, #24]	@ (80034b4 <_close_r+0x20>)
 800349a:	0004      	movs	r4, r0
 800349c:	0008      	movs	r0, r1
 800349e:	602b      	str	r3, [r5, #0]
 80034a0:	f7fd ff59 	bl	8001356 <_close>
 80034a4:	1c43      	adds	r3, r0, #1
 80034a6:	d103      	bne.n	80034b0 <_close_r+0x1c>
 80034a8:	682b      	ldr	r3, [r5, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d000      	beq.n	80034b0 <_close_r+0x1c>
 80034ae:	6023      	str	r3, [r4, #0]
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	200002b4 	.word	0x200002b4

080034b8 <_lseek_r>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	0004      	movs	r4, r0
 80034bc:	0008      	movs	r0, r1
 80034be:	0011      	movs	r1, r2
 80034c0:	001a      	movs	r2, r3
 80034c2:	2300      	movs	r3, #0
 80034c4:	4d05      	ldr	r5, [pc, #20]	@ (80034dc <_lseek_r+0x24>)
 80034c6:	602b      	str	r3, [r5, #0]
 80034c8:	f7fd ff66 	bl	8001398 <_lseek>
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	d103      	bne.n	80034d8 <_lseek_r+0x20>
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d000      	beq.n	80034d8 <_lseek_r+0x20>
 80034d6:	6023      	str	r3, [r4, #0]
 80034d8:	bd70      	pop	{r4, r5, r6, pc}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	200002b4 	.word	0x200002b4

080034e0 <_read_r>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	0004      	movs	r4, r0
 80034e4:	0008      	movs	r0, r1
 80034e6:	0011      	movs	r1, r2
 80034e8:	001a      	movs	r2, r3
 80034ea:	2300      	movs	r3, #0
 80034ec:	4d05      	ldr	r5, [pc, #20]	@ (8003504 <_read_r+0x24>)
 80034ee:	602b      	str	r3, [r5, #0]
 80034f0:	f7fd fef8 	bl	80012e4 <_read>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	d103      	bne.n	8003500 <_read_r+0x20>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d000      	beq.n	8003500 <_read_r+0x20>
 80034fe:	6023      	str	r3, [r4, #0]
 8003500:	bd70      	pop	{r4, r5, r6, pc}
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	200002b4 	.word	0x200002b4

08003508 <_write_r>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	0004      	movs	r4, r0
 800350c:	0008      	movs	r0, r1
 800350e:	0011      	movs	r1, r2
 8003510:	001a      	movs	r2, r3
 8003512:	2300      	movs	r3, #0
 8003514:	4d05      	ldr	r5, [pc, #20]	@ (800352c <_write_r+0x24>)
 8003516:	602b      	str	r3, [r5, #0]
 8003518:	f7fd ff01 	bl	800131e <_write>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	d103      	bne.n	8003528 <_write_r+0x20>
 8003520:	682b      	ldr	r3, [r5, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d000      	beq.n	8003528 <_write_r+0x20>
 8003526:	6023      	str	r3, [r4, #0]
 8003528:	bd70      	pop	{r4, r5, r6, pc}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	200002b4 	.word	0x200002b4

08003530 <__errno>:
 8003530:	4b01      	ldr	r3, [pc, #4]	@ (8003538 <__errno+0x8>)
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	4770      	bx	lr
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	2000002c 	.word	0x2000002c

0800353c <__libc_init_array>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	2600      	movs	r6, #0
 8003540:	4c0c      	ldr	r4, [pc, #48]	@ (8003574 <__libc_init_array+0x38>)
 8003542:	4d0d      	ldr	r5, [pc, #52]	@ (8003578 <__libc_init_array+0x3c>)
 8003544:	1b64      	subs	r4, r4, r5
 8003546:	10a4      	asrs	r4, r4, #2
 8003548:	42a6      	cmp	r6, r4
 800354a:	d109      	bne.n	8003560 <__libc_init_array+0x24>
 800354c:	2600      	movs	r6, #0
 800354e:	f000 fe63 	bl	8004218 <_init>
 8003552:	4c0a      	ldr	r4, [pc, #40]	@ (800357c <__libc_init_array+0x40>)
 8003554:	4d0a      	ldr	r5, [pc, #40]	@ (8003580 <__libc_init_array+0x44>)
 8003556:	1b64      	subs	r4, r4, r5
 8003558:	10a4      	asrs	r4, r4, #2
 800355a:	42a6      	cmp	r6, r4
 800355c:	d105      	bne.n	800356a <__libc_init_array+0x2e>
 800355e:	bd70      	pop	{r4, r5, r6, pc}
 8003560:	00b3      	lsls	r3, r6, #2
 8003562:	58eb      	ldr	r3, [r5, r3]
 8003564:	4798      	blx	r3
 8003566:	3601      	adds	r6, #1
 8003568:	e7ee      	b.n	8003548 <__libc_init_array+0xc>
 800356a:	00b3      	lsls	r3, r6, #2
 800356c:	58eb      	ldr	r3, [r5, r3]
 800356e:	4798      	blx	r3
 8003570:	3601      	adds	r6, #1
 8003572:	e7f2      	b.n	800355a <__libc_init_array+0x1e>
 8003574:	08004348 	.word	0x08004348
 8003578:	08004348 	.word	0x08004348
 800357c:	0800434c 	.word	0x0800434c
 8003580:	08004348 	.word	0x08004348

08003584 <__retarget_lock_init_recursive>:
 8003584:	4770      	bx	lr

08003586 <__retarget_lock_acquire_recursive>:
 8003586:	4770      	bx	lr

08003588 <__retarget_lock_release_recursive>:
 8003588:	4770      	bx	lr
	...

0800358c <__assert_func>:
 800358c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800358e:	0014      	movs	r4, r2
 8003590:	001a      	movs	r2, r3
 8003592:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <__assert_func+0x2c>)
 8003594:	0005      	movs	r5, r0
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	000e      	movs	r6, r1
 800359a:	68d8      	ldr	r0, [r3, #12]
 800359c:	4b07      	ldr	r3, [pc, #28]	@ (80035bc <__assert_func+0x30>)
 800359e:	2c00      	cmp	r4, #0
 80035a0:	d101      	bne.n	80035a6 <__assert_func+0x1a>
 80035a2:	4b07      	ldr	r3, [pc, #28]	@ (80035c0 <__assert_func+0x34>)
 80035a4:	001c      	movs	r4, r3
 80035a6:	4907      	ldr	r1, [pc, #28]	@ (80035c4 <__assert_func+0x38>)
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	9402      	str	r4, [sp, #8]
 80035ac:	002b      	movs	r3, r5
 80035ae:	9600      	str	r6, [sp, #0]
 80035b0:	f000 f9c2 	bl	8003938 <fiprintf>
 80035b4:	f000 f9e2 	bl	800397c <abort>
 80035b8:	2000002c 	.word	0x2000002c
 80035bc:	080042d7 	.word	0x080042d7
 80035c0:	08004312 	.word	0x08004312
 80035c4:	080042e4 	.word	0x080042e4

080035c8 <_free_r>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	0005      	movs	r5, r0
 80035cc:	1e0c      	subs	r4, r1, #0
 80035ce:	d010      	beq.n	80035f2 <_free_r+0x2a>
 80035d0:	3c04      	subs	r4, #4
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	da00      	bge.n	80035da <_free_r+0x12>
 80035d8:	18e4      	adds	r4, r4, r3
 80035da:	0028      	movs	r0, r5
 80035dc:	f000 f8ea 	bl	80037b4 <__malloc_lock>
 80035e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003658 <_free_r+0x90>)
 80035e2:	6813      	ldr	r3, [r2, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d105      	bne.n	80035f4 <_free_r+0x2c>
 80035e8:	6063      	str	r3, [r4, #4]
 80035ea:	6014      	str	r4, [r2, #0]
 80035ec:	0028      	movs	r0, r5
 80035ee:	f000 f8e9 	bl	80037c4 <__malloc_unlock>
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
 80035f4:	42a3      	cmp	r3, r4
 80035f6:	d908      	bls.n	800360a <_free_r+0x42>
 80035f8:	6820      	ldr	r0, [r4, #0]
 80035fa:	1821      	adds	r1, r4, r0
 80035fc:	428b      	cmp	r3, r1
 80035fe:	d1f3      	bne.n	80035e8 <_free_r+0x20>
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	1809      	adds	r1, r1, r0
 8003606:	6021      	str	r1, [r4, #0]
 8003608:	e7ee      	b.n	80035e8 <_free_r+0x20>
 800360a:	001a      	movs	r2, r3
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <_free_r+0x4e>
 8003612:	42a3      	cmp	r3, r4
 8003614:	d9f9      	bls.n	800360a <_free_r+0x42>
 8003616:	6811      	ldr	r1, [r2, #0]
 8003618:	1850      	adds	r0, r2, r1
 800361a:	42a0      	cmp	r0, r4
 800361c:	d10b      	bne.n	8003636 <_free_r+0x6e>
 800361e:	6820      	ldr	r0, [r4, #0]
 8003620:	1809      	adds	r1, r1, r0
 8003622:	1850      	adds	r0, r2, r1
 8003624:	6011      	str	r1, [r2, #0]
 8003626:	4283      	cmp	r3, r0
 8003628:	d1e0      	bne.n	80035ec <_free_r+0x24>
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	1841      	adds	r1, r0, r1
 8003630:	6011      	str	r1, [r2, #0]
 8003632:	6053      	str	r3, [r2, #4]
 8003634:	e7da      	b.n	80035ec <_free_r+0x24>
 8003636:	42a0      	cmp	r0, r4
 8003638:	d902      	bls.n	8003640 <_free_r+0x78>
 800363a:	230c      	movs	r3, #12
 800363c:	602b      	str	r3, [r5, #0]
 800363e:	e7d5      	b.n	80035ec <_free_r+0x24>
 8003640:	6820      	ldr	r0, [r4, #0]
 8003642:	1821      	adds	r1, r4, r0
 8003644:	428b      	cmp	r3, r1
 8003646:	d103      	bne.n	8003650 <_free_r+0x88>
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	1809      	adds	r1, r1, r0
 800364e:	6021      	str	r1, [r4, #0]
 8003650:	6063      	str	r3, [r4, #4]
 8003652:	6054      	str	r4, [r2, #4]
 8003654:	e7ca      	b.n	80035ec <_free_r+0x24>
 8003656:	46c0      	nop			@ (mov r8, r8)
 8003658:	200002c0 	.word	0x200002c0

0800365c <malloc>:
 800365c:	b510      	push	{r4, lr}
 800365e:	4b03      	ldr	r3, [pc, #12]	@ (800366c <malloc+0x10>)
 8003660:	0001      	movs	r1, r0
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	f000 f826 	bl	80036b4 <_malloc_r>
 8003668:	bd10      	pop	{r4, pc}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	2000002c 	.word	0x2000002c

08003670 <sbrk_aligned>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	4e0f      	ldr	r6, [pc, #60]	@ (80036b0 <sbrk_aligned+0x40>)
 8003674:	000d      	movs	r5, r1
 8003676:	6831      	ldr	r1, [r6, #0]
 8003678:	0004      	movs	r4, r0
 800367a:	2900      	cmp	r1, #0
 800367c:	d102      	bne.n	8003684 <sbrk_aligned+0x14>
 800367e:	f000 f96b 	bl	8003958 <_sbrk_r>
 8003682:	6030      	str	r0, [r6, #0]
 8003684:	0029      	movs	r1, r5
 8003686:	0020      	movs	r0, r4
 8003688:	f000 f966 	bl	8003958 <_sbrk_r>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	d103      	bne.n	8003698 <sbrk_aligned+0x28>
 8003690:	2501      	movs	r5, #1
 8003692:	426d      	negs	r5, r5
 8003694:	0028      	movs	r0, r5
 8003696:	bd70      	pop	{r4, r5, r6, pc}
 8003698:	2303      	movs	r3, #3
 800369a:	1cc5      	adds	r5, r0, #3
 800369c:	439d      	bics	r5, r3
 800369e:	42a8      	cmp	r0, r5
 80036a0:	d0f8      	beq.n	8003694 <sbrk_aligned+0x24>
 80036a2:	1a29      	subs	r1, r5, r0
 80036a4:	0020      	movs	r0, r4
 80036a6:	f000 f957 	bl	8003958 <_sbrk_r>
 80036aa:	3001      	adds	r0, #1
 80036ac:	d1f2      	bne.n	8003694 <sbrk_aligned+0x24>
 80036ae:	e7ef      	b.n	8003690 <sbrk_aligned+0x20>
 80036b0:	200002bc 	.word	0x200002bc

080036b4 <_malloc_r>:
 80036b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036b6:	2203      	movs	r2, #3
 80036b8:	1ccb      	adds	r3, r1, #3
 80036ba:	4393      	bics	r3, r2
 80036bc:	3308      	adds	r3, #8
 80036be:	0005      	movs	r5, r0
 80036c0:	001f      	movs	r7, r3
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d234      	bcs.n	8003730 <_malloc_r+0x7c>
 80036c6:	270c      	movs	r7, #12
 80036c8:	42b9      	cmp	r1, r7
 80036ca:	d833      	bhi.n	8003734 <_malloc_r+0x80>
 80036cc:	0028      	movs	r0, r5
 80036ce:	f000 f871 	bl	80037b4 <__malloc_lock>
 80036d2:	4e37      	ldr	r6, [pc, #220]	@ (80037b0 <_malloc_r+0xfc>)
 80036d4:	6833      	ldr	r3, [r6, #0]
 80036d6:	001c      	movs	r4, r3
 80036d8:	2c00      	cmp	r4, #0
 80036da:	d12f      	bne.n	800373c <_malloc_r+0x88>
 80036dc:	0039      	movs	r1, r7
 80036de:	0028      	movs	r0, r5
 80036e0:	f7ff ffc6 	bl	8003670 <sbrk_aligned>
 80036e4:	0004      	movs	r4, r0
 80036e6:	1c43      	adds	r3, r0, #1
 80036e8:	d15f      	bne.n	80037aa <_malloc_r+0xf6>
 80036ea:	6834      	ldr	r4, [r6, #0]
 80036ec:	9400      	str	r4, [sp, #0]
 80036ee:	9b00      	ldr	r3, [sp, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d14a      	bne.n	800378a <_malloc_r+0xd6>
 80036f4:	2c00      	cmp	r4, #0
 80036f6:	d052      	beq.n	800379e <_malloc_r+0xea>
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	0028      	movs	r0, r5
 80036fc:	18e3      	adds	r3, r4, r3
 80036fe:	9900      	ldr	r1, [sp, #0]
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	f000 f929 	bl	8003958 <_sbrk_r>
 8003706:	9b01      	ldr	r3, [sp, #4]
 8003708:	4283      	cmp	r3, r0
 800370a:	d148      	bne.n	800379e <_malloc_r+0xea>
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	0028      	movs	r0, r5
 8003710:	1aff      	subs	r7, r7, r3
 8003712:	0039      	movs	r1, r7
 8003714:	f7ff ffac 	bl	8003670 <sbrk_aligned>
 8003718:	3001      	adds	r0, #1
 800371a:	d040      	beq.n	800379e <_malloc_r+0xea>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	19db      	adds	r3, r3, r7
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	6833      	ldr	r3, [r6, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	2a00      	cmp	r2, #0
 8003728:	d133      	bne.n	8003792 <_malloc_r+0xde>
 800372a:	9b00      	ldr	r3, [sp, #0]
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	e019      	b.n	8003764 <_malloc_r+0xb0>
 8003730:	2b00      	cmp	r3, #0
 8003732:	dac9      	bge.n	80036c8 <_malloc_r+0x14>
 8003734:	230c      	movs	r3, #12
 8003736:	602b      	str	r3, [r5, #0]
 8003738:	2000      	movs	r0, #0
 800373a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800373c:	6821      	ldr	r1, [r4, #0]
 800373e:	1bc9      	subs	r1, r1, r7
 8003740:	d420      	bmi.n	8003784 <_malloc_r+0xd0>
 8003742:	290b      	cmp	r1, #11
 8003744:	d90a      	bls.n	800375c <_malloc_r+0xa8>
 8003746:	19e2      	adds	r2, r4, r7
 8003748:	6027      	str	r7, [r4, #0]
 800374a:	42a3      	cmp	r3, r4
 800374c:	d104      	bne.n	8003758 <_malloc_r+0xa4>
 800374e:	6032      	str	r2, [r6, #0]
 8003750:	6863      	ldr	r3, [r4, #4]
 8003752:	6011      	str	r1, [r2, #0]
 8003754:	6053      	str	r3, [r2, #4]
 8003756:	e005      	b.n	8003764 <_malloc_r+0xb0>
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	e7f9      	b.n	8003750 <_malloc_r+0x9c>
 800375c:	6862      	ldr	r2, [r4, #4]
 800375e:	42a3      	cmp	r3, r4
 8003760:	d10e      	bne.n	8003780 <_malloc_r+0xcc>
 8003762:	6032      	str	r2, [r6, #0]
 8003764:	0028      	movs	r0, r5
 8003766:	f000 f82d 	bl	80037c4 <__malloc_unlock>
 800376a:	0020      	movs	r0, r4
 800376c:	2207      	movs	r2, #7
 800376e:	300b      	adds	r0, #11
 8003770:	1d23      	adds	r3, r4, #4
 8003772:	4390      	bics	r0, r2
 8003774:	1ac2      	subs	r2, r0, r3
 8003776:	4298      	cmp	r0, r3
 8003778:	d0df      	beq.n	800373a <_malloc_r+0x86>
 800377a:	1a1b      	subs	r3, r3, r0
 800377c:	50a3      	str	r3, [r4, r2]
 800377e:	e7dc      	b.n	800373a <_malloc_r+0x86>
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	e7ef      	b.n	8003764 <_malloc_r+0xb0>
 8003784:	0023      	movs	r3, r4
 8003786:	6864      	ldr	r4, [r4, #4]
 8003788:	e7a6      	b.n	80036d8 <_malloc_r+0x24>
 800378a:	9c00      	ldr	r4, [sp, #0]
 800378c:	6863      	ldr	r3, [r4, #4]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	e7ad      	b.n	80036ee <_malloc_r+0x3a>
 8003792:	001a      	movs	r2, r3
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	42a3      	cmp	r3, r4
 8003798:	d1fb      	bne.n	8003792 <_malloc_r+0xde>
 800379a:	2300      	movs	r3, #0
 800379c:	e7da      	b.n	8003754 <_malloc_r+0xa0>
 800379e:	230c      	movs	r3, #12
 80037a0:	0028      	movs	r0, r5
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	f000 f80e 	bl	80037c4 <__malloc_unlock>
 80037a8:	e7c6      	b.n	8003738 <_malloc_r+0x84>
 80037aa:	6007      	str	r7, [r0, #0]
 80037ac:	e7da      	b.n	8003764 <_malloc_r+0xb0>
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	200002c0 	.word	0x200002c0

080037b4 <__malloc_lock>:
 80037b4:	b510      	push	{r4, lr}
 80037b6:	4802      	ldr	r0, [pc, #8]	@ (80037c0 <__malloc_lock+0xc>)
 80037b8:	f7ff fee5 	bl	8003586 <__retarget_lock_acquire_recursive>
 80037bc:	bd10      	pop	{r4, pc}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	200002b8 	.word	0x200002b8

080037c4 <__malloc_unlock>:
 80037c4:	b510      	push	{r4, lr}
 80037c6:	4802      	ldr	r0, [pc, #8]	@ (80037d0 <__malloc_unlock+0xc>)
 80037c8:	f7ff fede 	bl	8003588 <__retarget_lock_release_recursive>
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	200002b8 	.word	0x200002b8

080037d4 <__sflush_r>:
 80037d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037d6:	220c      	movs	r2, #12
 80037d8:	5e8b      	ldrsh	r3, [r1, r2]
 80037da:	0005      	movs	r5, r0
 80037dc:	000c      	movs	r4, r1
 80037de:	071a      	lsls	r2, r3, #28
 80037e0:	d456      	bmi.n	8003890 <__sflush_r+0xbc>
 80037e2:	684a      	ldr	r2, [r1, #4]
 80037e4:	2a00      	cmp	r2, #0
 80037e6:	dc02      	bgt.n	80037ee <__sflush_r+0x1a>
 80037e8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80037ea:	2a00      	cmp	r2, #0
 80037ec:	dd4e      	ble.n	800388c <__sflush_r+0xb8>
 80037ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80037f0:	2f00      	cmp	r7, #0
 80037f2:	d04b      	beq.n	800388c <__sflush_r+0xb8>
 80037f4:	2200      	movs	r2, #0
 80037f6:	2080      	movs	r0, #128	@ 0x80
 80037f8:	682e      	ldr	r6, [r5, #0]
 80037fa:	602a      	str	r2, [r5, #0]
 80037fc:	001a      	movs	r2, r3
 80037fe:	0140      	lsls	r0, r0, #5
 8003800:	6a21      	ldr	r1, [r4, #32]
 8003802:	4002      	ands	r2, r0
 8003804:	4203      	tst	r3, r0
 8003806:	d033      	beq.n	8003870 <__sflush_r+0x9c>
 8003808:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	075b      	lsls	r3, r3, #29
 800380e:	d506      	bpl.n	800381e <__sflush_r+0x4a>
 8003810:	6863      	ldr	r3, [r4, #4]
 8003812:	1ad2      	subs	r2, r2, r3
 8003814:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <__sflush_r+0x4a>
 800381a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800381c:	1ad2      	subs	r2, r2, r3
 800381e:	2300      	movs	r3, #0
 8003820:	0028      	movs	r0, r5
 8003822:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003824:	6a21      	ldr	r1, [r4, #32]
 8003826:	47b8      	blx	r7
 8003828:	89a2      	ldrh	r2, [r4, #12]
 800382a:	1c43      	adds	r3, r0, #1
 800382c:	d106      	bne.n	800383c <__sflush_r+0x68>
 800382e:	6829      	ldr	r1, [r5, #0]
 8003830:	291d      	cmp	r1, #29
 8003832:	d846      	bhi.n	80038c2 <__sflush_r+0xee>
 8003834:	4b29      	ldr	r3, [pc, #164]	@ (80038dc <__sflush_r+0x108>)
 8003836:	410b      	asrs	r3, r1
 8003838:	07db      	lsls	r3, r3, #31
 800383a:	d442      	bmi.n	80038c2 <__sflush_r+0xee>
 800383c:	2300      	movs	r3, #0
 800383e:	6063      	str	r3, [r4, #4]
 8003840:	6923      	ldr	r3, [r4, #16]
 8003842:	6023      	str	r3, [r4, #0]
 8003844:	04d2      	lsls	r2, r2, #19
 8003846:	d505      	bpl.n	8003854 <__sflush_r+0x80>
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d102      	bne.n	8003852 <__sflush_r+0x7e>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d100      	bne.n	8003854 <__sflush_r+0x80>
 8003852:	6560      	str	r0, [r4, #84]	@ 0x54
 8003854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003856:	602e      	str	r6, [r5, #0]
 8003858:	2900      	cmp	r1, #0
 800385a:	d017      	beq.n	800388c <__sflush_r+0xb8>
 800385c:	0023      	movs	r3, r4
 800385e:	3344      	adds	r3, #68	@ 0x44
 8003860:	4299      	cmp	r1, r3
 8003862:	d002      	beq.n	800386a <__sflush_r+0x96>
 8003864:	0028      	movs	r0, r5
 8003866:	f7ff feaf 	bl	80035c8 <_free_r>
 800386a:	2300      	movs	r3, #0
 800386c:	6363      	str	r3, [r4, #52]	@ 0x34
 800386e:	e00d      	b.n	800388c <__sflush_r+0xb8>
 8003870:	2301      	movs	r3, #1
 8003872:	0028      	movs	r0, r5
 8003874:	47b8      	blx	r7
 8003876:	0002      	movs	r2, r0
 8003878:	1c43      	adds	r3, r0, #1
 800387a:	d1c6      	bne.n	800380a <__sflush_r+0x36>
 800387c:	682b      	ldr	r3, [r5, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0c3      	beq.n	800380a <__sflush_r+0x36>
 8003882:	2b1d      	cmp	r3, #29
 8003884:	d001      	beq.n	800388a <__sflush_r+0xb6>
 8003886:	2b16      	cmp	r3, #22
 8003888:	d11a      	bne.n	80038c0 <__sflush_r+0xec>
 800388a:	602e      	str	r6, [r5, #0]
 800388c:	2000      	movs	r0, #0
 800388e:	e01e      	b.n	80038ce <__sflush_r+0xfa>
 8003890:	690e      	ldr	r6, [r1, #16]
 8003892:	2e00      	cmp	r6, #0
 8003894:	d0fa      	beq.n	800388c <__sflush_r+0xb8>
 8003896:	680f      	ldr	r7, [r1, #0]
 8003898:	600e      	str	r6, [r1, #0]
 800389a:	1bba      	subs	r2, r7, r6
 800389c:	9201      	str	r2, [sp, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	079b      	lsls	r3, r3, #30
 80038a2:	d100      	bne.n	80038a6 <__sflush_r+0xd2>
 80038a4:	694a      	ldr	r2, [r1, #20]
 80038a6:	60a2      	str	r2, [r4, #8]
 80038a8:	9b01      	ldr	r3, [sp, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	ddee      	ble.n	800388c <__sflush_r+0xb8>
 80038ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80038b0:	0032      	movs	r2, r6
 80038b2:	001f      	movs	r7, r3
 80038b4:	0028      	movs	r0, r5
 80038b6:	9b01      	ldr	r3, [sp, #4]
 80038b8:	6a21      	ldr	r1, [r4, #32]
 80038ba:	47b8      	blx	r7
 80038bc:	2800      	cmp	r0, #0
 80038be:	dc07      	bgt.n	80038d0 <__sflush_r+0xfc>
 80038c0:	89a2      	ldrh	r2, [r4, #12]
 80038c2:	2340      	movs	r3, #64	@ 0x40
 80038c4:	2001      	movs	r0, #1
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b21b      	sxth	r3, r3
 80038ca:	81a3      	strh	r3, [r4, #12]
 80038cc:	4240      	negs	r0, r0
 80038ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80038d0:	9b01      	ldr	r3, [sp, #4]
 80038d2:	1836      	adds	r6, r6, r0
 80038d4:	1a1b      	subs	r3, r3, r0
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	e7e6      	b.n	80038a8 <__sflush_r+0xd4>
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	dfbffffe 	.word	0xdfbffffe

080038e0 <_fflush_r>:
 80038e0:	690b      	ldr	r3, [r1, #16]
 80038e2:	b570      	push	{r4, r5, r6, lr}
 80038e4:	0005      	movs	r5, r0
 80038e6:	000c      	movs	r4, r1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <_fflush_r+0x12>
 80038ec:	2500      	movs	r5, #0
 80038ee:	0028      	movs	r0, r5
 80038f0:	bd70      	pop	{r4, r5, r6, pc}
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d004      	beq.n	8003900 <_fflush_r+0x20>
 80038f6:	6a03      	ldr	r3, [r0, #32]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <_fflush_r+0x20>
 80038fc:	f7ff fd42 	bl	8003384 <__sinit>
 8003900:	220c      	movs	r2, #12
 8003902:	5ea3      	ldrsh	r3, [r4, r2]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f1      	beq.n	80038ec <_fflush_r+0xc>
 8003908:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800390a:	07d2      	lsls	r2, r2, #31
 800390c:	d404      	bmi.n	8003918 <_fflush_r+0x38>
 800390e:	059b      	lsls	r3, r3, #22
 8003910:	d402      	bmi.n	8003918 <_fflush_r+0x38>
 8003912:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003914:	f7ff fe37 	bl	8003586 <__retarget_lock_acquire_recursive>
 8003918:	0028      	movs	r0, r5
 800391a:	0021      	movs	r1, r4
 800391c:	f7ff ff5a 	bl	80037d4 <__sflush_r>
 8003920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003922:	0005      	movs	r5, r0
 8003924:	07db      	lsls	r3, r3, #31
 8003926:	d4e2      	bmi.n	80038ee <_fflush_r+0xe>
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	059b      	lsls	r3, r3, #22
 800392c:	d4df      	bmi.n	80038ee <_fflush_r+0xe>
 800392e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003930:	f7ff fe2a 	bl	8003588 <__retarget_lock_release_recursive>
 8003934:	e7db      	b.n	80038ee <_fflush_r+0xe>
	...

08003938 <fiprintf>:
 8003938:	b40e      	push	{r1, r2, r3}
 800393a:	b517      	push	{r0, r1, r2, r4, lr}
 800393c:	4c05      	ldr	r4, [pc, #20]	@ (8003954 <fiprintf+0x1c>)
 800393e:	ab05      	add	r3, sp, #20
 8003940:	cb04      	ldmia	r3!, {r2}
 8003942:	0001      	movs	r1, r0
 8003944:	6820      	ldr	r0, [r4, #0]
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	f000 f846 	bl	80039d8 <_vfiprintf_r>
 800394c:	bc1e      	pop	{r1, r2, r3, r4}
 800394e:	bc08      	pop	{r3}
 8003950:	b003      	add	sp, #12
 8003952:	4718      	bx	r3
 8003954:	2000002c 	.word	0x2000002c

08003958 <_sbrk_r>:
 8003958:	2300      	movs	r3, #0
 800395a:	b570      	push	{r4, r5, r6, lr}
 800395c:	4d06      	ldr	r5, [pc, #24]	@ (8003978 <_sbrk_r+0x20>)
 800395e:	0004      	movs	r4, r0
 8003960:	0008      	movs	r0, r1
 8003962:	602b      	str	r3, [r5, #0]
 8003964:	f7fd fd24 	bl	80013b0 <_sbrk>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d103      	bne.n	8003974 <_sbrk_r+0x1c>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d000      	beq.n	8003974 <_sbrk_r+0x1c>
 8003972:	6023      	str	r3, [r4, #0]
 8003974:	bd70      	pop	{r4, r5, r6, pc}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	200002b4 	.word	0x200002b4

0800397c <abort>:
 800397c:	2006      	movs	r0, #6
 800397e:	b510      	push	{r4, lr}
 8003980:	f000 fb8e 	bl	80040a0 <raise>
 8003984:	2001      	movs	r0, #1
 8003986:	f7fd fca0 	bl	80012ca <_exit>

0800398a <__sfputc_r>:
 800398a:	6893      	ldr	r3, [r2, #8]
 800398c:	b510      	push	{r4, lr}
 800398e:	3b01      	subs	r3, #1
 8003990:	6093      	str	r3, [r2, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	da04      	bge.n	80039a0 <__sfputc_r+0x16>
 8003996:	6994      	ldr	r4, [r2, #24]
 8003998:	42a3      	cmp	r3, r4
 800399a:	db07      	blt.n	80039ac <__sfputc_r+0x22>
 800399c:	290a      	cmp	r1, #10
 800399e:	d005      	beq.n	80039ac <__sfputc_r+0x22>
 80039a0:	6813      	ldr	r3, [r2, #0]
 80039a2:	1c58      	adds	r0, r3, #1
 80039a4:	6010      	str	r0, [r2, #0]
 80039a6:	7019      	strb	r1, [r3, #0]
 80039a8:	0008      	movs	r0, r1
 80039aa:	bd10      	pop	{r4, pc}
 80039ac:	f000 faae 	bl	8003f0c <__swbuf_r>
 80039b0:	0001      	movs	r1, r0
 80039b2:	e7f9      	b.n	80039a8 <__sfputc_r+0x1e>

080039b4 <__sfputs_r>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	0006      	movs	r6, r0
 80039b8:	000f      	movs	r7, r1
 80039ba:	0014      	movs	r4, r2
 80039bc:	18d5      	adds	r5, r2, r3
 80039be:	42ac      	cmp	r4, r5
 80039c0:	d101      	bne.n	80039c6 <__sfputs_r+0x12>
 80039c2:	2000      	movs	r0, #0
 80039c4:	e007      	b.n	80039d6 <__sfputs_r+0x22>
 80039c6:	7821      	ldrb	r1, [r4, #0]
 80039c8:	003a      	movs	r2, r7
 80039ca:	0030      	movs	r0, r6
 80039cc:	f7ff ffdd 	bl	800398a <__sfputc_r>
 80039d0:	3401      	adds	r4, #1
 80039d2:	1c43      	adds	r3, r0, #1
 80039d4:	d1f3      	bne.n	80039be <__sfputs_r+0xa>
 80039d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039d8 <_vfiprintf_r>:
 80039d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039da:	b0a1      	sub	sp, #132	@ 0x84
 80039dc:	000f      	movs	r7, r1
 80039de:	0015      	movs	r5, r2
 80039e0:	001e      	movs	r6, r3
 80039e2:	9003      	str	r0, [sp, #12]
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d004      	beq.n	80039f2 <_vfiprintf_r+0x1a>
 80039e8:	6a03      	ldr	r3, [r0, #32]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <_vfiprintf_r+0x1a>
 80039ee:	f7ff fcc9 	bl	8003384 <__sinit>
 80039f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039f4:	07db      	lsls	r3, r3, #31
 80039f6:	d405      	bmi.n	8003a04 <_vfiprintf_r+0x2c>
 80039f8:	89bb      	ldrh	r3, [r7, #12]
 80039fa:	059b      	lsls	r3, r3, #22
 80039fc:	d402      	bmi.n	8003a04 <_vfiprintf_r+0x2c>
 80039fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a00:	f7ff fdc1 	bl	8003586 <__retarget_lock_acquire_recursive>
 8003a04:	89bb      	ldrh	r3, [r7, #12]
 8003a06:	071b      	lsls	r3, r3, #28
 8003a08:	d502      	bpl.n	8003a10 <_vfiprintf_r+0x38>
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d113      	bne.n	8003a38 <_vfiprintf_r+0x60>
 8003a10:	0039      	movs	r1, r7
 8003a12:	9803      	ldr	r0, [sp, #12]
 8003a14:	f000 fabc 	bl	8003f90 <__swsetup_r>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d00d      	beq.n	8003a38 <_vfiprintf_r+0x60>
 8003a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a1e:	07db      	lsls	r3, r3, #31
 8003a20:	d503      	bpl.n	8003a2a <_vfiprintf_r+0x52>
 8003a22:	2001      	movs	r0, #1
 8003a24:	4240      	negs	r0, r0
 8003a26:	b021      	add	sp, #132	@ 0x84
 8003a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a2a:	89bb      	ldrh	r3, [r7, #12]
 8003a2c:	059b      	lsls	r3, r3, #22
 8003a2e:	d4f8      	bmi.n	8003a22 <_vfiprintf_r+0x4a>
 8003a30:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a32:	f7ff fda9 	bl	8003588 <__retarget_lock_release_recursive>
 8003a36:	e7f4      	b.n	8003a22 <_vfiprintf_r+0x4a>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	ac08      	add	r4, sp, #32
 8003a3c:	6163      	str	r3, [r4, #20]
 8003a3e:	3320      	adds	r3, #32
 8003a40:	7663      	strb	r3, [r4, #25]
 8003a42:	3310      	adds	r3, #16
 8003a44:	76a3      	strb	r3, [r4, #26]
 8003a46:	9607      	str	r6, [sp, #28]
 8003a48:	002e      	movs	r6, r5
 8003a4a:	7833      	ldrb	r3, [r6, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <_vfiprintf_r+0x7c>
 8003a50:	2b25      	cmp	r3, #37	@ 0x25
 8003a52:	d148      	bne.n	8003ae6 <_vfiprintf_r+0x10e>
 8003a54:	1b73      	subs	r3, r6, r5
 8003a56:	9305      	str	r3, [sp, #20]
 8003a58:	42ae      	cmp	r6, r5
 8003a5a:	d00b      	beq.n	8003a74 <_vfiprintf_r+0x9c>
 8003a5c:	002a      	movs	r2, r5
 8003a5e:	0039      	movs	r1, r7
 8003a60:	9803      	ldr	r0, [sp, #12]
 8003a62:	f7ff ffa7 	bl	80039b4 <__sfputs_r>
 8003a66:	3001      	adds	r0, #1
 8003a68:	d100      	bne.n	8003a6c <_vfiprintf_r+0x94>
 8003a6a:	e0ae      	b.n	8003bca <_vfiprintf_r+0x1f2>
 8003a6c:	6963      	ldr	r3, [r4, #20]
 8003a6e:	9a05      	ldr	r2, [sp, #20]
 8003a70:	189b      	adds	r3, r3, r2
 8003a72:	6163      	str	r3, [r4, #20]
 8003a74:	7833      	ldrb	r3, [r6, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d100      	bne.n	8003a7c <_vfiprintf_r+0xa4>
 8003a7a:	e0a6      	b.n	8003bca <_vfiprintf_r+0x1f2>
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	2300      	movs	r3, #0
 8003a80:	4252      	negs	r2, r2
 8003a82:	6062      	str	r2, [r4, #4]
 8003a84:	a904      	add	r1, sp, #16
 8003a86:	3254      	adds	r2, #84	@ 0x54
 8003a88:	1852      	adds	r2, r2, r1
 8003a8a:	1c75      	adds	r5, r6, #1
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	60e3      	str	r3, [r4, #12]
 8003a90:	60a3      	str	r3, [r4, #8]
 8003a92:	7013      	strb	r3, [r2, #0]
 8003a94:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003a96:	4b59      	ldr	r3, [pc, #356]	@ (8003bfc <_vfiprintf_r+0x224>)
 8003a98:	2205      	movs	r2, #5
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	7829      	ldrb	r1, [r5, #0]
 8003a9e:	9305      	str	r3, [sp, #20]
 8003aa0:	f000 fb1e 	bl	80040e0 <memchr>
 8003aa4:	1c6e      	adds	r6, r5, #1
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d11f      	bne.n	8003aea <_vfiprintf_r+0x112>
 8003aaa:	6822      	ldr	r2, [r4, #0]
 8003aac:	06d3      	lsls	r3, r2, #27
 8003aae:	d504      	bpl.n	8003aba <_vfiprintf_r+0xe2>
 8003ab0:	2353      	movs	r3, #83	@ 0x53
 8003ab2:	a904      	add	r1, sp, #16
 8003ab4:	185b      	adds	r3, r3, r1
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	7019      	strb	r1, [r3, #0]
 8003aba:	0713      	lsls	r3, r2, #28
 8003abc:	d504      	bpl.n	8003ac8 <_vfiprintf_r+0xf0>
 8003abe:	2353      	movs	r3, #83	@ 0x53
 8003ac0:	a904      	add	r1, sp, #16
 8003ac2:	185b      	adds	r3, r3, r1
 8003ac4:	212b      	movs	r1, #43	@ 0x2b
 8003ac6:	7019      	strb	r1, [r3, #0]
 8003ac8:	782b      	ldrb	r3, [r5, #0]
 8003aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8003acc:	d016      	beq.n	8003afc <_vfiprintf_r+0x124>
 8003ace:	002e      	movs	r6, r5
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	200a      	movs	r0, #10
 8003ad4:	68e3      	ldr	r3, [r4, #12]
 8003ad6:	7832      	ldrb	r2, [r6, #0]
 8003ad8:	1c75      	adds	r5, r6, #1
 8003ada:	3a30      	subs	r2, #48	@ 0x30
 8003adc:	2a09      	cmp	r2, #9
 8003ade:	d950      	bls.n	8003b82 <_vfiprintf_r+0x1aa>
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	d111      	bne.n	8003b08 <_vfiprintf_r+0x130>
 8003ae4:	e017      	b.n	8003b16 <_vfiprintf_r+0x13e>
 8003ae6:	3601      	adds	r6, #1
 8003ae8:	e7af      	b.n	8003a4a <_vfiprintf_r+0x72>
 8003aea:	9b05      	ldr	r3, [sp, #20]
 8003aec:	6822      	ldr	r2, [r4, #0]
 8003aee:	1ac0      	subs	r0, r0, r3
 8003af0:	2301      	movs	r3, #1
 8003af2:	4083      	lsls	r3, r0
 8003af4:	4313      	orrs	r3, r2
 8003af6:	0035      	movs	r5, r6
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	e7cc      	b.n	8003a96 <_vfiprintf_r+0xbe>
 8003afc:	9b07      	ldr	r3, [sp, #28]
 8003afe:	1d19      	adds	r1, r3, #4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	9107      	str	r1, [sp, #28]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	db01      	blt.n	8003b0c <_vfiprintf_r+0x134>
 8003b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b0a:	e004      	b.n	8003b16 <_vfiprintf_r+0x13e>
 8003b0c:	425b      	negs	r3, r3
 8003b0e:	60e3      	str	r3, [r4, #12]
 8003b10:	2302      	movs	r3, #2
 8003b12:	4313      	orrs	r3, r2
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	7833      	ldrb	r3, [r6, #0]
 8003b18:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b1a:	d10c      	bne.n	8003b36 <_vfiprintf_r+0x15e>
 8003b1c:	7873      	ldrb	r3, [r6, #1]
 8003b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b20:	d134      	bne.n	8003b8c <_vfiprintf_r+0x1b4>
 8003b22:	9b07      	ldr	r3, [sp, #28]
 8003b24:	3602      	adds	r6, #2
 8003b26:	1d1a      	adds	r2, r3, #4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	9207      	str	r2, [sp, #28]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	da01      	bge.n	8003b34 <_vfiprintf_r+0x15c>
 8003b30:	2301      	movs	r3, #1
 8003b32:	425b      	negs	r3, r3
 8003b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b36:	4d32      	ldr	r5, [pc, #200]	@ (8003c00 <_vfiprintf_r+0x228>)
 8003b38:	2203      	movs	r2, #3
 8003b3a:	0028      	movs	r0, r5
 8003b3c:	7831      	ldrb	r1, [r6, #0]
 8003b3e:	f000 facf 	bl	80040e0 <memchr>
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d006      	beq.n	8003b54 <_vfiprintf_r+0x17c>
 8003b46:	2340      	movs	r3, #64	@ 0x40
 8003b48:	1b40      	subs	r0, r0, r5
 8003b4a:	4083      	lsls	r3, r0
 8003b4c:	6822      	ldr	r2, [r4, #0]
 8003b4e:	3601      	adds	r6, #1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	6023      	str	r3, [r4, #0]
 8003b54:	7831      	ldrb	r1, [r6, #0]
 8003b56:	2206      	movs	r2, #6
 8003b58:	482a      	ldr	r0, [pc, #168]	@ (8003c04 <_vfiprintf_r+0x22c>)
 8003b5a:	1c75      	adds	r5, r6, #1
 8003b5c:	7621      	strb	r1, [r4, #24]
 8003b5e:	f000 fabf 	bl	80040e0 <memchr>
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d040      	beq.n	8003be8 <_vfiprintf_r+0x210>
 8003b66:	4b28      	ldr	r3, [pc, #160]	@ (8003c08 <_vfiprintf_r+0x230>)
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d122      	bne.n	8003bb2 <_vfiprintf_r+0x1da>
 8003b6c:	2207      	movs	r2, #7
 8003b6e:	9b07      	ldr	r3, [sp, #28]
 8003b70:	3307      	adds	r3, #7
 8003b72:	4393      	bics	r3, r2
 8003b74:	3308      	adds	r3, #8
 8003b76:	9307      	str	r3, [sp, #28]
 8003b78:	6963      	ldr	r3, [r4, #20]
 8003b7a:	9a04      	ldr	r2, [sp, #16]
 8003b7c:	189b      	adds	r3, r3, r2
 8003b7e:	6163      	str	r3, [r4, #20]
 8003b80:	e762      	b.n	8003a48 <_vfiprintf_r+0x70>
 8003b82:	4343      	muls	r3, r0
 8003b84:	002e      	movs	r6, r5
 8003b86:	2101      	movs	r1, #1
 8003b88:	189b      	adds	r3, r3, r2
 8003b8a:	e7a4      	b.n	8003ad6 <_vfiprintf_r+0xfe>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	200a      	movs	r0, #10
 8003b90:	0019      	movs	r1, r3
 8003b92:	3601      	adds	r6, #1
 8003b94:	6063      	str	r3, [r4, #4]
 8003b96:	7832      	ldrb	r2, [r6, #0]
 8003b98:	1c75      	adds	r5, r6, #1
 8003b9a:	3a30      	subs	r2, #48	@ 0x30
 8003b9c:	2a09      	cmp	r2, #9
 8003b9e:	d903      	bls.n	8003ba8 <_vfiprintf_r+0x1d0>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0c8      	beq.n	8003b36 <_vfiprintf_r+0x15e>
 8003ba4:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ba6:	e7c6      	b.n	8003b36 <_vfiprintf_r+0x15e>
 8003ba8:	4341      	muls	r1, r0
 8003baa:	002e      	movs	r6, r5
 8003bac:	2301      	movs	r3, #1
 8003bae:	1889      	adds	r1, r1, r2
 8003bb0:	e7f1      	b.n	8003b96 <_vfiprintf_r+0x1be>
 8003bb2:	aa07      	add	r2, sp, #28
 8003bb4:	9200      	str	r2, [sp, #0]
 8003bb6:	0021      	movs	r1, r4
 8003bb8:	003a      	movs	r2, r7
 8003bba:	4b14      	ldr	r3, [pc, #80]	@ (8003c0c <_vfiprintf_r+0x234>)
 8003bbc:	9803      	ldr	r0, [sp, #12]
 8003bbe:	e000      	b.n	8003bc2 <_vfiprintf_r+0x1ea>
 8003bc0:	bf00      	nop
 8003bc2:	9004      	str	r0, [sp, #16]
 8003bc4:	9b04      	ldr	r3, [sp, #16]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	d1d6      	bne.n	8003b78 <_vfiprintf_r+0x1a0>
 8003bca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bcc:	07db      	lsls	r3, r3, #31
 8003bce:	d405      	bmi.n	8003bdc <_vfiprintf_r+0x204>
 8003bd0:	89bb      	ldrh	r3, [r7, #12]
 8003bd2:	059b      	lsls	r3, r3, #22
 8003bd4:	d402      	bmi.n	8003bdc <_vfiprintf_r+0x204>
 8003bd6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003bd8:	f7ff fcd6 	bl	8003588 <__retarget_lock_release_recursive>
 8003bdc:	89bb      	ldrh	r3, [r7, #12]
 8003bde:	065b      	lsls	r3, r3, #25
 8003be0:	d500      	bpl.n	8003be4 <_vfiprintf_r+0x20c>
 8003be2:	e71e      	b.n	8003a22 <_vfiprintf_r+0x4a>
 8003be4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003be6:	e71e      	b.n	8003a26 <_vfiprintf_r+0x4e>
 8003be8:	aa07      	add	r2, sp, #28
 8003bea:	9200      	str	r2, [sp, #0]
 8003bec:	0021      	movs	r1, r4
 8003bee:	003a      	movs	r2, r7
 8003bf0:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <_vfiprintf_r+0x234>)
 8003bf2:	9803      	ldr	r0, [sp, #12]
 8003bf4:	f000 f87c 	bl	8003cf0 <_printf_i>
 8003bf8:	e7e3      	b.n	8003bc2 <_vfiprintf_r+0x1ea>
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	08004313 	.word	0x08004313
 8003c00:	08004319 	.word	0x08004319
 8003c04:	0800431d 	.word	0x0800431d
 8003c08:	00000000 	.word	0x00000000
 8003c0c:	080039b5 	.word	0x080039b5

08003c10 <_printf_common>:
 8003c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c12:	0016      	movs	r6, r2
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	688a      	ldr	r2, [r1, #8]
 8003c18:	690b      	ldr	r3, [r1, #16]
 8003c1a:	000c      	movs	r4, r1
 8003c1c:	9000      	str	r0, [sp, #0]
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	da00      	bge.n	8003c24 <_printf_common+0x14>
 8003c22:	0013      	movs	r3, r2
 8003c24:	0022      	movs	r2, r4
 8003c26:	6033      	str	r3, [r6, #0]
 8003c28:	3243      	adds	r2, #67	@ 0x43
 8003c2a:	7812      	ldrb	r2, [r2, #0]
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	d001      	beq.n	8003c34 <_printf_common+0x24>
 8003c30:	3301      	adds	r3, #1
 8003c32:	6033      	str	r3, [r6, #0]
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	069b      	lsls	r3, r3, #26
 8003c38:	d502      	bpl.n	8003c40 <_printf_common+0x30>
 8003c3a:	6833      	ldr	r3, [r6, #0]
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	6033      	str	r3, [r6, #0]
 8003c40:	6822      	ldr	r2, [r4, #0]
 8003c42:	2306      	movs	r3, #6
 8003c44:	0015      	movs	r5, r2
 8003c46:	401d      	ands	r5, r3
 8003c48:	421a      	tst	r2, r3
 8003c4a:	d027      	beq.n	8003c9c <_printf_common+0x8c>
 8003c4c:	0023      	movs	r3, r4
 8003c4e:	3343      	adds	r3, #67	@ 0x43
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	4193      	sbcs	r3, r2
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	0692      	lsls	r2, r2, #26
 8003c5a:	d430      	bmi.n	8003cbe <_printf_common+0xae>
 8003c5c:	0022      	movs	r2, r4
 8003c5e:	9901      	ldr	r1, [sp, #4]
 8003c60:	9800      	ldr	r0, [sp, #0]
 8003c62:	9d08      	ldr	r5, [sp, #32]
 8003c64:	3243      	adds	r2, #67	@ 0x43
 8003c66:	47a8      	blx	r5
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d025      	beq.n	8003cb8 <_printf_common+0xa8>
 8003c6c:	2206      	movs	r2, #6
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	2500      	movs	r5, #0
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d105      	bne.n	8003c84 <_printf_common+0x74>
 8003c78:	6833      	ldr	r3, [r6, #0]
 8003c7a:	68e5      	ldr	r5, [r4, #12]
 8003c7c:	1aed      	subs	r5, r5, r3
 8003c7e:	43eb      	mvns	r3, r5
 8003c80:	17db      	asrs	r3, r3, #31
 8003c82:	401d      	ands	r5, r3
 8003c84:	68a3      	ldr	r3, [r4, #8]
 8003c86:	6922      	ldr	r2, [r4, #16]
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	dd01      	ble.n	8003c90 <_printf_common+0x80>
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	18ed      	adds	r5, r5, r3
 8003c90:	2600      	movs	r6, #0
 8003c92:	42b5      	cmp	r5, r6
 8003c94:	d120      	bne.n	8003cd8 <_printf_common+0xc8>
 8003c96:	2000      	movs	r0, #0
 8003c98:	e010      	b.n	8003cbc <_printf_common+0xac>
 8003c9a:	3501      	adds	r5, #1
 8003c9c:	68e3      	ldr	r3, [r4, #12]
 8003c9e:	6832      	ldr	r2, [r6, #0]
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	42ab      	cmp	r3, r5
 8003ca4:	ddd2      	ble.n	8003c4c <_printf_common+0x3c>
 8003ca6:	0022      	movs	r2, r4
 8003ca8:	2301      	movs	r3, #1
 8003caa:	9901      	ldr	r1, [sp, #4]
 8003cac:	9800      	ldr	r0, [sp, #0]
 8003cae:	9f08      	ldr	r7, [sp, #32]
 8003cb0:	3219      	adds	r2, #25
 8003cb2:	47b8      	blx	r7
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	d1f0      	bne.n	8003c9a <_printf_common+0x8a>
 8003cb8:	2001      	movs	r0, #1
 8003cba:	4240      	negs	r0, r0
 8003cbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cbe:	2030      	movs	r0, #48	@ 0x30
 8003cc0:	18e1      	adds	r1, r4, r3
 8003cc2:	3143      	adds	r1, #67	@ 0x43
 8003cc4:	7008      	strb	r0, [r1, #0]
 8003cc6:	0021      	movs	r1, r4
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	3145      	adds	r1, #69	@ 0x45
 8003ccc:	7809      	ldrb	r1, [r1, #0]
 8003cce:	18a2      	adds	r2, r4, r2
 8003cd0:	3243      	adds	r2, #67	@ 0x43
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	7011      	strb	r1, [r2, #0]
 8003cd6:	e7c1      	b.n	8003c5c <_printf_common+0x4c>
 8003cd8:	0022      	movs	r2, r4
 8003cda:	2301      	movs	r3, #1
 8003cdc:	9901      	ldr	r1, [sp, #4]
 8003cde:	9800      	ldr	r0, [sp, #0]
 8003ce0:	9f08      	ldr	r7, [sp, #32]
 8003ce2:	321a      	adds	r2, #26
 8003ce4:	47b8      	blx	r7
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d0e6      	beq.n	8003cb8 <_printf_common+0xa8>
 8003cea:	3601      	adds	r6, #1
 8003cec:	e7d1      	b.n	8003c92 <_printf_common+0x82>
	...

08003cf0 <_printf_i>:
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b08b      	sub	sp, #44	@ 0x2c
 8003cf4:	9206      	str	r2, [sp, #24]
 8003cf6:	000a      	movs	r2, r1
 8003cf8:	3243      	adds	r2, #67	@ 0x43
 8003cfa:	9307      	str	r3, [sp, #28]
 8003cfc:	9005      	str	r0, [sp, #20]
 8003cfe:	9203      	str	r2, [sp, #12]
 8003d00:	7e0a      	ldrb	r2, [r1, #24]
 8003d02:	000c      	movs	r4, r1
 8003d04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003d06:	2a78      	cmp	r2, #120	@ 0x78
 8003d08:	d809      	bhi.n	8003d1e <_printf_i+0x2e>
 8003d0a:	2a62      	cmp	r2, #98	@ 0x62
 8003d0c:	d80b      	bhi.n	8003d26 <_printf_i+0x36>
 8003d0e:	2a00      	cmp	r2, #0
 8003d10:	d100      	bne.n	8003d14 <_printf_i+0x24>
 8003d12:	e0bc      	b.n	8003e8e <_printf_i+0x19e>
 8003d14:	497b      	ldr	r1, [pc, #492]	@ (8003f04 <_printf_i+0x214>)
 8003d16:	9104      	str	r1, [sp, #16]
 8003d18:	2a58      	cmp	r2, #88	@ 0x58
 8003d1a:	d100      	bne.n	8003d1e <_printf_i+0x2e>
 8003d1c:	e090      	b.n	8003e40 <_printf_i+0x150>
 8003d1e:	0025      	movs	r5, r4
 8003d20:	3542      	adds	r5, #66	@ 0x42
 8003d22:	702a      	strb	r2, [r5, #0]
 8003d24:	e022      	b.n	8003d6c <_printf_i+0x7c>
 8003d26:	0010      	movs	r0, r2
 8003d28:	3863      	subs	r0, #99	@ 0x63
 8003d2a:	2815      	cmp	r0, #21
 8003d2c:	d8f7      	bhi.n	8003d1e <_printf_i+0x2e>
 8003d2e:	f7fc f9eb 	bl	8000108 <__gnu_thumb1_case_shi>
 8003d32:	0016      	.short	0x0016
 8003d34:	fff6001f 	.word	0xfff6001f
 8003d38:	fff6fff6 	.word	0xfff6fff6
 8003d3c:	001ffff6 	.word	0x001ffff6
 8003d40:	fff6fff6 	.word	0xfff6fff6
 8003d44:	fff6fff6 	.word	0xfff6fff6
 8003d48:	003600a1 	.word	0x003600a1
 8003d4c:	fff60080 	.word	0xfff60080
 8003d50:	00b2fff6 	.word	0x00b2fff6
 8003d54:	0036fff6 	.word	0x0036fff6
 8003d58:	fff6fff6 	.word	0xfff6fff6
 8003d5c:	0084      	.short	0x0084
 8003d5e:	0025      	movs	r5, r4
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	3542      	adds	r5, #66	@ 0x42
 8003d64:	1d11      	adds	r1, r2, #4
 8003d66:	6019      	str	r1, [r3, #0]
 8003d68:	6813      	ldr	r3, [r2, #0]
 8003d6a:	702b      	strb	r3, [r5, #0]
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0a0      	b.n	8003eb2 <_printf_i+0x1c2>
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	6809      	ldr	r1, [r1, #0]
 8003d74:	1d02      	adds	r2, r0, #4
 8003d76:	060d      	lsls	r5, r1, #24
 8003d78:	d50b      	bpl.n	8003d92 <_printf_i+0xa2>
 8003d7a:	6806      	ldr	r6, [r0, #0]
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	2e00      	cmp	r6, #0
 8003d80:	da03      	bge.n	8003d8a <_printf_i+0x9a>
 8003d82:	232d      	movs	r3, #45	@ 0x2d
 8003d84:	9a03      	ldr	r2, [sp, #12]
 8003d86:	4276      	negs	r6, r6
 8003d88:	7013      	strb	r3, [r2, #0]
 8003d8a:	4b5e      	ldr	r3, [pc, #376]	@ (8003f04 <_printf_i+0x214>)
 8003d8c:	270a      	movs	r7, #10
 8003d8e:	9304      	str	r3, [sp, #16]
 8003d90:	e018      	b.n	8003dc4 <_printf_i+0xd4>
 8003d92:	6806      	ldr	r6, [r0, #0]
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	0649      	lsls	r1, r1, #25
 8003d98:	d5f1      	bpl.n	8003d7e <_printf_i+0x8e>
 8003d9a:	b236      	sxth	r6, r6
 8003d9c:	e7ef      	b.n	8003d7e <_printf_i+0x8e>
 8003d9e:	6808      	ldr	r0, [r1, #0]
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	c940      	ldmia	r1!, {r6}
 8003da4:	0605      	lsls	r5, r0, #24
 8003da6:	d402      	bmi.n	8003dae <_printf_i+0xbe>
 8003da8:	0640      	lsls	r0, r0, #25
 8003daa:	d500      	bpl.n	8003dae <_printf_i+0xbe>
 8003dac:	b2b6      	uxth	r6, r6
 8003dae:	6019      	str	r1, [r3, #0]
 8003db0:	4b54      	ldr	r3, [pc, #336]	@ (8003f04 <_printf_i+0x214>)
 8003db2:	270a      	movs	r7, #10
 8003db4:	9304      	str	r3, [sp, #16]
 8003db6:	2a6f      	cmp	r2, #111	@ 0x6f
 8003db8:	d100      	bne.n	8003dbc <_printf_i+0xcc>
 8003dba:	3f02      	subs	r7, #2
 8003dbc:	0023      	movs	r3, r4
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	3343      	adds	r3, #67	@ 0x43
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	60a3      	str	r3, [r4, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	db03      	blt.n	8003dd4 <_printf_i+0xe4>
 8003dcc:	2104      	movs	r1, #4
 8003dce:	6822      	ldr	r2, [r4, #0]
 8003dd0:	438a      	bics	r2, r1
 8003dd2:	6022      	str	r2, [r4, #0]
 8003dd4:	2e00      	cmp	r6, #0
 8003dd6:	d102      	bne.n	8003dde <_printf_i+0xee>
 8003dd8:	9d03      	ldr	r5, [sp, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00c      	beq.n	8003df8 <_printf_i+0x108>
 8003dde:	9d03      	ldr	r5, [sp, #12]
 8003de0:	0030      	movs	r0, r6
 8003de2:	0039      	movs	r1, r7
 8003de4:	f7fc fa20 	bl	8000228 <__aeabi_uidivmod>
 8003de8:	9b04      	ldr	r3, [sp, #16]
 8003dea:	3d01      	subs	r5, #1
 8003dec:	5c5b      	ldrb	r3, [r3, r1]
 8003dee:	702b      	strb	r3, [r5, #0]
 8003df0:	0033      	movs	r3, r6
 8003df2:	0006      	movs	r6, r0
 8003df4:	429f      	cmp	r7, r3
 8003df6:	d9f3      	bls.n	8003de0 <_printf_i+0xf0>
 8003df8:	2f08      	cmp	r7, #8
 8003dfa:	d109      	bne.n	8003e10 <_printf_i+0x120>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	07db      	lsls	r3, r3, #31
 8003e00:	d506      	bpl.n	8003e10 <_printf_i+0x120>
 8003e02:	6862      	ldr	r2, [r4, #4]
 8003e04:	6923      	ldr	r3, [r4, #16]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	dc02      	bgt.n	8003e10 <_printf_i+0x120>
 8003e0a:	2330      	movs	r3, #48	@ 0x30
 8003e0c:	3d01      	subs	r5, #1
 8003e0e:	702b      	strb	r3, [r5, #0]
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	1b5b      	subs	r3, r3, r5
 8003e14:	6123      	str	r3, [r4, #16]
 8003e16:	9b07      	ldr	r3, [sp, #28]
 8003e18:	0021      	movs	r1, r4
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	9805      	ldr	r0, [sp, #20]
 8003e1e:	9b06      	ldr	r3, [sp, #24]
 8003e20:	aa09      	add	r2, sp, #36	@ 0x24
 8003e22:	f7ff fef5 	bl	8003c10 <_printf_common>
 8003e26:	3001      	adds	r0, #1
 8003e28:	d148      	bne.n	8003ebc <_printf_i+0x1cc>
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	4240      	negs	r0, r0
 8003e2e:	b00b      	add	sp, #44	@ 0x2c
 8003e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e32:	2220      	movs	r2, #32
 8003e34:	6809      	ldr	r1, [r1, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	6022      	str	r2, [r4, #0]
 8003e3a:	2278      	movs	r2, #120	@ 0x78
 8003e3c:	4932      	ldr	r1, [pc, #200]	@ (8003f08 <_printf_i+0x218>)
 8003e3e:	9104      	str	r1, [sp, #16]
 8003e40:	0021      	movs	r1, r4
 8003e42:	3145      	adds	r1, #69	@ 0x45
 8003e44:	700a      	strb	r2, [r1, #0]
 8003e46:	6819      	ldr	r1, [r3, #0]
 8003e48:	6822      	ldr	r2, [r4, #0]
 8003e4a:	c940      	ldmia	r1!, {r6}
 8003e4c:	0610      	lsls	r0, r2, #24
 8003e4e:	d402      	bmi.n	8003e56 <_printf_i+0x166>
 8003e50:	0650      	lsls	r0, r2, #25
 8003e52:	d500      	bpl.n	8003e56 <_printf_i+0x166>
 8003e54:	b2b6      	uxth	r6, r6
 8003e56:	6019      	str	r1, [r3, #0]
 8003e58:	07d3      	lsls	r3, r2, #31
 8003e5a:	d502      	bpl.n	8003e62 <_printf_i+0x172>
 8003e5c:	2320      	movs	r3, #32
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	2e00      	cmp	r6, #0
 8003e64:	d001      	beq.n	8003e6a <_printf_i+0x17a>
 8003e66:	2710      	movs	r7, #16
 8003e68:	e7a8      	b.n	8003dbc <_printf_i+0xcc>
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	4393      	bics	r3, r2
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	e7f8      	b.n	8003e66 <_printf_i+0x176>
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	680d      	ldr	r5, [r1, #0]
 8003e78:	1d10      	adds	r0, r2, #4
 8003e7a:	6949      	ldr	r1, [r1, #20]
 8003e7c:	6018      	str	r0, [r3, #0]
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	062e      	lsls	r6, r5, #24
 8003e82:	d501      	bpl.n	8003e88 <_printf_i+0x198>
 8003e84:	6019      	str	r1, [r3, #0]
 8003e86:	e002      	b.n	8003e8e <_printf_i+0x19e>
 8003e88:	066d      	lsls	r5, r5, #25
 8003e8a:	d5fb      	bpl.n	8003e84 <_printf_i+0x194>
 8003e8c:	8019      	strh	r1, [r3, #0]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	9d03      	ldr	r5, [sp, #12]
 8003e92:	6123      	str	r3, [r4, #16]
 8003e94:	e7bf      	b.n	8003e16 <_printf_i+0x126>
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	1d11      	adds	r1, r2, #4
 8003e9a:	6019      	str	r1, [r3, #0]
 8003e9c:	6815      	ldr	r5, [r2, #0]
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	0028      	movs	r0, r5
 8003ea2:	6862      	ldr	r2, [r4, #4]
 8003ea4:	f000 f91c 	bl	80040e0 <memchr>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d001      	beq.n	8003eb0 <_printf_i+0x1c0>
 8003eac:	1b40      	subs	r0, r0, r5
 8003eae:	6060      	str	r0, [r4, #4]
 8003eb0:	6863      	ldr	r3, [r4, #4]
 8003eb2:	6123      	str	r3, [r4, #16]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9a03      	ldr	r2, [sp, #12]
 8003eb8:	7013      	strb	r3, [r2, #0]
 8003eba:	e7ac      	b.n	8003e16 <_printf_i+0x126>
 8003ebc:	002a      	movs	r2, r5
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	9906      	ldr	r1, [sp, #24]
 8003ec2:	9805      	ldr	r0, [sp, #20]
 8003ec4:	9d07      	ldr	r5, [sp, #28]
 8003ec6:	47a8      	blx	r5
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d0ae      	beq.n	8003e2a <_printf_i+0x13a>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	079b      	lsls	r3, r3, #30
 8003ed0:	d415      	bmi.n	8003efe <_printf_i+0x20e>
 8003ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ed4:	68e0      	ldr	r0, [r4, #12]
 8003ed6:	4298      	cmp	r0, r3
 8003ed8:	daa9      	bge.n	8003e2e <_printf_i+0x13e>
 8003eda:	0018      	movs	r0, r3
 8003edc:	e7a7      	b.n	8003e2e <_printf_i+0x13e>
 8003ede:	0022      	movs	r2, r4
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	9906      	ldr	r1, [sp, #24]
 8003ee4:	9805      	ldr	r0, [sp, #20]
 8003ee6:	9e07      	ldr	r6, [sp, #28]
 8003ee8:	3219      	adds	r2, #25
 8003eea:	47b0      	blx	r6
 8003eec:	3001      	adds	r0, #1
 8003eee:	d09c      	beq.n	8003e2a <_printf_i+0x13a>
 8003ef0:	3501      	adds	r5, #1
 8003ef2:	68e3      	ldr	r3, [r4, #12]
 8003ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	42ab      	cmp	r3, r5
 8003efa:	dcf0      	bgt.n	8003ede <_printf_i+0x1ee>
 8003efc:	e7e9      	b.n	8003ed2 <_printf_i+0x1e2>
 8003efe:	2500      	movs	r5, #0
 8003f00:	e7f7      	b.n	8003ef2 <_printf_i+0x202>
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	08004324 	.word	0x08004324
 8003f08:	08004335 	.word	0x08004335

08003f0c <__swbuf_r>:
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	0006      	movs	r6, r0
 8003f10:	000d      	movs	r5, r1
 8003f12:	0014      	movs	r4, r2
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d004      	beq.n	8003f22 <__swbuf_r+0x16>
 8003f18:	6a03      	ldr	r3, [r0, #32]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <__swbuf_r+0x16>
 8003f1e:	f7ff fa31 	bl	8003384 <__sinit>
 8003f22:	69a3      	ldr	r3, [r4, #24]
 8003f24:	60a3      	str	r3, [r4, #8]
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	071b      	lsls	r3, r3, #28
 8003f2a:	d502      	bpl.n	8003f32 <__swbuf_r+0x26>
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <__swbuf_r+0x3a>
 8003f32:	0021      	movs	r1, r4
 8003f34:	0030      	movs	r0, r6
 8003f36:	f000 f82b 	bl	8003f90 <__swsetup_r>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d003      	beq.n	8003f46 <__swbuf_r+0x3a>
 8003f3e:	2501      	movs	r5, #1
 8003f40:	426d      	negs	r5, r5
 8003f42:	0028      	movs	r0, r5
 8003f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f46:	6923      	ldr	r3, [r4, #16]
 8003f48:	6820      	ldr	r0, [r4, #0]
 8003f4a:	b2ef      	uxtb	r7, r5
 8003f4c:	1ac0      	subs	r0, r0, r3
 8003f4e:	6963      	ldr	r3, [r4, #20]
 8003f50:	b2ed      	uxtb	r5, r5
 8003f52:	4283      	cmp	r3, r0
 8003f54:	dc05      	bgt.n	8003f62 <__swbuf_r+0x56>
 8003f56:	0021      	movs	r1, r4
 8003f58:	0030      	movs	r0, r6
 8003f5a:	f7ff fcc1 	bl	80038e0 <_fflush_r>
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d1ed      	bne.n	8003f3e <__swbuf_r+0x32>
 8003f62:	68a3      	ldr	r3, [r4, #8]
 8003f64:	3001      	adds	r0, #1
 8003f66:	3b01      	subs	r3, #1
 8003f68:	60a3      	str	r3, [r4, #8]
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	6022      	str	r2, [r4, #0]
 8003f70:	701f      	strb	r7, [r3, #0]
 8003f72:	6963      	ldr	r3, [r4, #20]
 8003f74:	4283      	cmp	r3, r0
 8003f76:	d004      	beq.n	8003f82 <__swbuf_r+0x76>
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	07db      	lsls	r3, r3, #31
 8003f7c:	d5e1      	bpl.n	8003f42 <__swbuf_r+0x36>
 8003f7e:	2d0a      	cmp	r5, #10
 8003f80:	d1df      	bne.n	8003f42 <__swbuf_r+0x36>
 8003f82:	0021      	movs	r1, r4
 8003f84:	0030      	movs	r0, r6
 8003f86:	f7ff fcab 	bl	80038e0 <_fflush_r>
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d0d9      	beq.n	8003f42 <__swbuf_r+0x36>
 8003f8e:	e7d6      	b.n	8003f3e <__swbuf_r+0x32>

08003f90 <__swsetup_r>:
 8003f90:	4b2d      	ldr	r3, [pc, #180]	@ (8004048 <__swsetup_r+0xb8>)
 8003f92:	b570      	push	{r4, r5, r6, lr}
 8003f94:	0005      	movs	r5, r0
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	000c      	movs	r4, r1
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d004      	beq.n	8003fa8 <__swsetup_r+0x18>
 8003f9e:	6a03      	ldr	r3, [r0, #32]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <__swsetup_r+0x18>
 8003fa4:	f7ff f9ee 	bl	8003384 <__sinit>
 8003fa8:	230c      	movs	r3, #12
 8003faa:	5ee2      	ldrsh	r2, [r4, r3]
 8003fac:	0713      	lsls	r3, r2, #28
 8003fae:	d423      	bmi.n	8003ff8 <__swsetup_r+0x68>
 8003fb0:	06d3      	lsls	r3, r2, #27
 8003fb2:	d407      	bmi.n	8003fc4 <__swsetup_r+0x34>
 8003fb4:	2309      	movs	r3, #9
 8003fb6:	602b      	str	r3, [r5, #0]
 8003fb8:	2340      	movs	r3, #64	@ 0x40
 8003fba:	2001      	movs	r0, #1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	4240      	negs	r0, r0
 8003fc2:	e03a      	b.n	800403a <__swsetup_r+0xaa>
 8003fc4:	0752      	lsls	r2, r2, #29
 8003fc6:	d513      	bpl.n	8003ff0 <__swsetup_r+0x60>
 8003fc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fca:	2900      	cmp	r1, #0
 8003fcc:	d008      	beq.n	8003fe0 <__swsetup_r+0x50>
 8003fce:	0023      	movs	r3, r4
 8003fd0:	3344      	adds	r3, #68	@ 0x44
 8003fd2:	4299      	cmp	r1, r3
 8003fd4:	d002      	beq.n	8003fdc <__swsetup_r+0x4c>
 8003fd6:	0028      	movs	r0, r5
 8003fd8:	f7ff faf6 	bl	80035c8 <_free_r>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fe0:	2224      	movs	r2, #36	@ 0x24
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	4393      	bics	r3, r2
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	6063      	str	r3, [r4, #4]
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	6023      	str	r3, [r4, #0]
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	89a2      	ldrh	r2, [r4, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	81a3      	strh	r3, [r4, #12]
 8003ff8:	6923      	ldr	r3, [r4, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <__swsetup_r+0x86>
 8003ffe:	21a0      	movs	r1, #160	@ 0xa0
 8004000:	2280      	movs	r2, #128	@ 0x80
 8004002:	89a3      	ldrh	r3, [r4, #12]
 8004004:	0089      	lsls	r1, r1, #2
 8004006:	0092      	lsls	r2, r2, #2
 8004008:	400b      	ands	r3, r1
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <__swsetup_r+0x86>
 800400e:	0021      	movs	r1, r4
 8004010:	0028      	movs	r0, r5
 8004012:	f000 f89b 	bl	800414c <__smakebuf_r>
 8004016:	230c      	movs	r3, #12
 8004018:	5ee2      	ldrsh	r2, [r4, r3]
 800401a:	2101      	movs	r1, #1
 800401c:	0013      	movs	r3, r2
 800401e:	400b      	ands	r3, r1
 8004020:	420a      	tst	r2, r1
 8004022:	d00b      	beq.n	800403c <__swsetup_r+0xac>
 8004024:	2300      	movs	r3, #0
 8004026:	60a3      	str	r3, [r4, #8]
 8004028:	6963      	ldr	r3, [r4, #20]
 800402a:	425b      	negs	r3, r3
 800402c:	61a3      	str	r3, [r4, #24]
 800402e:	2000      	movs	r0, #0
 8004030:	6923      	ldr	r3, [r4, #16]
 8004032:	4283      	cmp	r3, r0
 8004034:	d101      	bne.n	800403a <__swsetup_r+0xaa>
 8004036:	0613      	lsls	r3, r2, #24
 8004038:	d4be      	bmi.n	8003fb8 <__swsetup_r+0x28>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	0791      	lsls	r1, r2, #30
 800403e:	d400      	bmi.n	8004042 <__swsetup_r+0xb2>
 8004040:	6963      	ldr	r3, [r4, #20]
 8004042:	60a3      	str	r3, [r4, #8]
 8004044:	e7f3      	b.n	800402e <__swsetup_r+0x9e>
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	2000002c 	.word	0x2000002c

0800404c <_raise_r>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	0004      	movs	r4, r0
 8004050:	000d      	movs	r5, r1
 8004052:	291f      	cmp	r1, #31
 8004054:	d904      	bls.n	8004060 <_raise_r+0x14>
 8004056:	2316      	movs	r3, #22
 8004058:	6003      	str	r3, [r0, #0]
 800405a:	2001      	movs	r0, #1
 800405c:	4240      	negs	r0, r0
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <_raise_r+0x24>
 8004066:	008a      	lsls	r2, r1, #2
 8004068:	189b      	adds	r3, r3, r2
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	2a00      	cmp	r2, #0
 800406e:	d108      	bne.n	8004082 <_raise_r+0x36>
 8004070:	0020      	movs	r0, r4
 8004072:	f000 f831 	bl	80040d8 <_getpid_r>
 8004076:	002a      	movs	r2, r5
 8004078:	0001      	movs	r1, r0
 800407a:	0020      	movs	r0, r4
 800407c:	f000 f81a 	bl	80040b4 <_kill_r>
 8004080:	e7ed      	b.n	800405e <_raise_r+0x12>
 8004082:	2a01      	cmp	r2, #1
 8004084:	d009      	beq.n	800409a <_raise_r+0x4e>
 8004086:	1c51      	adds	r1, r2, #1
 8004088:	d103      	bne.n	8004092 <_raise_r+0x46>
 800408a:	2316      	movs	r3, #22
 800408c:	6003      	str	r3, [r0, #0]
 800408e:	2001      	movs	r0, #1
 8004090:	e7e5      	b.n	800405e <_raise_r+0x12>
 8004092:	2100      	movs	r1, #0
 8004094:	0028      	movs	r0, r5
 8004096:	6019      	str	r1, [r3, #0]
 8004098:	4790      	blx	r2
 800409a:	2000      	movs	r0, #0
 800409c:	e7df      	b.n	800405e <_raise_r+0x12>
	...

080040a0 <raise>:
 80040a0:	b510      	push	{r4, lr}
 80040a2:	4b03      	ldr	r3, [pc, #12]	@ (80040b0 <raise+0x10>)
 80040a4:	0001      	movs	r1, r0
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	f7ff ffd0 	bl	800404c <_raise_r>
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	2000002c 	.word	0x2000002c

080040b4 <_kill_r>:
 80040b4:	2300      	movs	r3, #0
 80040b6:	b570      	push	{r4, r5, r6, lr}
 80040b8:	4d06      	ldr	r5, [pc, #24]	@ (80040d4 <_kill_r+0x20>)
 80040ba:	0004      	movs	r4, r0
 80040bc:	0008      	movs	r0, r1
 80040be:	0011      	movs	r1, r2
 80040c0:	602b      	str	r3, [r5, #0]
 80040c2:	f7fd f8f2 	bl	80012aa <_kill>
 80040c6:	1c43      	adds	r3, r0, #1
 80040c8:	d103      	bne.n	80040d2 <_kill_r+0x1e>
 80040ca:	682b      	ldr	r3, [r5, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d000      	beq.n	80040d2 <_kill_r+0x1e>
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	bd70      	pop	{r4, r5, r6, pc}
 80040d4:	200002b4 	.word	0x200002b4

080040d8 <_getpid_r>:
 80040d8:	b510      	push	{r4, lr}
 80040da:	f7fd f8e0 	bl	800129e <_getpid>
 80040de:	bd10      	pop	{r4, pc}

080040e0 <memchr>:
 80040e0:	b2c9      	uxtb	r1, r1
 80040e2:	1882      	adds	r2, r0, r2
 80040e4:	4290      	cmp	r0, r2
 80040e6:	d101      	bne.n	80040ec <memchr+0xc>
 80040e8:	2000      	movs	r0, #0
 80040ea:	4770      	bx	lr
 80040ec:	7803      	ldrb	r3, [r0, #0]
 80040ee:	428b      	cmp	r3, r1
 80040f0:	d0fb      	beq.n	80040ea <memchr+0xa>
 80040f2:	3001      	adds	r0, #1
 80040f4:	e7f6      	b.n	80040e4 <memchr+0x4>
	...

080040f8 <__swhatbuf_r>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	000e      	movs	r6, r1
 80040fc:	001d      	movs	r5, r3
 80040fe:	230e      	movs	r3, #14
 8004100:	5ec9      	ldrsh	r1, [r1, r3]
 8004102:	0014      	movs	r4, r2
 8004104:	b096      	sub	sp, #88	@ 0x58
 8004106:	2900      	cmp	r1, #0
 8004108:	da0c      	bge.n	8004124 <__swhatbuf_r+0x2c>
 800410a:	89b2      	ldrh	r2, [r6, #12]
 800410c:	2380      	movs	r3, #128	@ 0x80
 800410e:	0011      	movs	r1, r2
 8004110:	4019      	ands	r1, r3
 8004112:	421a      	tst	r2, r3
 8004114:	d114      	bne.n	8004140 <__swhatbuf_r+0x48>
 8004116:	2380      	movs	r3, #128	@ 0x80
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	2000      	movs	r0, #0
 800411c:	6029      	str	r1, [r5, #0]
 800411e:	6023      	str	r3, [r4, #0]
 8004120:	b016      	add	sp, #88	@ 0x58
 8004122:	bd70      	pop	{r4, r5, r6, pc}
 8004124:	466a      	mov	r2, sp
 8004126:	f000 f853 	bl	80041d0 <_fstat_r>
 800412a:	2800      	cmp	r0, #0
 800412c:	dbed      	blt.n	800410a <__swhatbuf_r+0x12>
 800412e:	23f0      	movs	r3, #240	@ 0xf0
 8004130:	9901      	ldr	r1, [sp, #4]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	4019      	ands	r1, r3
 8004136:	4b04      	ldr	r3, [pc, #16]	@ (8004148 <__swhatbuf_r+0x50>)
 8004138:	18c9      	adds	r1, r1, r3
 800413a:	424b      	negs	r3, r1
 800413c:	4159      	adcs	r1, r3
 800413e:	e7ea      	b.n	8004116 <__swhatbuf_r+0x1e>
 8004140:	2100      	movs	r1, #0
 8004142:	2340      	movs	r3, #64	@ 0x40
 8004144:	e7e9      	b.n	800411a <__swhatbuf_r+0x22>
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	ffffe000 	.word	0xffffe000

0800414c <__smakebuf_r>:
 800414c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414e:	2602      	movs	r6, #2
 8004150:	898b      	ldrh	r3, [r1, #12]
 8004152:	0005      	movs	r5, r0
 8004154:	000c      	movs	r4, r1
 8004156:	b085      	sub	sp, #20
 8004158:	4233      	tst	r3, r6
 800415a:	d007      	beq.n	800416c <__smakebuf_r+0x20>
 800415c:	0023      	movs	r3, r4
 800415e:	3347      	adds	r3, #71	@ 0x47
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	6123      	str	r3, [r4, #16]
 8004164:	2301      	movs	r3, #1
 8004166:	6163      	str	r3, [r4, #20]
 8004168:	b005      	add	sp, #20
 800416a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800416c:	ab03      	add	r3, sp, #12
 800416e:	aa02      	add	r2, sp, #8
 8004170:	f7ff ffc2 	bl	80040f8 <__swhatbuf_r>
 8004174:	9f02      	ldr	r7, [sp, #8]
 8004176:	9001      	str	r0, [sp, #4]
 8004178:	0039      	movs	r1, r7
 800417a:	0028      	movs	r0, r5
 800417c:	f7ff fa9a 	bl	80036b4 <_malloc_r>
 8004180:	2800      	cmp	r0, #0
 8004182:	d108      	bne.n	8004196 <__smakebuf_r+0x4a>
 8004184:	220c      	movs	r2, #12
 8004186:	5ea3      	ldrsh	r3, [r4, r2]
 8004188:	059a      	lsls	r2, r3, #22
 800418a:	d4ed      	bmi.n	8004168 <__smakebuf_r+0x1c>
 800418c:	2203      	movs	r2, #3
 800418e:	4393      	bics	r3, r2
 8004190:	431e      	orrs	r6, r3
 8004192:	81a6      	strh	r6, [r4, #12]
 8004194:	e7e2      	b.n	800415c <__smakebuf_r+0x10>
 8004196:	2380      	movs	r3, #128	@ 0x80
 8004198:	89a2      	ldrh	r2, [r4, #12]
 800419a:	6020      	str	r0, [r4, #0]
 800419c:	4313      	orrs	r3, r2
 800419e:	81a3      	strh	r3, [r4, #12]
 80041a0:	9b03      	ldr	r3, [sp, #12]
 80041a2:	6120      	str	r0, [r4, #16]
 80041a4:	6167      	str	r7, [r4, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00c      	beq.n	80041c4 <__smakebuf_r+0x78>
 80041aa:	0028      	movs	r0, r5
 80041ac:	230e      	movs	r3, #14
 80041ae:	5ee1      	ldrsh	r1, [r4, r3]
 80041b0:	f000 f820 	bl	80041f4 <_isatty_r>
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d005      	beq.n	80041c4 <__smakebuf_r+0x78>
 80041b8:	2303      	movs	r3, #3
 80041ba:	89a2      	ldrh	r2, [r4, #12]
 80041bc:	439a      	bics	r2, r3
 80041be:	3b02      	subs	r3, #2
 80041c0:	4313      	orrs	r3, r2
 80041c2:	81a3      	strh	r3, [r4, #12]
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	9a01      	ldr	r2, [sp, #4]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	81a3      	strh	r3, [r4, #12]
 80041cc:	e7cc      	b.n	8004168 <__smakebuf_r+0x1c>
	...

080041d0 <_fstat_r>:
 80041d0:	2300      	movs	r3, #0
 80041d2:	b570      	push	{r4, r5, r6, lr}
 80041d4:	4d06      	ldr	r5, [pc, #24]	@ (80041f0 <_fstat_r+0x20>)
 80041d6:	0004      	movs	r4, r0
 80041d8:	0008      	movs	r0, r1
 80041da:	0011      	movs	r1, r2
 80041dc:	602b      	str	r3, [r5, #0]
 80041de:	f7fd f8c4 	bl	800136a <_fstat>
 80041e2:	1c43      	adds	r3, r0, #1
 80041e4:	d103      	bne.n	80041ee <_fstat_r+0x1e>
 80041e6:	682b      	ldr	r3, [r5, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d000      	beq.n	80041ee <_fstat_r+0x1e>
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	bd70      	pop	{r4, r5, r6, pc}
 80041f0:	200002b4 	.word	0x200002b4

080041f4 <_isatty_r>:
 80041f4:	2300      	movs	r3, #0
 80041f6:	b570      	push	{r4, r5, r6, lr}
 80041f8:	4d06      	ldr	r5, [pc, #24]	@ (8004214 <_isatty_r+0x20>)
 80041fa:	0004      	movs	r4, r0
 80041fc:	0008      	movs	r0, r1
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	f7fd f8c1 	bl	8001386 <_isatty>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d103      	bne.n	8004210 <_isatty_r+0x1c>
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d000      	beq.n	8004210 <_isatty_r+0x1c>
 800420e:	6023      	str	r3, [r4, #0]
 8004210:	bd70      	pop	{r4, r5, r6, pc}
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	200002b4 	.word	0x200002b4

08004218 <_init>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr

08004224 <_fini>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	46c0      	nop			@ (mov r8, r8)
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr
