
Magnet_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004674  08004674  00005674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800478c  0800478c  00006080  2**0
                  CONTENTS
  4 .ARM          00000000  0800478c  0800478c  00006080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800478c  0800478c  00006080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800478c  0800478c  0000578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004790  08004790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08004794  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000080  08004814  00006080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08004814  00006314  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cba4  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db5  00000000  00000000  00012c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00014a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000995  00000000  00000000  00015640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113e7  00000000  00000000  00015fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7a8  00000000  00000000  000273bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067071  00000000  00000000  00035b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009cbd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003590  00000000  00000000  0009cc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000a01a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800465c 	.word	0x0800465c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	0800465c 	.word	0x0800465c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1824      	adds	r4, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	42a3      	cmp	r3, r4
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0424      	lsls	r4, r4, #16
 8000456:	1960      	adds	r0, r4, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b087      	sub	sp, #28
 8000468:	af00      	add	r7, sp, #0
 800046a:	0004      	movs	r4, r0
 800046c:	0008      	movs	r0, r1
 800046e:	0011      	movs	r1, r2
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	1c22      	adds	r2, r4, #0
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	1dbb      	adds	r3, r7, #6
 8000478:	1c02      	adds	r2, r0, #0
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	1d7b      	adds	r3, r7, #5
 800047e:	1c0a      	adds	r2, r1, #0
 8000480:	701a      	strb	r2, [r3, #0]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8000482:	1dfb      	adds	r3, r7, #7
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b29a      	uxth	r2, r3
 8000488:	1dbb      	adds	r3, r7, #6
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b29b      	uxth	r3, r3
 800048e:	18d3      	adds	r3, r2, r3
 8000490:	b29a      	uxth	r2, r3
 8000492:	1d7b      	adds	r3, r7, #5
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	b29b      	uxth	r3, r3
 8000498:	18d3      	adds	r3, r2, r3
 800049a:	b29a      	uxth	r2, r3
 800049c:	2016      	movs	r0, #22
 800049e:	183b      	adds	r3, r7, r0
 80004a0:	3206      	adds	r2, #6
 80004a2:	32ff      	adds	r2, #255	@ 0xff
 80004a4:	801a      	strh	r2, [r3, #0]
	Checksum = 0-Checksum;
 80004a6:	183b      	adds	r3, r7, r0
 80004a8:	183a      	adds	r2, r7, r0
 80004aa:	8812      	ldrh	r2, [r2, #0]
 80004ac:	4252      	negs	r2, r2
 80004ae:	801a      	strh	r2, [r3, #0]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 80004b0:	210c      	movs	r1, #12
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	227e      	movs	r2, #126	@ 0x7e
 80004b6:	701a      	strb	r2, [r3, #0]
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	22ff      	movs	r2, #255	@ 0xff
 80004bc:	705a      	strb	r2, [r3, #1]
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2206      	movs	r2, #6
 80004c2:	709a      	strb	r2, [r3, #2]
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	1dfa      	adds	r2, r7, #7
 80004c8:	7812      	ldrb	r2, [r2, #0]
 80004ca:	70da      	strb	r2, [r3, #3]
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	711a      	strb	r2, [r3, #4]
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	1dba      	adds	r2, r7, #6
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	715a      	strb	r2, [r3, #5]
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	1d7a      	adds	r2, r7, #5
 80004de:	7812      	ldrb	r2, [r2, #0]
 80004e0:	719a      	strb	r2, [r3, #6]
 80004e2:	183b      	adds	r3, r7, r0
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	71da      	strb	r2, [r3, #7]
 80004f0:	183b      	adds	r3, r7, r0
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	721a      	strb	r2, [r3, #8]
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	22ef      	movs	r2, #239	@ 0xef
 80004fe:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 8000500:	2301      	movs	r3, #1
 8000502:	425b      	negs	r3, r3
 8000504:	1879      	adds	r1, r7, r1
 8000506:	4804      	ldr	r0, [pc, #16]	@ (8000518 <Send_cmd+0xb4>)
 8000508:	220a      	movs	r2, #10
 800050a:	f002 fc4f 	bl	8002dac <HAL_UART_Transmit>
}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b007      	add	sp, #28
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	2000012c 	.word	0x2000012c

0800051c <DF_Choose>:
{
  Send_cmd(0x03,0x00,0x01);
  HAL_Delay(200);
}
void DF_Choose (uint8_t par)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	0002      	movs	r2, r0
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x03, 0,par);
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	2003      	movs	r0, #3
 8000532:	f7ff ff97 	bl	8000464 <Send_cmd>
	HAL_Delay(200);
 8000536:	20c8      	movs	r0, #200	@ 0xc8
 8000538:	f001 f892 	bl	8001660 <HAL_Delay>
}
 800053c:	46c0      	nop			@ (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b002      	add	sp, #8
 8000542:	bd80      	pop	{r7, pc}

08000544 <DF_Init>:
void DF_Init (uint8_t volume)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	0002      	movs	r2, r0
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x3F, 0x00, Source);
 8000550:	2202      	movs	r2, #2
 8000552:	2100      	movs	r1, #0
 8000554:	203f      	movs	r0, #63	@ 0x3f
 8000556:	f7ff ff85 	bl	8000464 <Send_cmd>
	HAL_Delay(200);
 800055a:	20c8      	movs	r0, #200	@ 0xc8
 800055c:	f001 f880 	bl	8001660 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	2006      	movs	r0, #6
 800056a:	f7ff ff7b 	bl	8000464 <Send_cmd>
	HAL_Delay(500);
 800056e:	23fa      	movs	r3, #250	@ 0xfa
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	0018      	movs	r0, r3
 8000574:	f001 f874 	bl	8001660 <HAL_Delay>
}
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}

08000580 <DF_Pause>:
	Send_cmd(0x01, 0x00, 0x00);
	HAL_Delay(200);
}

void DF_Pause (void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	200e      	movs	r0, #14
 800058a:	f7ff ff6b 	bl	8000464 <Send_cmd>
	HAL_Delay(200);
 800058e:	20c8      	movs	r0, #200	@ 0xc8
 8000590:	f001 f866 	bl	8001660 <HAL_Delay>
}
 8000594:	46c0      	nop			@ (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <reset_Shift_Register>:

void ShiftOut(uint16_t data);
void DF_Choose(uint8_t);

void reset_Shift_Register()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 0);
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <reset_Shift_Register+0x34>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	2101      	movs	r1, #1
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fae9 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 1);
 80005ac:	2380      	movs	r3, #128	@ 0x80
 80005ae:	01db      	lsls	r3, r3, #7
 80005b0:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <reset_Shift_Register+0x38>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	0019      	movs	r1, r3
 80005b6:	f001 fae2 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 0);
 80005ba:	2380      	movs	r3, #128	@ 0x80
 80005bc:	01db      	lsls	r3, r3, #7
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <reset_Shift_Register+0x38>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	0019      	movs	r1, r3
 80005c4:	f001 fadb 	bl	8001b7e <HAL_GPIO_WritePin>
}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	48001400 	.word	0x48001400
 80005d4:	48000800 	.word	0x48000800

080005d8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	reset_Shift_Register();
 80005e0:	f7ff ffdc 	bl	800059c <reset_Shift_Register>
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 1);
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	2101      	movs	r1, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fac7 	bl	8001b7e <HAL_GPIO_WritePin>


	if(x)
 80005f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d008      	beq.n	800060a <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		ShiftOut(data);
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 facf 	bl	8000ba0 <ShiftOut>
		x=0;
 8000602:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
	{
		reset_Shift_Register();
		x=1;
	}

}
 8000608:	e004      	b.n	8000614 <HAL_TIM_PeriodElapsedCallback+0x3c>
		reset_Shift_Register();
 800060a:	f7ff ffc7 	bl	800059c <reset_Shift_Register>
		x=1;
 800060e:	4b04      	ldr	r3, [pc, #16]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
}
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b002      	add	sp, #8
 800061a:	bd80      	pop	{r7, pc}
 800061c:	48001400 	.word	0x48001400
 8000620:	200001bc 	.word	0x200001bc
 8000624:	20000014 	.word	0x20000014

08000628 <segment_Update>:

void segment_Update(int num)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if(num==0)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d136      	bne.n	80006a4 <segment_Update+0x7c>
	{
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000636:	2380      	movs	r3, #128	@ 0x80
 8000638:	0159      	lsls	r1, r3, #5
 800063a:	2390      	movs	r3, #144	@ 0x90
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	2201      	movs	r2, #1
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fa9c 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000646:	2380      	movs	r3, #128	@ 0x80
 8000648:	0119      	lsls	r1, r3, #4
 800064a:	2390      	movs	r3, #144	@ 0x90
 800064c:	05db      	lsls	r3, r3, #23
 800064e:	2201      	movs	r2, #1
 8000650:	0018      	movs	r0, r3
 8000652:	f001 fa94 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 8000656:	2380      	movs	r3, #128	@ 0x80
 8000658:	00d9      	lsls	r1, r3, #3
 800065a:	2390      	movs	r3, #144	@ 0x90
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	2201      	movs	r2, #1
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fa8c 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 8000666:	2380      	movs	r3, #128	@ 0x80
 8000668:	0099      	lsls	r1, r3, #2
 800066a:	2390      	movs	r3, #144	@ 0x90
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	2201      	movs	r2, #1
 8000670:	0018      	movs	r0, r3
 8000672:	f001 fa84 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 8000676:	2380      	movs	r3, #128	@ 0x80
 8000678:	0059      	lsls	r1, r3, #1
 800067a:	2390      	movs	r3, #144	@ 0x90
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2201      	movs	r2, #1
 8000680:	0018      	movs	r0, r3
 8000682:	f001 fa7c 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 8000686:	2380      	movs	r3, #128	@ 0x80
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	48ee      	ldr	r0, [pc, #952]	@ (8000a44 <segment_Update+0x41c>)
 800068c:	2201      	movs	r2, #1
 800068e:	0019      	movs	r1, r3
 8000690:	f001 fa75 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	01db      	lsls	r3, r3, #7
 8000698:	48ea      	ldr	r0, [pc, #936]	@ (8000a44 <segment_Update+0x41c>)
 800069a:	2200      	movs	r2, #0
 800069c:	0019      	movs	r1, r3
 800069e:	f001 fa6e 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
	}
}
 80006a2:	e241      	b.n	8000b28 <segment_Update+0x500>
	else if(num==1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d136      	bne.n	8000718 <segment_Update+0xf0>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,0);
 80006aa:	2380      	movs	r3, #128	@ 0x80
 80006ac:	0159      	lsls	r1, r3, #5
 80006ae:	2390      	movs	r3, #144	@ 0x90
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	2200      	movs	r2, #0
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fa62 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 80006ba:	2380      	movs	r3, #128	@ 0x80
 80006bc:	0119      	lsls	r1, r3, #4
 80006be:	2390      	movs	r3, #144	@ 0x90
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2201      	movs	r2, #1
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fa5a 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 80006ca:	2380      	movs	r3, #128	@ 0x80
 80006cc:	00d9      	lsls	r1, r3, #3
 80006ce:	2390      	movs	r3, #144	@ 0x90
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2201      	movs	r2, #1
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fa52 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 80006da:	2380      	movs	r3, #128	@ 0x80
 80006dc:	0099      	lsls	r1, r3, #2
 80006de:	2390      	movs	r3, #144	@ 0x90
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	2200      	movs	r2, #0
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fa4a 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 80006ea:	2380      	movs	r3, #128	@ 0x80
 80006ec:	0059      	lsls	r1, r3, #1
 80006ee:	2390      	movs	r3, #144	@ 0x90
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	2200      	movs	r2, #0
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 fa42 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 80006fa:	2380      	movs	r3, #128	@ 0x80
 80006fc:	021b      	lsls	r3, r3, #8
 80006fe:	48d1      	ldr	r0, [pc, #836]	@ (8000a44 <segment_Update+0x41c>)
 8000700:	2200      	movs	r2, #0
 8000702:	0019      	movs	r1, r3
 8000704:	f001 fa3b 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 8000708:	2380      	movs	r3, #128	@ 0x80
 800070a:	01db      	lsls	r3, r3, #7
 800070c:	48cd      	ldr	r0, [pc, #820]	@ (8000a44 <segment_Update+0x41c>)
 800070e:	2200      	movs	r2, #0
 8000710:	0019      	movs	r1, r3
 8000712:	f001 fa34 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8000716:	e207      	b.n	8000b28 <segment_Update+0x500>
	else if(num==2)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d136      	bne.n	800078c <segment_Update+0x164>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	0159      	lsls	r1, r3, #5
 8000722:	2390      	movs	r3, #144	@ 0x90
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2201      	movs	r2, #1
 8000728:	0018      	movs	r0, r3
 800072a:	f001 fa28 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 800072e:	2380      	movs	r3, #128	@ 0x80
 8000730:	0119      	lsls	r1, r3, #4
 8000732:	2390      	movs	r3, #144	@ 0x90
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	2201      	movs	r2, #1
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fa20 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,0);
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	00d9      	lsls	r1, r3, #3
 8000742:	2390      	movs	r3, #144	@ 0x90
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2200      	movs	r2, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fa18 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 800074e:	2380      	movs	r3, #128	@ 0x80
 8000750:	0099      	lsls	r1, r3, #2
 8000752:	2390      	movs	r3, #144	@ 0x90
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	2201      	movs	r2, #1
 8000758:	0018      	movs	r0, r3
 800075a:	f001 fa10 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 800075e:	2380      	movs	r3, #128	@ 0x80
 8000760:	0059      	lsls	r1, r3, #1
 8000762:	2390      	movs	r3, #144	@ 0x90
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2201      	movs	r2, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f001 fa08 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 800076e:	2380      	movs	r3, #128	@ 0x80
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	48b4      	ldr	r0, [pc, #720]	@ (8000a44 <segment_Update+0x41c>)
 8000774:	2200      	movs	r2, #0
 8000776:	0019      	movs	r1, r3
 8000778:	f001 fa01 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 800077c:	2380      	movs	r3, #128	@ 0x80
 800077e:	01db      	lsls	r3, r3, #7
 8000780:	48b0      	ldr	r0, [pc, #704]	@ (8000a44 <segment_Update+0x41c>)
 8000782:	2201      	movs	r2, #1
 8000784:	0019      	movs	r1, r3
 8000786:	f001 f9fa 	bl	8001b7e <HAL_GPIO_WritePin>
}
 800078a:	e1cd      	b.n	8000b28 <segment_Update+0x500>
	else if(num==3)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b03      	cmp	r3, #3
 8000790:	d136      	bne.n	8000800 <segment_Update+0x1d8>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000792:	2380      	movs	r3, #128	@ 0x80
 8000794:	0159      	lsls	r1, r3, #5
 8000796:	2390      	movs	r3, #144	@ 0x90
 8000798:	05db      	lsls	r3, r3, #23
 800079a:	2201      	movs	r2, #1
 800079c:	0018      	movs	r0, r3
 800079e:	f001 f9ee 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	0119      	lsls	r1, r3, #4
 80007a6:	2390      	movs	r3, #144	@ 0x90
 80007a8:	05db      	lsls	r3, r3, #23
 80007aa:	2201      	movs	r2, #1
 80007ac:	0018      	movs	r0, r3
 80007ae:	f001 f9e6 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 80007b2:	2380      	movs	r3, #128	@ 0x80
 80007b4:	00d9      	lsls	r1, r3, #3
 80007b6:	2390      	movs	r3, #144	@ 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2201      	movs	r2, #1
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 f9de 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 80007c2:	2380      	movs	r3, #128	@ 0x80
 80007c4:	0099      	lsls	r1, r3, #2
 80007c6:	2390      	movs	r3, #144	@ 0x90
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	2201      	movs	r2, #1
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 f9d6 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 80007d2:	2380      	movs	r3, #128	@ 0x80
 80007d4:	0059      	lsls	r1, r3, #1
 80007d6:	2390      	movs	r3, #144	@ 0x90
 80007d8:	05db      	lsls	r3, r3, #23
 80007da:	2200      	movs	r2, #0
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 f9ce 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 80007e2:	2380      	movs	r3, #128	@ 0x80
 80007e4:	021b      	lsls	r3, r3, #8
 80007e6:	4897      	ldr	r0, [pc, #604]	@ (8000a44 <segment_Update+0x41c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	0019      	movs	r1, r3
 80007ec:	f001 f9c7 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	01db      	lsls	r3, r3, #7
 80007f4:	4893      	ldr	r0, [pc, #588]	@ (8000a44 <segment_Update+0x41c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	0019      	movs	r1, r3
 80007fa:	f001 f9c0 	bl	8001b7e <HAL_GPIO_WritePin>
}
 80007fe:	e193      	b.n	8000b28 <segment_Update+0x500>
	else if(num==4)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d136      	bne.n	8000874 <segment_Update+0x24c>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,0);
 8000806:	2380      	movs	r3, #128	@ 0x80
 8000808:	0159      	lsls	r1, r3, #5
 800080a:	2390      	movs	r3, #144	@ 0x90
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	2200      	movs	r2, #0
 8000810:	0018      	movs	r0, r3
 8000812:	f001 f9b4 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000816:	2380      	movs	r3, #128	@ 0x80
 8000818:	0119      	lsls	r1, r3, #4
 800081a:	2390      	movs	r3, #144	@ 0x90
 800081c:	05db      	lsls	r3, r3, #23
 800081e:	2201      	movs	r2, #1
 8000820:	0018      	movs	r0, r3
 8000822:	f001 f9ac 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 8000826:	2380      	movs	r3, #128	@ 0x80
 8000828:	00d9      	lsls	r1, r3, #3
 800082a:	2390      	movs	r3, #144	@ 0x90
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	2201      	movs	r2, #1
 8000830:	0018      	movs	r0, r3
 8000832:	f001 f9a4 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 8000836:	2380      	movs	r3, #128	@ 0x80
 8000838:	0099      	lsls	r1, r3, #2
 800083a:	2390      	movs	r3, #144	@ 0x90
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2200      	movs	r2, #0
 8000840:	0018      	movs	r0, r3
 8000842:	f001 f99c 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8000846:	2380      	movs	r3, #128	@ 0x80
 8000848:	0059      	lsls	r1, r3, #1
 800084a:	2390      	movs	r3, #144	@ 0x90
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	2200      	movs	r2, #0
 8000850:	0018      	movs	r0, r3
 8000852:	f001 f994 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 8000856:	2380      	movs	r3, #128	@ 0x80
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	487a      	ldr	r0, [pc, #488]	@ (8000a44 <segment_Update+0x41c>)
 800085c:	2201      	movs	r2, #1
 800085e:	0019      	movs	r1, r3
 8000860:	f001 f98d 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 8000864:	2380      	movs	r3, #128	@ 0x80
 8000866:	01db      	lsls	r3, r3, #7
 8000868:	4876      	ldr	r0, [pc, #472]	@ (8000a44 <segment_Update+0x41c>)
 800086a:	2201      	movs	r2, #1
 800086c:	0019      	movs	r1, r3
 800086e:	f001 f986 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8000872:	e159      	b.n	8000b28 <segment_Update+0x500>
	else if(num==5)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b05      	cmp	r3, #5
 8000878:	d136      	bne.n	80008e8 <segment_Update+0x2c0>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 800087a:	2380      	movs	r3, #128	@ 0x80
 800087c:	0159      	lsls	r1, r3, #5
 800087e:	2390      	movs	r3, #144	@ 0x90
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2201      	movs	r2, #1
 8000884:	0018      	movs	r0, r3
 8000886:	f001 f97a 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,0);
 800088a:	2380      	movs	r3, #128	@ 0x80
 800088c:	0119      	lsls	r1, r3, #4
 800088e:	2390      	movs	r3, #144	@ 0x90
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	2200      	movs	r2, #0
 8000894:	0018      	movs	r0, r3
 8000896:	f001 f972 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 800089a:	2380      	movs	r3, #128	@ 0x80
 800089c:	00d9      	lsls	r1, r3, #3
 800089e:	2390      	movs	r3, #144	@ 0x90
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	2201      	movs	r2, #1
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 f96a 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 80008aa:	2380      	movs	r3, #128	@ 0x80
 80008ac:	0099      	lsls	r1, r3, #2
 80008ae:	2390      	movs	r3, #144	@ 0x90
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2201      	movs	r2, #1
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 f962 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 80008ba:	2380      	movs	r3, #128	@ 0x80
 80008bc:	0059      	lsls	r1, r3, #1
 80008be:	2390      	movs	r3, #144	@ 0x90
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2200      	movs	r2, #0
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 f95a 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 80008ca:	2380      	movs	r3, #128	@ 0x80
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	485d      	ldr	r0, [pc, #372]	@ (8000a44 <segment_Update+0x41c>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	0019      	movs	r1, r3
 80008d4:	f001 f953 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 80008d8:	2380      	movs	r3, #128	@ 0x80
 80008da:	01db      	lsls	r3, r3, #7
 80008dc:	4859      	ldr	r0, [pc, #356]	@ (8000a44 <segment_Update+0x41c>)
 80008de:	2201      	movs	r2, #1
 80008e0:	0019      	movs	r1, r3
 80008e2:	f001 f94c 	bl	8001b7e <HAL_GPIO_WritePin>
}
 80008e6:	e11f      	b.n	8000b28 <segment_Update+0x500>
	else if(num==6)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	d136      	bne.n	800095c <segment_Update+0x334>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 80008ee:	2380      	movs	r3, #128	@ 0x80
 80008f0:	0159      	lsls	r1, r3, #5
 80008f2:	2390      	movs	r3, #144	@ 0x90
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	2201      	movs	r2, #1
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 f940 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 80008fe:	2380      	movs	r3, #128	@ 0x80
 8000900:	0119      	lsls	r1, r3, #4
 8000902:	2390      	movs	r3, #144	@ 0x90
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	2201      	movs	r2, #1
 8000908:	0018      	movs	r0, r3
 800090a:	f001 f938 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 800090e:	2380      	movs	r3, #128	@ 0x80
 8000910:	00d9      	lsls	r1, r3, #3
 8000912:	2390      	movs	r3, #144	@ 0x90
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	2201      	movs	r2, #1
 8000918:	0018      	movs	r0, r3
 800091a:	f001 f930 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 800091e:	2380      	movs	r3, #128	@ 0x80
 8000920:	0099      	lsls	r1, r3, #2
 8000922:	2390      	movs	r3, #144	@ 0x90
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	2201      	movs	r2, #1
 8000928:	0018      	movs	r0, r3
 800092a:	f001 f928 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 800092e:	2380      	movs	r3, #128	@ 0x80
 8000930:	0059      	lsls	r1, r3, #1
 8000932:	2390      	movs	r3, #144	@ 0x90
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	2201      	movs	r2, #1
 8000938:	0018      	movs	r0, r3
 800093a:	f001 f920 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 800093e:	2380      	movs	r3, #128	@ 0x80
 8000940:	021b      	lsls	r3, r3, #8
 8000942:	4840      	ldr	r0, [pc, #256]	@ (8000a44 <segment_Update+0x41c>)
 8000944:	2200      	movs	r2, #0
 8000946:	0019      	movs	r1, r3
 8000948:	f001 f919 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	01db      	lsls	r3, r3, #7
 8000950:	483c      	ldr	r0, [pc, #240]	@ (8000a44 <segment_Update+0x41c>)
 8000952:	2201      	movs	r2, #1
 8000954:	0019      	movs	r1, r3
 8000956:	f001 f912 	bl	8001b7e <HAL_GPIO_WritePin>
}
 800095a:	e0e5      	b.n	8000b28 <segment_Update+0x500>
	else if(num==7)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b07      	cmp	r3, #7
 8000960:	d136      	bne.n	80009d0 <segment_Update+0x3a8>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000962:	2380      	movs	r3, #128	@ 0x80
 8000964:	0159      	lsls	r1, r3, #5
 8000966:	2390      	movs	r3, #144	@ 0x90
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	2201      	movs	r2, #1
 800096c:	0018      	movs	r0, r3
 800096e:	f001 f906 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	0119      	lsls	r1, r3, #4
 8000976:	2390      	movs	r3, #144	@ 0x90
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	2201      	movs	r2, #1
 800097c:	0018      	movs	r0, r3
 800097e:	f001 f8fe 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 8000982:	2380      	movs	r3, #128	@ 0x80
 8000984:	00d9      	lsls	r1, r3, #3
 8000986:	2390      	movs	r3, #144	@ 0x90
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	2201      	movs	r2, #1
 800098c:	0018      	movs	r0, r3
 800098e:	f001 f8f6 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 8000992:	2380      	movs	r3, #128	@ 0x80
 8000994:	0099      	lsls	r1, r3, #2
 8000996:	2390      	movs	r3, #144	@ 0x90
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	2200      	movs	r2, #0
 800099c:	0018      	movs	r0, r3
 800099e:	f001 f8ee 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 80009a2:	2380      	movs	r3, #128	@ 0x80
 80009a4:	0059      	lsls	r1, r3, #1
 80009a6:	2390      	movs	r3, #144	@ 0x90
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	2200      	movs	r2, #0
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 f8e6 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	4823      	ldr	r0, [pc, #140]	@ (8000a44 <segment_Update+0x41c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	0019      	movs	r1, r3
 80009bc:	f001 f8df 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 80009c0:	2380      	movs	r3, #128	@ 0x80
 80009c2:	01db      	lsls	r3, r3, #7
 80009c4:	481f      	ldr	r0, [pc, #124]	@ (8000a44 <segment_Update+0x41c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	0019      	movs	r1, r3
 80009ca:	f001 f8d8 	bl	8001b7e <HAL_GPIO_WritePin>
}
 80009ce:	e0ab      	b.n	8000b28 <segment_Update+0x500>
	else if(num==8)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b08      	cmp	r3, #8
 80009d4:	d138      	bne.n	8000a48 <segment_Update+0x420>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 80009d6:	2380      	movs	r3, #128	@ 0x80
 80009d8:	0159      	lsls	r1, r3, #5
 80009da:	2390      	movs	r3, #144	@ 0x90
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	2201      	movs	r2, #1
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 f8cc 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	0119      	lsls	r1, r3, #4
 80009ea:	2390      	movs	r3, #144	@ 0x90
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	2201      	movs	r2, #1
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 f8c4 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 80009f6:	2380      	movs	r3, #128	@ 0x80
 80009f8:	00d9      	lsls	r1, r3, #3
 80009fa:	2390      	movs	r3, #144	@ 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	2201      	movs	r2, #1
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 f8bc 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	0099      	lsls	r1, r3, #2
 8000a0a:	2390      	movs	r3, #144	@ 0x90
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	2201      	movs	r2, #1
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 f8b4 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,1);
 8000a16:	2380      	movs	r3, #128	@ 0x80
 8000a18:	0059      	lsls	r1, r3, #1
 8000a1a:	2390      	movs	r3, #144	@ 0x90
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	2201      	movs	r2, #1
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 f8ac 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	021b      	lsls	r3, r3, #8
 8000a2a:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <segment_Update+0x41c>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	0019      	movs	r1, r3
 8000a30:	f001 f8a5 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	01db      	lsls	r3, r3, #7
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <segment_Update+0x41c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	f001 f89e 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8000a42:	e071      	b.n	8000b28 <segment_Update+0x500>
 8000a44:	48000400 	.word	0x48000400
	else if(num==9)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b09      	cmp	r3, #9
 8000a4c:	d136      	bne.n	8000abc <segment_Update+0x494>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,1);
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	0159      	lsls	r1, r3, #5
 8000a52:	2390      	movs	r3, #144	@ 0x90
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	2201      	movs	r2, #1
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f001 f890 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,1);
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	0119      	lsls	r1, r3, #4
 8000a62:	2390      	movs	r3, #144	@ 0x90
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	2201      	movs	r2, #1
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 f888 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,1);
 8000a6e:	2380      	movs	r3, #128	@ 0x80
 8000a70:	00d9      	lsls	r1, r3, #3
 8000a72:	2390      	movs	r3, #144	@ 0x90
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	2201      	movs	r2, #1
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f001 f880 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,1);
 8000a7e:	2380      	movs	r3, #128	@ 0x80
 8000a80:	0099      	lsls	r1, r3, #2
 8000a82:	2390      	movs	r3, #144	@ 0x90
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	2201      	movs	r2, #1
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f001 f878 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8000a8e:	2380      	movs	r3, #128	@ 0x80
 8000a90:	0059      	lsls	r1, r3, #1
 8000a92:	2390      	movs	r3, #144	@ 0x90
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	2200      	movs	r2, #0
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 f870 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,1);
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	021b      	lsls	r3, r3, #8
 8000aa2:	4823      	ldr	r0, [pc, #140]	@ (8000b30 <segment_Update+0x508>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	f001 f869 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,1);
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	01db      	lsls	r3, r3, #7
 8000ab0:	481f      	ldr	r0, [pc, #124]	@ (8000b30 <segment_Update+0x508>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	f001 f862 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8000aba:	e035      	b.n	8000b28 <segment_Update+0x500>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin,0);
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	0159      	lsls	r1, r3, #5
 8000ac0:	2390      	movs	r3, #144	@ 0x90
 8000ac2:	05db      	lsls	r3, r3, #23
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 f859 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin,0);
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	0119      	lsls	r1, r3, #4
 8000ad0:	2390      	movs	r3, #144	@ 0x90
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f001 f851 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin,0);
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	00d9      	lsls	r1, r3, #3
 8000ae0:	2390      	movs	r3, #144	@ 0x90
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 f849 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,0);
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	0099      	lsls	r1, r3, #2
 8000af0:	2390      	movs	r3, #144	@ 0x90
 8000af2:	05db      	lsls	r3, r3, #23
 8000af4:	2200      	movs	r2, #0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f001 f841 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin,0);
 8000afc:	2380      	movs	r3, #128	@ 0x80
 8000afe:	0059      	lsls	r1, r3, #1
 8000b00:	2390      	movs	r3, #144	@ 0x90
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	2200      	movs	r2, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 f839 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin,0);
 8000b0c:	2380      	movs	r3, #128	@ 0x80
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	4807      	ldr	r0, [pc, #28]	@ (8000b30 <segment_Update+0x508>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	0019      	movs	r1, r3
 8000b16:	f001 f832 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin,0);
 8000b1a:	2380      	movs	r3, #128	@ 0x80
 8000b1c:	01db      	lsls	r3, r3, #7
 8000b1e:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <segment_Update+0x508>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	0019      	movs	r1, r3
 8000b24:	f001 f82b 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	48000400 	.word	0x48000400

08000b34 <shuffle>:

void shuffle(uint8_t *array, uint8_t size)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	000a      	movs	r2, r1
 8000b3e:	1cfb      	adds	r3, r7, #3
 8000b40:	701a      	strb	r2, [r3, #0]
	for (int i = size - 1; i > 0; i--) {
 8000b42:	1cfb      	adds	r3, r7, #3
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e020      	b.n	8000b8e <shuffle+0x5a>
		int j = rand() % (i + 1);
 8000b4c:	f002 fd6e 	bl	800362c <rand>
 8000b50:	0002      	movs	r2, r0
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	0019      	movs	r1, r3
 8000b58:	0010      	movs	r0, r2
 8000b5a:	f7ff fc4f 	bl	80003fc <__aeabi_idivmod>
 8000b5e:	000b      	movs	r3, r1
 8000b60:	613b      	str	r3, [r7, #16]

		int temp = array[i];
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	18d3      	adds	r3, r2, r3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	60fb      	str	r3, [r7, #12]
		array[i] = array[j];
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	18d2      	adds	r2, r2, r3
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	18cb      	adds	r3, r1, r3
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	701a      	strb	r2, [r3, #0]
		array[j] = temp;
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	18d3      	adds	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	701a      	strb	r2, [r3, #0]
	for (int i = size - 1; i > 0; i--) {
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dcdb      	bgt.n	8000b4c <shuffle+0x18>
	}
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b006      	add	sp, #24
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <ShiftOut>:
void ShiftOut(uint16_t data)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	1dbb      	adds	r3, r7, #6
 8000baa:	801a      	strh	r2, [r3, #0]

	for (int i = 0; i < 16; i++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	e021      	b.n	8000bf6 <ShiftOut+0x56>
	{
		HAL_GPIO_WritePin(SER_GPIO_Port, SER_Pin, (data & (1 << (15 - i))) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bb2:	1dbb      	adds	r3, r7, #6
 8000bb4:	881a      	ldrh	r2, [r3, #0]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	210f      	movs	r1, #15
 8000bba:	1acb      	subs	r3, r1, r3
 8000bbc:	411a      	asrs	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	019b      	lsls	r3, r3, #6
 8000bcc:	4814      	ldr	r0, [pc, #80]	@ (8000c20 <ShiftOut+0x80>)
 8000bce:	0019      	movs	r1, r3
 8000bd0:	f000 ffd5 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET); // بالا رفتن لبه ساعت
 8000bd4:	2380      	movs	r3, #128	@ 0x80
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <ShiftOut+0x80>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	0019      	movs	r1, r3
 8000bde:	f000 ffce 	bl	8001b7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET); // پایین آمدن لبه ساعت
 8000be2:	2380      	movs	r3, #128	@ 0x80
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <ShiftOut+0x80>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	0019      	movs	r1, r3
 8000bec:	f000 ffc7 	bl	8001b7e <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	ddda      	ble.n	8000bb2 <ShiftOut+0x12>
	}
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_SET); // بالا رفتن لبه RCLK
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	01db      	lsls	r3, r3, #7
 8000c00:	4807      	ldr	r0, [pc, #28]	@ (8000c20 <ShiftOut+0x80>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	0019      	movs	r1, r3
 8000c06:	f000 ffba 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_RESET); // پایین آمدن لبه RCLK
 8000c0a:	2380      	movs	r3, #128	@ 0x80
 8000c0c:	01db      	lsls	r3, r3, #7
 8000c0e:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <ShiftOut+0x80>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	0019      	movs	r1, r3
 8000c14:	f000 ffb3 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b004      	add	sp, #16
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	48000800 	.word	0x48000800

08000c24 <button_Click>:

void button_Click()
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
	DF_Choose(2);
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f7ff fc76 	bl	800051c <DF_Choose>
	for(int i = 3; i>=0; i--)
 8000c30:	2303      	movs	r3, #3
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	e00b      	b.n	8000c4e <button_Click+0x2a>
	{
		segment_Update(i);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff fcf5 	bl	8000628 <segment_Update>
		HAL_Delay(1000);
 8000c3e:	23fa      	movs	r3, #250	@ 0xfa
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fd0c 	bl	8001660 <HAL_Delay>
	for(int i = 3; i>=0; i--)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	daf0      	bge.n	8000c36 <button_Click+0x12>
	}
	segment_Update(10);
 8000c54:	200a      	movs	r0, #10
 8000c56:	f7ff fce7 	bl	8000628 <segment_Update>
	state=playing_Game;
 8000c5a:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <button_Click+0x48>)
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <button_Click+0x4c>)
 8000c60:	701a      	strb	r2, [r3, #0]
}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000001 	.word	0x20000001
 8000c70:	200001b4 	.word	0x200001b4

08000c74 <start_Game>:



void start_Game()
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	DF_Choose(1);
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff fc4e 	bl	800051c <DF_Choose>

	for(int i = 0; i<16; i++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	e020      	b.n	8000cc8 <start_Game+0x54>
	{

		data = data & (~(1 << randomNumber[i]));
 8000c86:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf0 <start_Game+0x7c>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	18d3      	adds	r3, r2, r3
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	001a      	movs	r2, r3
 8000c90:	2301      	movs	r3, #1
 8000c92:	4093      	lsls	r3, r2
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	b21b      	sxth	r3, r3
 8000c9a:	4a16      	ldr	r2, [pc, #88]	@ (8000cf4 <start_Game+0x80>)
 8000c9c:	8812      	ldrh	r2, [r2, #0]
 8000c9e:	b212      	sxth	r2, r2
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <start_Game+0x80>)
 8000ca8:	801a      	strh	r2, [r3, #0]
		segment_Update(randomNumber[i]);
 8000caa:	4a11      	ldr	r2, [pc, #68]	@ (8000cf0 <start_Game+0x7c>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	18d3      	adds	r3, r2, r3
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff fcb8 	bl	8000628 <segment_Update>
		HAL_Delay(1000);
 8000cb8:	23fa      	movs	r3, #250	@ 0xfa
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f000 fccf 	bl	8001660 <HAL_Delay>
	for(int i = 0; i<16; i++)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	dddb      	ble.n	8000c86 <start_Game+0x12>
	}

	segment_Update(10);
 8000cce:	200a      	movs	r0, #10
 8000cd0:	f7ff fcaa 	bl	8000628 <segment_Update>
	DF_Pause();
 8000cd4:	f7ff fc54 	bl	8000580 <DF_Pause>
	data=0xffff;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <start_Game+0x80>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4252      	negs	r2, r2
 8000cde:	801a      	strh	r2, [r3, #0]
	state=waiting_For_Start;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <start_Game+0x84>)
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <start_Game+0x88>)
 8000ce6:	701a      	strb	r2, [r3, #0]
}
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000004 	.word	0x20000004
 8000cf4:	20000014 	.word	0x20000014
 8000cf8:	200001b5 	.word	0x200001b5
 8000cfc:	200001b4 	.word	0x200001b4

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d04:	f000 fc48 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d08:	f000 f876 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0c:	f000 f992 	bl	8001034 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d10:	f000 f960 	bl	8000fd4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d14:	f000 f8b0 	bl	8000e78 <MX_TIM3_Init>
  MX_TIM15_Init();
 8000d18:	f000 f904 	bl	8000f24 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
	DF_Init(30);
 8000d1c:	201e      	movs	r0, #30
 8000d1e:	f7ff fc11 	bl	8000544 <DF_Init>
	HAL_TIM_Base_Start(&htim3);
 8000d22:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <main+0xcc>)
 8000d24:	0018      	movs	r0, r3
 8000d26:	f001 fbf5 	bl	8002514 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim15);
 8000d2a:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <main+0xd0>)
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f001 fc35 	bl	800259c <HAL_TIM_Base_Start_IT>


	seed = __HAL_TIM_GET_COUNTER(&htim3);
 8000d32:	4b26      	ldr	r3, [pc, #152]	@ (8000dcc <main+0xcc>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d38:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <main+0xd4>)
 8000d3a:	601a      	str	r2, [r3, #0]
	srand(seed);
 8000d3c:	4b25      	ldr	r3, [pc, #148]	@ (8000dd4 <main+0xd4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	0018      	movs	r0, r3
 8000d42:	f002 fc43 	bl	80035cc <srand>
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 0);
 8000d46:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <main+0xd8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 ff16 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 1);
 8000d52:	2380      	movs	r3, #128	@ 0x80
 8000d54:	01db      	lsls	r3, r3, #7
 8000d56:	4821      	ldr	r0, [pc, #132]	@ (8000ddc <main+0xdc>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	f000 ff0f 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d60:	200a      	movs	r0, #10
 8000d62:	f000 fc7d 	bl	8001660 <HAL_Delay>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, 0);
 8000d66:	2380      	movs	r3, #128	@ 0x80
 8000d68:	01db      	lsls	r3, r3, #7
 8000d6a:	481c      	ldr	r0, [pc, #112]	@ (8000ddc <main+0xdc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	0019      	movs	r1, r3
 8000d70:	f000 ff05 	bl	8001b7e <HAL_GPIO_WritePin>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(state==waiting_For_Start)//check coin & ask & start button
 8000d74:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <main+0xe0>)
 8000d76:	781a      	ldrb	r2, [r3, #0]
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <main+0xe4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d112      	bne.n	8000da6 <main+0xa6>
		{
			if(!HAL_GPIO_ReadPin(Ext_IO1_GPIO_Port, Ext_IO1_Pin))
 8000d80:	2380      	movs	r3, #128	@ 0x80
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	4a18      	ldr	r2, [pc, #96]	@ (8000de8 <main+0xe8>)
 8000d86:	0019      	movs	r1, r3
 8000d88:	0010      	movs	r0, r2
 8000d8a:	f000 fedb 	bl	8001b44 <HAL_GPIO_ReadPin>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d103      	bne.n	8000d9a <main+0x9a>
				state = button_Clicked;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <main+0xec>)
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <main+0xe0>)
 8000d98:	701a      	strb	r2, [r3, #0]
			shuffle(randomNumber, 16);
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <main+0xf0>)
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff fec8 	bl	8000b34 <shuffle>
 8000da4:	e7e6      	b.n	8000d74 <main+0x74>
		}
		else if(state==button_Clicked)
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <main+0xe0>)
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <main+0xec>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d102      	bne.n	8000db8 <main+0xb8>
			button_Click();
 8000db2:	f7ff ff37 	bl	8000c24 <button_Click>
 8000db6:	e7dd      	b.n	8000d74 <main+0x74>

		else if(state==playing_Game)
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <main+0xe0>)
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <main+0xf4>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d1d7      	bne.n	8000d74 <main+0x74>
			start_Game();
 8000dc4:	f7ff ff56 	bl	8000c74 <start_Game>
		if(state==waiting_For_Start)//check coin & ask & start button
 8000dc8:	e7d4      	b.n	8000d74 <main+0x74>
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	2000009c 	.word	0x2000009c
 8000dd0:	200000e4 	.word	0x200000e4
 8000dd4:	200001b8 	.word	0x200001b8
 8000dd8:	48001400 	.word	0x48001400
 8000ddc:	48000800 	.word	0x48000800
 8000de0:	200001b4 	.word	0x200001b4
 8000de4:	200001b5 	.word	0x200001b5
 8000de8:	48000400 	.word	0x48000400
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000004 	.word	0x20000004
 8000df4:	20000001 	.word	0x20000001

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b091      	sub	sp, #68	@ 0x44
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	2410      	movs	r4, #16
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	0018      	movs	r0, r3
 8000e04:	2330      	movs	r3, #48	@ 0x30
 8000e06:	001a      	movs	r2, r3
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f002 fd5d 	bl	80038c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0e:	003b      	movs	r3, r7
 8000e10:	0018      	movs	r0, r3
 8000e12:	2310      	movs	r3, #16
 8000e14:	001a      	movs	r2, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	f002 fd56 	bl	80038c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e1c:	0021      	movs	r1, r4
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2202      	movs	r2, #2
 8000e22:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2201      	movs	r2, #1
 8000e28:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f000 febd 	bl	8001bb8 <HAL_RCC_OscConfig>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000e42:	f000 f9e3 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	003b      	movs	r3, r7
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e52:	003b      	movs	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e58:	003b      	movs	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2100      	movs	r1, #0
 8000e62:	0018      	movs	r0, r3
 8000e64:	f001 f9c2 	bl	80021ec <HAL_RCC_ClockConfig>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e6c:	f000 f9ce 	bl	800120c <Error_Handler>
  }
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b011      	add	sp, #68	@ 0x44
 8000e76:	bd90      	pop	{r4, r7, pc}

08000e78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7e:	2308      	movs	r3, #8
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	0018      	movs	r0, r3
 8000e84:	2310      	movs	r3, #16
 8000e86:	001a      	movs	r2, r3
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f002 fd1d 	bl	80038c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8e:	003b      	movs	r3, r7
 8000e90:	0018      	movs	r0, r3
 8000e92:	2308      	movs	r3, #8
 8000e94:	001a      	movs	r2, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	f002 fd16 	bl	80038c8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <MX_TIM3_Init+0xa0>)
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000f1c <MX_TIM3_Init+0xa4>)
 8000ea0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_TIM3_Init+0xa0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <MX_TIM3_Init+0xa0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000-1;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_TIM3_Init+0xa0>)
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f20 <MX_TIM3_Init+0xa8>)
 8000eb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <MX_TIM3_Init+0xa0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eba:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <MX_TIM3_Init+0xa0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec0:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <MX_TIM3_Init+0xa0>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f001 fad6 	bl	8002474 <HAL_TIM_Base_Init>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ecc:	f000 f99e 	bl	800120c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2280      	movs	r2, #128	@ 0x80
 8000ed6:	0152      	lsls	r2, r2, #5
 8000ed8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eda:	187a      	adds	r2, r7, r1
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_TIM3_Init+0xa0>)
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 fc95 	bl	8002810 <HAL_TIM_ConfigClockSource>
 8000ee6:	1e03      	subs	r3, r0, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000eea:	f000 f98f 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000efa:	003a      	movs	r2, r7
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_TIM3_Init+0xa0>)
 8000efe:	0011      	movs	r1, r2
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 fe97 	bl	8002c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f0a:	f000 f97f 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b006      	add	sp, #24
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	2000009c 	.word	0x2000009c
 8000f1c:	40000400 	.word	0x40000400
 8000f20:	00001f3f 	.word	0x00001f3f

08000f24 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	0018      	movs	r0, r3
 8000f30:	2310      	movs	r3, #16
 8000f32:	001a      	movs	r2, r3
 8000f34:	2100      	movs	r1, #0
 8000f36:	f002 fcc7 	bl	80038c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	2308      	movs	r3, #8
 8000f40:	001a      	movs	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	f002 fcc0 	bl	80038c8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f48:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc8 <MX_TIM15_Init+0xa4>)
 8000f4a:	4a20      	ldr	r2, [pc, #128]	@ (8000fcc <MX_TIM15_Init+0xa8>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8-1;
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <MX_TIM15_Init+0xa4>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <MX_TIM15_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <MX_TIM15_Init+0xa4>)
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd0 <MX_TIM15_Init+0xac>)
 8000f5e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <MX_TIM15_Init+0xa4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <MX_TIM15_Init+0xa4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <MX_TIM15_Init+0xa4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_TIM15_Init+0xa4>)
 8000f74:	0018      	movs	r0, r3
 8000f76:	f001 fa7d 	bl	8002474 <HAL_TIM_Base_Init>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 8000f7e:	f000 f945 	bl	800120c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f82:	2108      	movs	r1, #8
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2280      	movs	r2, #128	@ 0x80
 8000f88:	0152      	lsls	r2, r2, #5
 8000f8a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000f8c:	187a      	adds	r2, r7, r1
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_TIM15_Init+0xa4>)
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f001 fc3c 	bl	8002810 <HAL_TIM_ConfigClockSource>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000f9c:	f000 f936 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	003b      	movs	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000fac:	003a      	movs	r2, r7
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <MX_TIM15_Init+0xa4>)
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f001 fe3e 	bl	8002c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000fbc:	f000 f926 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000fc0:	46c0      	nop			@ (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b006      	add	sp, #24
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000e4 	.word	0x200000e4
 8000fcc:	40014000 	.word	0x40014000
 8000fd0:	00001387 	.word	0x00001387

08000fd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <MX_USART2_UART_Init+0x58>)
 8000fda:	4a15      	ldr	r2, [pc, #84]	@ (8001030 <MX_USART2_UART_Init+0x5c>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <MX_USART2_UART_Init+0x58>)
 8000fe0:	2296      	movs	r2, #150	@ 0x96
 8000fe2:	0192      	lsls	r2, r2, #6
 8000fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <MX_USART2_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_USART2_UART_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_USART2_UART_Init+0x58>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <MX_USART2_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_USART2_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001016:	4b05      	ldr	r3, [pc, #20]	@ (800102c <MX_USART2_UART_Init+0x58>)
 8001018:	0018      	movs	r0, r3
 800101a:	f001 fe73 	bl	8002d04 <HAL_UART_Init>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d001      	beq.n	8001026 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001022:	f000 f8f3 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000012c 	.word	0x2000012c
 8001030:	40004400 	.word	0x40004400

08001034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b08b      	sub	sp, #44	@ 0x2c
 8001038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	2414      	movs	r4, #20
 800103c:	193b      	adds	r3, r7, r4
 800103e:	0018      	movs	r0, r3
 8001040:	2314      	movs	r3, #20
 8001042:	001a      	movs	r2, r3
 8001044:	2100      	movs	r1, #0
 8001046:	f002 fc3f 	bl	80038c8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b6b      	ldr	r3, [pc, #428]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 800104c:	695a      	ldr	r2, [r3, #20]
 800104e:	4b6a      	ldr	r3, [pc, #424]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	0309      	lsls	r1, r1, #12
 8001054:	430a      	orrs	r2, r1
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	4b67      	ldr	r3, [pc, #412]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 800105a:	695a      	ldr	r2, [r3, #20]
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	031b      	lsls	r3, r3, #12
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001066:	4b64      	ldr	r3, [pc, #400]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	4b63      	ldr	r3, [pc, #396]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	03c9      	lsls	r1, r1, #15
 8001070:	430a      	orrs	r2, r1
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	4b60      	ldr	r3, [pc, #384]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	03db      	lsls	r3, r3, #15
 800107c:	4013      	ands	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	4b5c      	ldr	r3, [pc, #368]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	0289      	lsls	r1, r1, #10
 800108c:	430a      	orrs	r2, r1
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	4b59      	ldr	r3, [pc, #356]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	2380      	movs	r3, #128	@ 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b56      	ldr	r3, [pc, #344]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	4b55      	ldr	r3, [pc, #340]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 80010a4:	2180      	movs	r1, #128	@ 0x80
 80010a6:	02c9      	lsls	r1, r1, #11
 80010a8:	430a      	orrs	r2, r1
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	4b52      	ldr	r3, [pc, #328]	@ (80011f8 <MX_GPIO_Init+0x1c4>)
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	02db      	lsls	r3, r3, #11
 80010b4:	4013      	ands	r3, r2
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SER_Pin|LATCH_Pin|CLK_Pin, GPIO_PIN_RESET);
 80010ba:	23e0      	movs	r3, #224	@ 0xe0
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	484f      	ldr	r0, [pc, #316]	@ (80011fc <MX_GPIO_Init+0x1c8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	0019      	movs	r1, r3
 80010c4:	f000 fd5b 	bl	8001b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, GPIO_PIN_RESET);
 80010c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001200 <MX_GPIO_Init+0x1cc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	2101      	movs	r1, #1
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 fd55 	bl	8001b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_Pin|G_Pin|F_Pin, GPIO_PIN_RESET);
 80010d4:	23d0      	movs	r3, #208	@ 0xd0
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	484a      	ldr	r0, [pc, #296]	@ (8001204 <MX_GPIO_Init+0x1d0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	0019      	movs	r1, r3
 80010de:	f000 fd4e 	bl	8001b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E_Pin|D_Pin|C_Pin|B_Pin
 80010e2:	23f8      	movs	r3, #248	@ 0xf8
 80010e4:	0159      	lsls	r1, r3, #5
 80010e6:	2390      	movs	r3, #144	@ 0x90
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	2200      	movs	r2, #0
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 fd46 	bl	8001b7e <HAL_GPIO_WritePin>
                          |A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SER_Pin LATCH_Pin CLK_Pin */
  GPIO_InitStruct.Pin = SER_Pin|LATCH_Pin|CLK_Pin;
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	22e0      	movs	r2, #224	@ 0xe0
 80010f6:	0212      	lsls	r2, r2, #8
 80010f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	2201      	movs	r2, #1
 80010fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	193b      	adds	r3, r7, r4
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	193b      	adds	r3, r7, r4
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	193b      	adds	r3, r7, r4
 800110e:	4a3b      	ldr	r2, [pc, #236]	@ (80011fc <MX_GPIO_Init+0x1c8>)
 8001110:	0019      	movs	r1, r3
 8001112:	0010      	movs	r0, r2
 8001114:	f000 fba6 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : MR_Pin */
  GPIO_InitStruct.Pin = MR_Pin;
 8001118:	193b      	adds	r3, r7, r4
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	2201      	movs	r2, #1
 8001122:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	193b      	adds	r3, r7, r4
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MR_GPIO_Port, &GPIO_InitStruct);
 8001130:	193b      	adds	r3, r7, r4
 8001132:	4a33      	ldr	r2, [pc, #204]	@ (8001200 <MX_GPIO_Init+0x1cc>)
 8001134:	0019      	movs	r1, r3
 8001136:	0010      	movs	r0, r2
 8001138:	f000 fb94 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ext_BTN_Pin */
  GPIO_InitStruct.Pin = Ext_BTN_Pin;
 800113c:	193b      	adds	r3, r7, r4
 800113e:	2202      	movs	r2, #2
 8001140:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	2201      	movs	r2, #1
 800114c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Ext_BTN_GPIO_Port, &GPIO_InitStruct);
 800114e:	193b      	adds	r3, r7, r4
 8001150:	4a2b      	ldr	r2, [pc, #172]	@ (8001200 <MX_GPIO_Init+0x1cc>)
 8001152:	0019      	movs	r1, r3
 8001154:	0010      	movs	r0, r2
 8001156:	f000 fb85 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASK_IN_SIG_Pin */
  GPIO_InitStruct.Pin = ASK_IN_SIG_Pin;
 800115a:	193b      	adds	r3, r7, r4
 800115c:	2202      	movs	r2, #2
 800115e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001160:	193b      	adds	r3, r7, r4
 8001162:	2288      	movs	r2, #136	@ 0x88
 8001164:	0352      	lsls	r2, r2, #13
 8001166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	193b      	adds	r3, r7, r4
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASK_IN_SIG_GPIO_Port, &GPIO_InitStruct);
 800116e:	193a      	adds	r2, r7, r4
 8001170:	2390      	movs	r3, #144	@ 0x90
 8001172:	05db      	lsls	r3, r3, #23
 8001174:	0011      	movs	r1, r2
 8001176:	0018      	movs	r0, r3
 8001178:	f000 fb74 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ext_IO4_Pin Ext_IO3_Pin Ext_IO2_Pin Ext_IO1_Pin
                           Coin_Reader_Pin */
  GPIO_InitStruct.Pin = Ext_IO4_Pin|Ext_IO3_Pin|Ext_IO2_Pin|Ext_IO1_Pin
 800117c:	193b      	adds	r3, r7, r4
 800117e:	4a22      	ldr	r2, [pc, #136]	@ (8001208 <MX_GPIO_Init+0x1d4>)
 8001180:	601a      	str	r2, [r3, #0]
                          |Coin_Reader_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	193b      	adds	r3, r7, r4
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001188:	193b      	adds	r3, r7, r4
 800118a:	2201      	movs	r2, #1
 800118c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	193b      	adds	r3, r7, r4
 8001190:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <MX_GPIO_Init+0x1d0>)
 8001192:	0019      	movs	r1, r3
 8001194:	0010      	movs	r0, r2
 8001196:	f000 fb65 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin G_Pin F_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|G_Pin|F_Pin;
 800119a:	0021      	movs	r1, r4
 800119c:	187b      	adds	r3, r7, r1
 800119e:	22d0      	movs	r2, #208	@ 0xd0
 80011a0:	0212      	lsls	r2, r2, #8
 80011a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	000c      	movs	r4, r1
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	2201      	movs	r2, #1
 80011aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <MX_GPIO_Init+0x1d0>)
 80011bc:	0019      	movs	r1, r3
 80011be:	0010      	movs	r0, r2
 80011c0:	f000 fb50 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin D_Pin C_Pin B_Pin
                           A_Pin */
  GPIO_InitStruct.Pin = E_Pin|D_Pin|C_Pin|B_Pin
 80011c4:	0021      	movs	r1, r4
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	22f8      	movs	r2, #248	@ 0xf8
 80011ca:	0152      	lsls	r2, r2, #5
 80011cc:	601a      	str	r2, [r3, #0]
                          |A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2201      	movs	r2, #1
 80011d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	187a      	adds	r2, r7, r1
 80011e2:	2390      	movs	r3, #144	@ 0x90
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	0011      	movs	r1, r2
 80011e8:	0018      	movs	r0, r3
 80011ea:	f000 fb3b 	bl	8001864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b00b      	add	sp, #44	@ 0x2c
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000800 	.word	0x48000800
 8001200:	48001400 	.word	0x48001400
 8001204:	48000400 	.word	0x48000400
 8001208:	00002c06 	.word	0x00002c06

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	e7fd      	b.n	8001214 <Error_Handler+0x8>

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_MspInit+0x44>)
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_MspInit+0x44>)
 8001224:	2101      	movs	r1, #1
 8001226:	430a      	orrs	r2, r1
 8001228:	619a      	str	r2, [r3, #24]
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <HAL_MspInit+0x44>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	2201      	movs	r2, #1
 8001230:	4013      	ands	r3, r2
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <HAL_MspInit+0x44>)
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_MspInit+0x44>)
 800123c:	2180      	movs	r1, #128	@ 0x80
 800123e:	0549      	lsls	r1, r1, #21
 8001240:	430a      	orrs	r2, r1
 8001242:	61da      	str	r2, [r3, #28]
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <HAL_MspInit+0x44>)
 8001246:	69da      	ldr	r2, [r3, #28]
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	055b      	lsls	r3, r3, #21
 800124c:	4013      	ands	r3, r2
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a17      	ldr	r2, [pc, #92]	@ (80012cc <HAL_TIM_Base_MspInit+0x6c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10c      	bne.n	800128c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001272:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <HAL_TIM_Base_MspInit+0x70>)
 8001274:	69da      	ldr	r2, [r3, #28]
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <HAL_TIM_Base_MspInit+0x70>)
 8001278:	2102      	movs	r1, #2
 800127a:	430a      	orrs	r2, r1
 800127c:	61da      	str	r2, [r3, #28]
 800127e:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <HAL_TIM_Base_MspInit+0x70>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800128a:	e01a      	b.n	80012c2 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM15)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <HAL_TIM_Base_MspInit+0x74>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d115      	bne.n	80012c2 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <HAL_TIM_Base_MspInit+0x70>)
 8001298:	699a      	ldr	r2, [r3, #24]
 800129a:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <HAL_TIM_Base_MspInit+0x70>)
 800129c:	2180      	movs	r1, #128	@ 0x80
 800129e:	0249      	lsls	r1, r1, #9
 80012a0:	430a      	orrs	r2, r1
 80012a2:	619a      	str	r2, [r3, #24]
 80012a4:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_TIM_Base_MspInit+0x70>)
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	025b      	lsls	r3, r3, #9
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2014      	movs	r0, #20
 80012b8:	f000 faa2 	bl	8001800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80012bc:	2014      	movs	r0, #20
 80012be:	f000 fab4 	bl	800182a <HAL_NVIC_EnableIRQ>
}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b004      	add	sp, #16
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	40000400 	.word	0x40000400
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40014000 	.word	0x40014000

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b08b      	sub	sp, #44	@ 0x2c
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	2414      	movs	r4, #20
 80012e2:	193b      	adds	r3, r7, r4
 80012e4:	0018      	movs	r0, r3
 80012e6:	2314      	movs	r3, #20
 80012e8:	001a      	movs	r2, r3
 80012ea:	2100      	movs	r1, #0
 80012ec:	f002 faec 	bl	80038c8 <memset>
  if(huart->Instance==USART2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001368 <HAL_UART_MspInit+0x90>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d132      	bne.n	8001360 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <HAL_UART_MspInit+0x94>)
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <HAL_UART_MspInit+0x94>)
 8001300:	2180      	movs	r1, #128	@ 0x80
 8001302:	0289      	lsls	r1, r1, #10
 8001304:	430a      	orrs	r2, r1
 8001306:	61da      	str	r2, [r3, #28]
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <HAL_UART_MspInit+0x94>)
 800130a:	69da      	ldr	r2, [r3, #28]
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	029b      	lsls	r3, r3, #10
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_UART_MspInit+0x94>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <HAL_UART_MspInit+0x94>)
 800131c:	2180      	movs	r1, #128	@ 0x80
 800131e:	0289      	lsls	r1, r1, #10
 8001320:	430a      	orrs	r2, r1
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_UART_MspInit+0x94>)
 8001326:	695a      	ldr	r2, [r3, #20]
 8001328:	2380      	movs	r3, #128	@ 0x80
 800132a:	029b      	lsls	r3, r3, #10
 800132c:	4013      	ands	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001332:	0021      	movs	r1, r4
 8001334:	187b      	adds	r3, r7, r1
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	187b      	adds	r3, r7, r1
 800133c:	2202      	movs	r2, #2
 800133e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2203      	movs	r2, #3
 800134a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2201      	movs	r2, #1
 8001350:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	187a      	adds	r2, r7, r1
 8001354:	2390      	movs	r3, #144	@ 0x90
 8001356:	05db      	lsls	r3, r3, #23
 8001358:	0011      	movs	r1, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f000 fa82 	bl	8001864 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b00b      	add	sp, #44	@ 0x2c
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	40004400 	.word	0x40004400
 800136c:	40021000 	.word	0x40021000

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	46c0      	nop			@ (mov r8, r8)
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f946 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80013a8:	4b03      	ldr	r3, [pc, #12]	@ (80013b8 <TIM15_IRQHandler+0x14>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f001 f942 	bl	8002634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80013b0:	46c0      	nop			@ (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	200000e4 	.word	0x200000e4

080013bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  return 1;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_kill>:

int _kill(int pid, int sig)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013d2:	f002 facf 	bl	8003974 <__errno>
 80013d6:	0003      	movs	r3, r0
 80013d8:	2216      	movs	r2, #22
 80013da:	601a      	str	r2, [r3, #0]
  return -1;
 80013dc:	2301      	movs	r3, #1
 80013de:	425b      	negs	r3, r3
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_exit>:

void _exit (int status)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013f0:	2301      	movs	r3, #1
 80013f2:	425a      	negs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff ffe5 	bl	80013c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	e7fd      	b.n	80013fe <_exit+0x16>

08001402 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e00a      	b.n	800142a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001414:	e000      	b.n	8001418 <_read+0x16>
 8001416:	bf00      	nop
 8001418:	0001      	movs	r1, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	60ba      	str	r2, [r7, #8]
 8001420:	b2ca      	uxtb	r2, r1
 8001422:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	429a      	cmp	r2, r3
 8001430:	dbf0      	blt.n	8001414 <_read+0x12>
  }

  return len;
 8001432:	687b      	ldr	r3, [r7, #4]
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b006      	add	sp, #24
 800143a:	bd80      	pop	{r7, pc}

0800143c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e009      	b.n	8001462 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	60ba      	str	r2, [r7, #8]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	0018      	movs	r0, r3
 8001458:	e000      	b.n	800145c <_write+0x20>
 800145a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3301      	adds	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	429a      	cmp	r2, r3
 8001468:	dbf1      	blt.n	800144e <_write+0x12>
  }
  return len;
 800146a:	687b      	ldr	r3, [r7, #4]
}
 800146c:	0018      	movs	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	b006      	add	sp, #24
 8001472:	bd80      	pop	{r7, pc}

08001474 <_close>:

int _close(int file)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800147c:	2301      	movs	r3, #1
 800147e:	425b      	negs	r3, r3
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}

08001488 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2280      	movs	r2, #128	@ 0x80
 8001496:	0192      	lsls	r2, r2, #6
 8001498:	605a      	str	r2, [r3, #4]
  return 0;
 800149a:	2300      	movs	r3, #0
}
 800149c:	0018      	movs	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_isatty>:

int _isatty(int file)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ac:	2301      	movs	r3, #1
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b004      	add	sp, #16
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	@ (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	18d3      	adds	r3, r2, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f002 fa3a 	bl	8003974 <__errno>
 8001500:	0003      	movs	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	2301      	movs	r3, #1
 8001508:	425b      	negs	r3, r3
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	18d2      	adds	r2, r2, r3
 800151a:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <_sbrk+0x64>)
 800151c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b006      	add	sp, #24
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20002000 	.word	0x20002000
 800152c:	00000400 	.word	0x00000400
 8001530:	200001c0 	.word	0x200001c0
 8001534:	20000318 	.word	0x20000318

08001538 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800153c:	46c0      	nop			@ (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001544:	480d      	ldr	r0, [pc, #52]	@ (800157c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001546:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001548:	f7ff fff6 	bl	8001538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <LoopForever+0x6>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	@ (8001584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <LoopForever+0xe>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	@ (8001590 <LoopForever+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001572:	f002 fa05 	bl	8003980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001576:	f7ff fbc3 	bl	8000d00 <main>

0800157a <LoopForever>:

LoopForever:
    b LoopForever
 800157a:	e7fe      	b.n	800157a <LoopForever>
  ldr   r0, =_estack
 800157c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001588:	08004794 	.word	0x08004794
  ldr r2, =_sbss
 800158c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001590:	20000314 	.word	0x20000314

08001594 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC1_IRQHandler>
	...

08001598 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <HAL_Init+0x24>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_Init+0x24>)
 80015a2:	2110      	movs	r1, #16
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 f809 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ae:	f7ff fe33 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	40022000 	.word	0x40022000

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <HAL_InitTick+0x5c>)
 80015ca:	681c      	ldr	r4, [r3, #0]
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <HAL_InitTick+0x60>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	0019      	movs	r1, r3
 80015d2:	23fa      	movs	r3, #250	@ 0xfa
 80015d4:	0098      	lsls	r0, r3, #2
 80015d6:	f7fe fda1 	bl	800011c <__udivsi3>
 80015da:	0003      	movs	r3, r0
 80015dc:	0019      	movs	r1, r3
 80015de:	0020      	movs	r0, r4
 80015e0:	f7fe fd9c 	bl	800011c <__udivsi3>
 80015e4:	0003      	movs	r3, r0
 80015e6:	0018      	movs	r0, r3
 80015e8:	f000 f92f 	bl	800184a <HAL_SYSTICK_Config>
 80015ec:	1e03      	subs	r3, r0, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e00f      	b.n	8001614 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d80b      	bhi.n	8001612 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	2301      	movs	r3, #1
 80015fe:	425b      	negs	r3, r3
 8001600:	2200      	movs	r2, #0
 8001602:	0018      	movs	r0, r3
 8001604:	f000 f8fc 	bl	8001800 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_InitTick+0x64>)
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b003      	add	sp, #12
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	20000018 	.word	0x20000018
 8001620:	20000020 	.word	0x20000020
 8001624:	2000001c 	.word	0x2000001c

08001628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <HAL_IncTick+0x1c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	001a      	movs	r2, r3
 8001632:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <HAL_IncTick+0x20>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	18d2      	adds	r2, r2, r3
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <HAL_IncTick+0x20>)
 800163a:	601a      	str	r2, [r3, #0]
}
 800163c:	46c0      	nop			@ (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	20000020 	.word	0x20000020
 8001648:	200001c4 	.word	0x200001c4

0800164c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b02      	ldr	r3, [pc, #8]	@ (800165c <HAL_GetTick+0x10>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			@ (mov r8, r8)
 800165c:	200001c4 	.word	0x200001c4

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff fff0 	bl	800164c <HAL_GetTick>
 800166c:	0003      	movs	r3, r0
 800166e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3301      	adds	r3, #1
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	001a      	movs	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	189b      	adds	r3, r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	f7ff ffe0 	bl	800164c <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	46c0      	nop			@ (mov r8, r8)
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	46bd      	mov	sp, r7
 800169e:	b004      	add	sp, #16
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			@ (mov r8, r8)
 80016a4:	20000020 	.word	0x20000020

080016a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	0002      	movs	r2, r0
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	1dfb      	adds	r3, r7, #7
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80016ba:	d809      	bhi.n	80016d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016bc:	1dfb      	adds	r3, r7, #7
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	001a      	movs	r2, r3
 80016c2:	231f      	movs	r3, #31
 80016c4:	401a      	ands	r2, r3
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <__NVIC_EnableIRQ+0x30>)
 80016c8:	2101      	movs	r1, #1
 80016ca:	4091      	lsls	r1, r2
 80016cc:	000a      	movs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
  }
}
 80016d0:	46c0      	nop			@ (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	0002      	movs	r2, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80016f0:	d828      	bhi.n	8001744 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f2:	4a2f      	ldr	r2, [pc, #188]	@ (80017b0 <__NVIC_SetPriority+0xd4>)
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	33c0      	adds	r3, #192	@ 0xc0
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	589b      	ldr	r3, [r3, r2]
 8001702:	1dfa      	adds	r2, r7, #7
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	0011      	movs	r1, r2
 8001708:	2203      	movs	r2, #3
 800170a:	400a      	ands	r2, r1
 800170c:	00d2      	lsls	r2, r2, #3
 800170e:	21ff      	movs	r1, #255	@ 0xff
 8001710:	4091      	lsls	r1, r2
 8001712:	000a      	movs	r2, r1
 8001714:	43d2      	mvns	r2, r2
 8001716:	401a      	ands	r2, r3
 8001718:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	019b      	lsls	r3, r3, #6
 800171e:	22ff      	movs	r2, #255	@ 0xff
 8001720:	401a      	ands	r2, r3
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	0018      	movs	r0, r3
 8001728:	2303      	movs	r3, #3
 800172a:	4003      	ands	r3, r0
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001730:	481f      	ldr	r0, [pc, #124]	@ (80017b0 <__NVIC_SetPriority+0xd4>)
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b25b      	sxtb	r3, r3
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	430a      	orrs	r2, r1
 800173c:	33c0      	adds	r3, #192	@ 0xc0
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001742:	e031      	b.n	80017a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001744:	4a1b      	ldr	r2, [pc, #108]	@ (80017b4 <__NVIC_SetPriority+0xd8>)
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	0019      	movs	r1, r3
 800174c:	230f      	movs	r3, #15
 800174e:	400b      	ands	r3, r1
 8001750:	3b08      	subs	r3, #8
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	3306      	adds	r3, #6
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	18d3      	adds	r3, r2, r3
 800175a:	3304      	adds	r3, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	1dfa      	adds	r2, r7, #7
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	0011      	movs	r1, r2
 8001764:	2203      	movs	r2, #3
 8001766:	400a      	ands	r2, r1
 8001768:	00d2      	lsls	r2, r2, #3
 800176a:	21ff      	movs	r1, #255	@ 0xff
 800176c:	4091      	lsls	r1, r2
 800176e:	000a      	movs	r2, r1
 8001770:	43d2      	mvns	r2, r2
 8001772:	401a      	ands	r2, r3
 8001774:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	019b      	lsls	r3, r3, #6
 800177a:	22ff      	movs	r2, #255	@ 0xff
 800177c:	401a      	ands	r2, r3
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	0018      	movs	r0, r3
 8001784:	2303      	movs	r3, #3
 8001786:	4003      	ands	r3, r0
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800178c:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <__NVIC_SetPriority+0xd8>)
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	001c      	movs	r4, r3
 8001794:	230f      	movs	r3, #15
 8001796:	4023      	ands	r3, r4
 8001798:	3b08      	subs	r3, #8
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	430a      	orrs	r2, r1
 800179e:	3306      	adds	r3, #6
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	18c3      	adds	r3, r0, r3
 80017a4:	3304      	adds	r3, #4
 80017a6:	601a      	str	r2, [r3, #0]
}
 80017a8:	46c0      	nop			@ (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b003      	add	sp, #12
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	1e5a      	subs	r2, r3, #1
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	045b      	lsls	r3, r3, #17
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d301      	bcc.n	80017d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017cc:	2301      	movs	r3, #1
 80017ce:	e010      	b.n	80017f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <SysTick_Config+0x44>)
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	3a01      	subs	r2, #1
 80017d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d8:	2301      	movs	r3, #1
 80017da:	425b      	negs	r3, r3
 80017dc:	2103      	movs	r1, #3
 80017de:	0018      	movs	r0, r3
 80017e0:	f7ff ff7c 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e4:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <SysTick_Config+0x44>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ea:	4b04      	ldr	r3, [pc, #16]	@ (80017fc <SysTick_Config+0x44>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b002      	add	sp, #8
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	210f      	movs	r1, #15
 800180c:	187b      	adds	r3, r7, r1
 800180e:	1c02      	adds	r2, r0, #0
 8001810:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	187b      	adds	r3, r7, r1
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b25b      	sxtb	r3, r3
 800181a:	0011      	movs	r1, r2
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff ff5d 	bl	80016dc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	b004      	add	sp, #16
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	0002      	movs	r2, r0
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b25b      	sxtb	r3, r3
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff ff33 	bl	80016a8 <__NVIC_EnableIRQ>
}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff ffaf 	bl	80017b8 <SysTick_Config>
 800185a:	0003      	movs	r3, r0
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001872:	e14f      	b.n	8001b14 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4091      	lsls	r1, r2
 800187e:	000a      	movs	r2, r1
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d100      	bne.n	800188c <HAL_GPIO_Init+0x28>
 800188a:	e140      	b.n	8001b0e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2203      	movs	r2, #3
 8001892:	4013      	ands	r3, r2
 8001894:	2b01      	cmp	r3, #1
 8001896:	d005      	beq.n	80018a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2203      	movs	r2, #3
 800189e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d130      	bne.n	8001906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	409a      	lsls	r2, r3
 80018b2:	0013      	movs	r3, r2
 80018b4:	43da      	mvns	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	409a      	lsls	r2, r3
 80018c6:	0013      	movs	r3, r2
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018da:	2201      	movs	r2, #1
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
 80018e0:	0013      	movs	r3, r2
 80018e2:	43da      	mvns	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	2201      	movs	r2, #1
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
 80018f8:	0013      	movs	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2203      	movs	r2, #3
 800190c:	4013      	ands	r3, r2
 800190e:	2b03      	cmp	r3, #3
 8001910:	d017      	beq.n	8001942 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2203      	movs	r2, #3
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	43da      	mvns	r2, r3
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	409a      	lsls	r2, r3
 8001934:	0013      	movs	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2203      	movs	r2, #3
 8001948:	4013      	ands	r3, r2
 800194a:	2b02      	cmp	r3, #2
 800194c:	d123      	bne.n	8001996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	58d3      	ldr	r3, [r2, r3]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2207      	movs	r2, #7
 8001960:	4013      	ands	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	409a      	lsls	r2, r3
 8001968:	0013      	movs	r3, r2
 800196a:	43da      	mvns	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2107      	movs	r1, #7
 800197a:	400b      	ands	r3, r1
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	409a      	lsls	r2, r3
 8001980:	0013      	movs	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	6939      	ldr	r1, [r7, #16]
 8001994:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	43da      	mvns	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2203      	movs	r2, #3
 80019b4:	401a      	ands	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	23c0      	movs	r3, #192	@ 0xc0
 80019d0:	029b      	lsls	r3, r3, #10
 80019d2:	4013      	ands	r3, r2
 80019d4:	d100      	bne.n	80019d8 <HAL_GPIO_Init+0x174>
 80019d6:	e09a      	b.n	8001b0e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d8:	4b54      	ldr	r3, [pc, #336]	@ (8001b2c <HAL_GPIO_Init+0x2c8>)
 80019da:	699a      	ldr	r2, [r3, #24]
 80019dc:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <HAL_GPIO_Init+0x2c8>)
 80019de:	2101      	movs	r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	619a      	str	r2, [r3, #24]
 80019e4:	4b51      	ldr	r3, [pc, #324]	@ (8001b2c <HAL_GPIO_Init+0x2c8>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001b30 <HAL_GPIO_Init+0x2cc>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	589b      	ldr	r3, [r3, r2]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2203      	movs	r2, #3
 8001a02:	4013      	ands	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	0013      	movs	r3, r2
 8001a0c:	43da      	mvns	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	2390      	movs	r3, #144	@ 0x90
 8001a18:	05db      	lsls	r3, r3, #23
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x1e2>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a44      	ldr	r2, [pc, #272]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x1de>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a43      	ldr	r2, [pc, #268]	@ (8001b38 <HAL_GPIO_Init+0x2d4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x1da>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a42      	ldr	r2, [pc, #264]	@ (8001b3c <HAL_GPIO_Init+0x2d8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x1d6>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x1e4>
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x1e4>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x1e4>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x1e4>
 8001a46:	2300      	movs	r3, #0
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a58:	4935      	ldr	r1, [pc, #212]	@ (8001b30 <HAL_GPIO_Init+0x2cc>)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a66:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	035b      	lsls	r3, r3, #13
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a90:	4b2b      	ldr	r3, [pc, #172]	@ (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	2380      	movs	r3, #128	@ 0x80
 8001aa6:	039b      	lsls	r3, r3, #14
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ab4:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001aba:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	2380      	movs	r3, #128	@ 0x80
 8001ad0:	029b      	lsls	r3, r3, #10
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43da      	mvns	r2, r3
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	2380      	movs	r3, #128	@ 0x80
 8001afa:	025b      	lsls	r3, r3, #9
 8001afc:	4013      	ands	r3, r2
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b08:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	40da      	lsrs	r2, r3
 8001b1c:	1e13      	subs	r3, r2, #0
 8001b1e:	d000      	beq.n	8001b22 <HAL_GPIO_Init+0x2be>
 8001b20:	e6a8      	b.n	8001874 <HAL_GPIO_Init+0x10>
  } 
}
 8001b22:	46c0      	nop			@ (mov r8, r8)
 8001b24:	46c0      	nop			@ (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b006      	add	sp, #24
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48000800 	.word	0x48000800
 8001b3c:	48000c00 	.word	0x48000c00
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	1cbb      	adds	r3, r7, #2
 8001b50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	1cba      	adds	r2, r7, #2
 8001b58:	8812      	ldrh	r2, [r2, #0]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d004      	beq.n	8001b68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5e:	230f      	movs	r3, #15
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b68:	230f      	movs	r3, #15
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b70:	230f      	movs	r3, #15
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	781b      	ldrb	r3, [r3, #0]
  }
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	0008      	movs	r0, r1
 8001b88:	0011      	movs	r1, r2
 8001b8a:	1cbb      	adds	r3, r7, #2
 8001b8c:	1c02      	adds	r2, r0, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
 8001b90:	1c7b      	adds	r3, r7, #1
 8001b92:	1c0a      	adds	r2, r1, #0
 8001b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b96:	1c7b      	adds	r3, r7, #1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9e:	1cbb      	adds	r3, r7, #2
 8001ba0:	881a      	ldrh	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba8:	1cbb      	adds	r3, r7, #2
 8001baa:	881a      	ldrh	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e301      	b.n	80021ce <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d100      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x1e>
 8001bd4:	e08d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bd6:	4bc3      	ldr	r3, [pc, #780]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	220c      	movs	r2, #12
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d00e      	beq.n	8001c00 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be2:	4bc0      	ldr	r3, [pc, #768]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	220c      	movs	r2, #12
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d116      	bne.n	8001c1c <HAL_RCC_OscConfig+0x64>
 8001bee:	4bbd      	ldr	r3, [pc, #756]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	2380      	movs	r3, #128	@ 0x80
 8001bfa:	025b      	lsls	r3, r3, #9
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d10d      	bne.n	8001c1c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	4bb8      	ldr	r3, [pc, #736]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	029b      	lsls	r3, r3, #10
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d100      	bne.n	8001c0e <HAL_RCC_OscConfig+0x56>
 8001c0c:	e070      	b.n	8001cf0 <HAL_RCC_OscConfig+0x138>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d000      	beq.n	8001c18 <HAL_RCC_OscConfig+0x60>
 8001c16:	e06b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e2d8      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_OscConfig+0x7c>
 8001c24:	4baf      	ldr	r3, [pc, #700]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4bae      	ldr	r3, [pc, #696]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	2180      	movs	r1, #128	@ 0x80
 8001c2c:	0249      	lsls	r1, r1, #9
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e02f      	b.n	8001c94 <HAL_RCC_OscConfig+0xdc>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10c      	bne.n	8001c56 <HAL_RCC_OscConfig+0x9e>
 8001c3c:	4ba9      	ldr	r3, [pc, #676]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4ba8      	ldr	r3, [pc, #672]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c42:	49a9      	ldr	r1, [pc, #676]	@ (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	4ba6      	ldr	r3, [pc, #664]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4ba5      	ldr	r3, [pc, #660]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	49a7      	ldr	r1, [pc, #668]	@ (8001eec <HAL_RCC_OscConfig+0x334>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	e01e      	b.n	8001c94 <HAL_RCC_OscConfig+0xdc>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d10e      	bne.n	8001c7c <HAL_RCC_OscConfig+0xc4>
 8001c5e:	4ba1      	ldr	r3, [pc, #644]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4ba0      	ldr	r3, [pc, #640]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	2180      	movs	r1, #128	@ 0x80
 8001c66:	02c9      	lsls	r1, r1, #11
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b9c      	ldr	r3, [pc, #624]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c72:	2180      	movs	r1, #128	@ 0x80
 8001c74:	0249      	lsls	r1, r1, #9
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xdc>
 8001c7c:	4b99      	ldr	r3, [pc, #612]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b98      	ldr	r3, [pc, #608]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c82:	4999      	ldr	r1, [pc, #612]	@ (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c84:	400a      	ands	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	4b96      	ldr	r3, [pc, #600]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b95      	ldr	r3, [pc, #596]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c8e:	4997      	ldr	r1, [pc, #604]	@ (8001eec <HAL_RCC_OscConfig+0x334>)
 8001c90:	400a      	ands	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d014      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fcd6 	bl	800164c <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca6:	f7ff fcd1 	bl	800164c <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b64      	cmp	r3, #100	@ 0x64
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e28a      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb8:	4b8a      	ldr	r3, [pc, #552]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	029b      	lsls	r3, r3, #10
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0xee>
 8001cc4:	e015      	b.n	8001cf2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fcc1 	bl	800164c <HAL_GetTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fcbc 	bl	800164c <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	@ 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e275      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	4b80      	ldr	r3, [pc, #512]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	2380      	movs	r3, #128	@ 0x80
 8001ce8:	029b      	lsls	r3, r3, #10
 8001cea:	4013      	ands	r3, r2
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x118>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <HAL_RCC_OscConfig+0x146>
 8001cfc:	e069      	b.n	8001dd2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cfe:	4b79      	ldr	r3, [pc, #484]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	220c      	movs	r2, #12
 8001d04:	4013      	ands	r3, r2
 8001d06:	d00b      	beq.n	8001d20 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d08:	4b76      	ldr	r3, [pc, #472]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	220c      	movs	r2, #12
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d11c      	bne.n	8001d4e <HAL_RCC_OscConfig+0x196>
 8001d14:	4b73      	ldr	r3, [pc, #460]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	2380      	movs	r3, #128	@ 0x80
 8001d1a:	025b      	lsls	r3, r3, #9
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d116      	bne.n	8001d4e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d20:	4b70      	ldr	r3, [pc, #448]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2202      	movs	r2, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x17e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e24b      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	4b6b      	ldr	r3, [pc, #428]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	22f8      	movs	r2, #248	@ 0xf8
 8001d3c:	4393      	bics	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	00da      	lsls	r2, r3, #3
 8001d46:	4b67      	ldr	r3, [pc, #412]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4c:	e041      	b.n	8001dd2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d024      	beq.n	8001da0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d56:	4b63      	ldr	r3, [pc, #396]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b62      	ldr	r3, [pc, #392]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff fc73 	bl	800164c <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fc6e 	bl	800164c <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e227      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	4b59      	ldr	r3, [pc, #356]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0f1      	beq.n	8001d6c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d88:	4b56      	ldr	r3, [pc, #344]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	22f8      	movs	r2, #248	@ 0xf8
 8001d8e:	4393      	bics	r3, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	00da      	lsls	r2, r3, #3
 8001d98:	4b52      	ldr	r3, [pc, #328]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	e018      	b.n	8001dd2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da0:	4b50      	ldr	r3, [pc, #320]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001da6:	2101      	movs	r1, #1
 8001da8:	438a      	bics	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff fc4e 	bl	800164c <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db6:	f7ff fc49 	bl	800164c <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e202      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc8:	4b46      	ldr	r3, [pc, #280]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d1f1      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d036      	beq.n	8001e4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d019      	beq.n	8001e18 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001de6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001de8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001dea:	2101      	movs	r1, #1
 8001dec:	430a      	orrs	r2, r1
 8001dee:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7ff fc2c 	bl	800164c <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fc27 	bl	800164c <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e1e0      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	2202      	movs	r2, #2
 8001e12:	4013      	ands	r3, r2
 8001e14:	d0f1      	beq.n	8001dfa <HAL_RCC_OscConfig+0x242>
 8001e16:	e018      	b.n	8001e4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e18:	4b32      	ldr	r3, [pc, #200]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	438a      	bics	r2, r1
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fc12 	bl	800164c <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fc0d 	bl	800164c <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e1c6      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d1f1      	bne.n	8001e2e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2204      	movs	r2, #4
 8001e50:	4013      	ands	r3, r2
 8001e52:	d100      	bne.n	8001e56 <HAL_RCC_OscConfig+0x29e>
 8001e54:	e0b4      	b.n	8001fc0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	201f      	movs	r0, #31
 8001e58:	183b      	adds	r3, r7, r0
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	2380      	movs	r3, #128	@ 0x80
 8001e64:	055b      	lsls	r3, r3, #21
 8001e66:	4013      	ands	r3, r2
 8001e68:	d110      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	0549      	lsls	r1, r1, #21
 8001e74:	430a      	orrs	r2, r1
 8001e76:	61da      	str	r2, [r3, #28]
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	055b      	lsls	r3, r3, #21
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <HAL_RCC_OscConfig+0x338>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	@ 0x80
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d11a      	bne.n	8001ece <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e98:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <HAL_RCC_OscConfig+0x338>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <HAL_RCC_OscConfig+0x338>)
 8001e9e:	2180      	movs	r1, #128	@ 0x80
 8001ea0:	0049      	lsls	r1, r1, #1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fbd1 	bl	800164c <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb0:	f7ff fbcc 	bl	800164c <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	@ 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e185      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_RCC_OscConfig+0x338>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	@ 0x80
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x33c>
 8001ed6:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	4b02      	ldr	r3, [pc, #8]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	621a      	str	r2, [r3, #32]
 8001ee2:	e035      	b.n	8001f50 <HAL_RCC_OscConfig+0x398>
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	fffeffff 	.word	0xfffeffff
 8001eec:	fffbffff 	.word	0xfffbffff
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10c      	bne.n	8001f16 <HAL_RCC_OscConfig+0x35e>
 8001efc:	4bb6      	ldr	r3, [pc, #728]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001efe:	6a1a      	ldr	r2, [r3, #32]
 8001f00:	4bb5      	ldr	r3, [pc, #724]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f02:	2101      	movs	r1, #1
 8001f04:	438a      	bics	r2, r1
 8001f06:	621a      	str	r2, [r3, #32]
 8001f08:	4bb3      	ldr	r3, [pc, #716]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f0a:	6a1a      	ldr	r2, [r3, #32]
 8001f0c:	4bb2      	ldr	r3, [pc, #712]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f0e:	2104      	movs	r1, #4
 8001f10:	438a      	bics	r2, r1
 8001f12:	621a      	str	r2, [r3, #32]
 8001f14:	e01c      	b.n	8001f50 <HAL_RCC_OscConfig+0x398>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x380>
 8001f1e:	4bae      	ldr	r3, [pc, #696]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f20:	6a1a      	ldr	r2, [r3, #32]
 8001f22:	4bad      	ldr	r3, [pc, #692]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f24:	2104      	movs	r1, #4
 8001f26:	430a      	orrs	r2, r1
 8001f28:	621a      	str	r2, [r3, #32]
 8001f2a:	4bab      	ldr	r3, [pc, #684]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f2c:	6a1a      	ldr	r2, [r3, #32]
 8001f2e:	4baa      	ldr	r3, [pc, #680]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	430a      	orrs	r2, r1
 8001f34:	621a      	str	r2, [r3, #32]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0x398>
 8001f38:	4ba7      	ldr	r3, [pc, #668]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f3a:	6a1a      	ldr	r2, [r3, #32]
 8001f3c:	4ba6      	ldr	r3, [pc, #664]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f3e:	2101      	movs	r1, #1
 8001f40:	438a      	bics	r2, r1
 8001f42:	621a      	str	r2, [r3, #32]
 8001f44:	4ba4      	ldr	r3, [pc, #656]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f46:	6a1a      	ldr	r2, [r3, #32]
 8001f48:	4ba3      	ldr	r3, [pc, #652]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f4a:	2104      	movs	r1, #4
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d014      	beq.n	8001f82 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f58:	f7ff fb78 	bl	800164c <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	e009      	b.n	8001f76 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7ff fb73 	bl	800164c <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	4a9b      	ldr	r2, [pc, #620]	@ (80021dc <HAL_RCC_OscConfig+0x624>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e12b      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f76:	4b98      	ldr	r3, [pc, #608]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3aa>
 8001f80:	e013      	b.n	8001faa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7ff fb63 	bl	800164c <HAL_GetTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8a:	e009      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fb5e 	bl	800164c <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	4a91      	ldr	r2, [pc, #580]	@ (80021dc <HAL_RCC_OscConfig+0x624>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e116      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	4b8d      	ldr	r3, [pc, #564]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001faa:	231f      	movs	r3, #31
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b88      	ldr	r3, [pc, #544]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	4b87      	ldr	r3, [pc, #540]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001fba:	4989      	ldr	r1, [pc, #548]	@ (80021e0 <HAL_RCC_OscConfig+0x628>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d063      	beq.n	8002092 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d12a      	bne.n	8002028 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fd2:	4b81      	ldr	r3, [pc, #516]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001fd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fd6:	4b80      	ldr	r3, [pc, #512]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001fd8:	2104      	movs	r1, #4
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001fde:	4b7e      	ldr	r3, [pc, #504]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fb2f 	bl	800164c <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ff4:	f7ff fb2a 	bl	800164c <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e0e3      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002006:	4b74      	ldr	r3, [pc, #464]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200a:	2202      	movs	r2, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d0f1      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002010:	4b71      	ldr	r3, [pc, #452]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002014:	22f8      	movs	r2, #248	@ 0xf8
 8002016:	4393      	bics	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	00da      	lsls	r2, r3, #3
 8002020:	4b6d      	ldr	r3, [pc, #436]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002022:	430a      	orrs	r2, r1
 8002024:	635a      	str	r2, [r3, #52]	@ 0x34
 8002026:	e034      	b.n	8002092 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	3305      	adds	r3, #5
 800202e:	d111      	bne.n	8002054 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002030:	4b69      	ldr	r3, [pc, #420]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002034:	4b68      	ldr	r3, [pc, #416]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002036:	2104      	movs	r1, #4
 8002038:	438a      	bics	r2, r1
 800203a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800203c:	4b66      	ldr	r3, [pc, #408]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 800203e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002040:	22f8      	movs	r2, #248	@ 0xf8
 8002042:	4393      	bics	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	00da      	lsls	r2, r3, #3
 800204c:	4b62      	ldr	r3, [pc, #392]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 800204e:	430a      	orrs	r2, r1
 8002050:	635a      	str	r2, [r3, #52]	@ 0x34
 8002052:	e01e      	b.n	8002092 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002054:	4b60      	ldr	r3, [pc, #384]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002058:	4b5f      	ldr	r3, [pc, #380]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 800205a:	2104      	movs	r1, #4
 800205c:	430a      	orrs	r2, r1
 800205e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002060:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002064:	4b5c      	ldr	r3, [pc, #368]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002066:	2101      	movs	r1, #1
 8002068:	438a      	bics	r2, r1
 800206a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7ff faee 	bl	800164c <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002076:	f7ff fae9 	bl	800164c <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0a2      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002088:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 800208a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208c:	2202      	movs	r2, #2
 800208e:	4013      	ands	r3, r2
 8002090:	d1f1      	bne.n	8002076 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d100      	bne.n	800209c <HAL_RCC_OscConfig+0x4e4>
 800209a:	e097      	b.n	80021cc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800209c:	4b4e      	ldr	r3, [pc, #312]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	220c      	movs	r2, #12
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d100      	bne.n	80020aa <HAL_RCC_OscConfig+0x4f2>
 80020a8:	e06b      	b.n	8002182 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d14c      	bne.n	800214c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4b48      	ldr	r3, [pc, #288]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 80020b8:	494a      	ldr	r1, [pc, #296]	@ (80021e4 <HAL_RCC_OscConfig+0x62c>)
 80020ba:	400a      	ands	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7ff fac5 	bl	800164c <HAL_GetTick>
 80020c2:	0003      	movs	r3, r0
 80020c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff fac0 	bl	800164c <HAL_GetTick>
 80020cc:	0002      	movs	r2, r0
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e079      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	4b3f      	ldr	r3, [pc, #252]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	2380      	movs	r3, #128	@ 0x80
 80020e0:	049b      	lsls	r3, r3, #18
 80020e2:	4013      	ands	r3, r2
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e6:	4b3c      	ldr	r3, [pc, #240]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 80020e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ea:	220f      	movs	r2, #15
 80020ec:	4393      	bics	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020f4:	4b38      	ldr	r3, [pc, #224]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 80020f6:	430a      	orrs	r2, r1
 80020f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020fa:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a3a      	ldr	r2, [pc, #232]	@ (80021e8 <HAL_RCC_OscConfig+0x630>)
 8002100:	4013      	ands	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	431a      	orrs	r2, r3
 800210e:	4b32      	ldr	r3, [pc, #200]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002114:	4b30      	ldr	r3, [pc, #192]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b2f      	ldr	r3, [pc, #188]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 800211a:	2180      	movs	r1, #128	@ 0x80
 800211c:	0449      	lsls	r1, r1, #17
 800211e:	430a      	orrs	r2, r1
 8002120:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff fa93 	bl	800164c <HAL_GetTick>
 8002126:	0003      	movs	r3, r0
 8002128:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff fa8e 	bl	800164c <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e047      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800213e:	4b26      	ldr	r3, [pc, #152]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	049b      	lsls	r3, r3, #18
 8002146:	4013      	ands	r3, r2
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x574>
 800214a:	e03f      	b.n	80021cc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b22      	ldr	r3, [pc, #136]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b21      	ldr	r3, [pc, #132]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002152:	4924      	ldr	r1, [pc, #144]	@ (80021e4 <HAL_RCC_OscConfig+0x62c>)
 8002154:	400a      	ands	r2, r1
 8002156:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fa78 	bl	800164c <HAL_GetTick>
 800215c:	0003      	movs	r3, r0
 800215e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff fa73 	bl	800164c <HAL_GetTick>
 8002166:	0002      	movs	r2, r0
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e02c      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002174:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	049b      	lsls	r3, r3, #18
 800217c:	4013      	ands	r3, r2
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x5aa>
 8002180:	e024      	b.n	80021cc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e01f      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800218e:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002194:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	025b      	lsls	r3, r3, #9
 80021a0:	401a      	ands	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d10e      	bne.n	80021c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	220f      	movs	r2, #15
 80021ae:	401a      	ands	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	23f0      	movs	r3, #240	@ 0xf0
 80021bc:	039b      	lsls	r3, r3, #14
 80021be:	401a      	ands	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	0018      	movs	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b008      	add	sp, #32
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	40021000 	.word	0x40021000
 80021dc:	00001388 	.word	0x00001388
 80021e0:	efffffff 	.word	0xefffffff
 80021e4:	feffffff 	.word	0xfeffffff
 80021e8:	ffc2ffff 	.word	0xffc2ffff

080021ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0b3      	b.n	8002368 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b5b      	ldr	r3, [pc, #364]	@ (8002370 <HAL_RCC_ClockConfig+0x184>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2201      	movs	r2, #1
 8002206:	4013      	ands	r3, r2
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d911      	bls.n	8002232 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b58      	ldr	r3, [pc, #352]	@ (8002370 <HAL_RCC_ClockConfig+0x184>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2201      	movs	r2, #1
 8002214:	4393      	bics	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	4b55      	ldr	r3, [pc, #340]	@ (8002370 <HAL_RCC_ClockConfig+0x184>)
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002220:	4b53      	ldr	r3, [pc, #332]	@ (8002370 <HAL_RCC_ClockConfig+0x184>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2201      	movs	r2, #1
 8002226:	4013      	ands	r3, r2
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d001      	beq.n	8002232 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e09a      	b.n	8002368 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d015      	beq.n	8002268 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2204      	movs	r2, #4
 8002242:	4013      	ands	r3, r2
 8002244:	d006      	beq.n	8002254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002246:	4b4b      	ldr	r3, [pc, #300]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4b4a      	ldr	r3, [pc, #296]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 800224c:	21e0      	movs	r1, #224	@ 0xe0
 800224e:	00c9      	lsls	r1, r1, #3
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b47      	ldr	r3, [pc, #284]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	22f0      	movs	r2, #240	@ 0xf0
 800225a:	4393      	bics	r3, r2
 800225c:	0019      	movs	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	4b44      	ldr	r3, [pc, #272]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2201      	movs	r2, #1
 800226e:	4013      	ands	r3, r2
 8002270:	d040      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b3e      	ldr	r3, [pc, #248]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	@ 0x80
 8002280:	029b      	lsls	r3, r3, #10
 8002282:	4013      	ands	r3, r2
 8002284:	d114      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06e      	b.n	8002368 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	4b38      	ldr	r3, [pc, #224]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	@ 0x80
 8002298:	049b      	lsls	r3, r3, #18
 800229a:	4013      	ands	r3, r2
 800229c:	d108      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e062      	b.n	8002368 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	4b34      	ldr	r3, [pc, #208]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e05b      	b.n	8002368 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b0:	4b30      	ldr	r3, [pc, #192]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2203      	movs	r2, #3
 80022b6:	4393      	bics	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c4:	f7ff f9c2 	bl	800164c <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022cc:	e009      	b.n	80022e2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ce:	f7ff f9bd 	bl	800164c <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	4a27      	ldr	r2, [pc, #156]	@ (8002378 <HAL_RCC_ClockConfig+0x18c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e042      	b.n	8002368 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	220c      	movs	r2, #12
 80022e8:	401a      	ands	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1ec      	bne.n	80022ce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <HAL_RCC_ClockConfig+0x184>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2201      	movs	r2, #1
 80022fa:	4013      	ands	r3, r2
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d211      	bcs.n	8002326 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <HAL_RCC_ClockConfig+0x184>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	4393      	bics	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <HAL_RCC_ClockConfig+0x184>)
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002314:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <HAL_RCC_ClockConfig+0x184>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2201      	movs	r2, #1
 800231a:	4013      	ands	r3, r2
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e020      	b.n	8002368 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2204      	movs	r2, #4
 800232c:	4013      	ands	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002330:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a11      	ldr	r2, [pc, #68]	@ (800237c <HAL_RCC_ClockConfig+0x190>)
 8002336:	4013      	ands	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 8002340:	430a      	orrs	r2, r1
 8002342:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002344:	f000 f820 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 8002348:	0001      	movs	r1, r0
 800234a:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <HAL_RCC_ClockConfig+0x188>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	220f      	movs	r2, #15
 8002352:	4013      	ands	r3, r2
 8002354:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <HAL_RCC_ClockConfig+0x194>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	000a      	movs	r2, r1
 800235a:	40da      	lsrs	r2, r3
 800235c:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <HAL_RCC_ClockConfig+0x198>)
 800235e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002360:	2003      	movs	r0, #3
 8002362:	f7ff f92d 	bl	80015c0 <HAL_InitTick>
  
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b004      	add	sp, #16
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40022000 	.word	0x40022000
 8002374:	40021000 	.word	0x40021000
 8002378:	00001388 	.word	0x00001388
 800237c:	fffff8ff 	.word	0xfffff8ff
 8002380:	08004674 	.word	0x08004674
 8002384:	20000018 	.word	0x20000018

08002388 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80023a2:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	220c      	movs	r2, #12
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d002      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x30>
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d003      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0x36>
 80023b6:	e02c      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023ba:	613b      	str	r3, [r7, #16]
      break;
 80023bc:	e02c      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0c9b      	lsrs	r3, r3, #18
 80023c2:	220f      	movs	r2, #15
 80023c4:	4013      	ands	r3, r2
 80023c6:	4a19      	ldr	r2, [pc, #100]	@ (800242c <HAL_RCC_GetSysClockFreq+0xa4>)
 80023c8:	5cd3      	ldrb	r3, [r2, r3]
 80023ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023cc:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	220f      	movs	r2, #15
 80023d2:	4013      	ands	r3, r2
 80023d4:	4a16      	ldr	r2, [pc, #88]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xa8>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	025b      	lsls	r3, r3, #9
 80023e0:	4013      	ands	r3, r2
 80023e2:	d009      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	4810      	ldr	r0, [pc, #64]	@ (8002428 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023e8:	f7fd fe98 	bl	800011c <__udivsi3>
 80023ec:	0003      	movs	r3, r0
 80023ee:	001a      	movs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4353      	muls	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e009      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	000a      	movs	r2, r1
 80023fc:	0152      	lsls	r2, r2, #5
 80023fe:	1a52      	subs	r2, r2, r1
 8002400:	0193      	lsls	r3, r2, #6
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	185b      	adds	r3, r3, r1
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	613b      	str	r3, [r7, #16]
      break;
 8002410:	e002      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002412:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002414:	613b      	str	r3, [r7, #16]
      break;
 8002416:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002418:	693b      	ldr	r3, [r7, #16]
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b006      	add	sp, #24
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	40021000 	.word	0x40021000
 8002428:	007a1200 	.word	0x007a1200
 800242c:	0800468c 	.word	0x0800468c
 8002430:	0800469c 	.word	0x0800469c

08002434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002438:	4b02      	ldr	r3, [pc, #8]	@ (8002444 <HAL_RCC_GetHCLKFreq+0x10>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	20000018 	.word	0x20000018

08002448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800244c:	f7ff fff2 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002450:	0001      	movs	r1, r0
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	2207      	movs	r2, #7
 800245a:	4013      	ands	r3, r2
 800245c:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	40d9      	lsrs	r1, r3
 8002462:	000b      	movs	r3, r1
}    
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	40021000 	.word	0x40021000
 8002470:	08004684 	.word	0x08004684

08002474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e042      	b.n	800250c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	223d      	movs	r2, #61	@ 0x3d
 800248a:	5c9b      	ldrb	r3, [r3, r2]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d107      	bne.n	80024a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	223c      	movs	r2, #60	@ 0x3c
 8002496:	2100      	movs	r1, #0
 8002498:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0018      	movs	r0, r3
 800249e:	f7fe fedf 	bl	8001260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	223d      	movs	r2, #61	@ 0x3d
 80024a6:	2102      	movs	r1, #2
 80024a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	0019      	movs	r1, r3
 80024b4:	0010      	movs	r0, r2
 80024b6:	f000 fa9f 	bl	80029f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2246      	movs	r2, #70	@ 0x46
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	223e      	movs	r2, #62	@ 0x3e
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	223f      	movs	r2, #63	@ 0x3f
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2240      	movs	r2, #64	@ 0x40
 80024d6:	2101      	movs	r1, #1
 80024d8:	5499      	strb	r1, [r3, r2]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2241      	movs	r2, #65	@ 0x41
 80024de:	2101      	movs	r1, #1
 80024e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2242      	movs	r2, #66	@ 0x42
 80024e6:	2101      	movs	r1, #1
 80024e8:	5499      	strb	r1, [r3, r2]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2243      	movs	r2, #67	@ 0x43
 80024ee:	2101      	movs	r1, #1
 80024f0:	5499      	strb	r1, [r3, r2]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2244      	movs	r2, #68	@ 0x44
 80024f6:	2101      	movs	r1, #1
 80024f8:	5499      	strb	r1, [r3, r2]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2245      	movs	r2, #69	@ 0x45
 80024fe:	2101      	movs	r1, #1
 8002500:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	223d      	movs	r2, #61	@ 0x3d
 8002506:	2101      	movs	r1, #1
 8002508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	223d      	movs	r2, #61	@ 0x3d
 8002520:	5c9b      	ldrb	r3, [r3, r2]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d001      	beq.n	800252c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e02d      	b.n	8002588 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	223d      	movs	r2, #61	@ 0x3d
 8002530:	2102      	movs	r1, #2
 8002532:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a15      	ldr	r2, [pc, #84]	@ (8002590 <HAL_TIM_Base_Start+0x7c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d009      	beq.n	8002552 <HAL_TIM_Base_Start+0x3e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a14      	ldr	r2, [pc, #80]	@ (8002594 <HAL_TIM_Base_Start+0x80>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d004      	beq.n	8002552 <HAL_TIM_Base_Start+0x3e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a12      	ldr	r2, [pc, #72]	@ (8002598 <HAL_TIM_Base_Start+0x84>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d111      	bne.n	8002576 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2207      	movs	r2, #7
 800255a:	4013      	ands	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b06      	cmp	r3, #6
 8002562:	d010      	beq.n	8002586 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2101      	movs	r1, #1
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002574:	e007      	b.n	8002586 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b004      	add	sp, #16
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40000400 	.word	0x40000400
 8002598:	40014000 	.word	0x40014000

0800259c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	223d      	movs	r2, #61	@ 0x3d
 80025a8:	5c9b      	ldrb	r3, [r3, r2]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d001      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e035      	b.n	8002620 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	223d      	movs	r2, #61	@ 0x3d
 80025b8:	2102      	movs	r1, #2
 80025ba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2101      	movs	r1, #1
 80025c8:	430a      	orrs	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a15      	ldr	r2, [pc, #84]	@ (8002628 <HAL_TIM_Base_Start_IT+0x8c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_TIM_Base_Start_IT+0x4e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a14      	ldr	r2, [pc, #80]	@ (800262c <HAL_TIM_Base_Start_IT+0x90>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d004      	beq.n	80025ea <HAL_TIM_Base_Start_IT+0x4e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a12      	ldr	r2, [pc, #72]	@ (8002630 <HAL_TIM_Base_Start_IT+0x94>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d111      	bne.n	800260e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2207      	movs	r2, #7
 80025f2:	4013      	ands	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d010      	beq.n	800261e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2101      	movs	r1, #1
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260c:	e007      	b.n	800261e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40000400 	.word	0x40000400
 8002630:	40014000 	.word	0x40014000

08002634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d021      	beq.n	8002698 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2202      	movs	r2, #2
 8002658:	4013      	ands	r3, r2
 800265a:	d01d      	beq.n	8002698 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2203      	movs	r2, #3
 8002662:	4252      	negs	r2, r2
 8002664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2203      	movs	r2, #3
 8002674:	4013      	ands	r3, r2
 8002676:	d004      	beq.n	8002682 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 f9a4 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 8002680:	e007      	b.n	8002692 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	0018      	movs	r0, r3
 8002686:	f000 f997 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f9a3 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2204      	movs	r2, #4
 800269c:	4013      	ands	r3, r2
 800269e:	d022      	beq.n	80026e6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2204      	movs	r2, #4
 80026a4:	4013      	ands	r3, r2
 80026a6:	d01e      	beq.n	80026e6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2205      	movs	r2, #5
 80026ae:	4252      	negs	r2, r2
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	23c0      	movs	r3, #192	@ 0xc0
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4013      	ands	r3, r2
 80026c4:	d004      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 f97d 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 80026ce:	e007      	b.n	80026e0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 f970 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 f97c 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2208      	movs	r2, #8
 80026ea:	4013      	ands	r3, r2
 80026ec:	d021      	beq.n	8002732 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2208      	movs	r2, #8
 80026f2:	4013      	ands	r3, r2
 80026f4:	d01d      	beq.n	8002732 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2209      	movs	r2, #9
 80026fc:	4252      	negs	r2, r2
 80026fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	2203      	movs	r2, #3
 800270e:	4013      	ands	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0018      	movs	r0, r3
 8002716:	f000 f957 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 800271a:	e007      	b.n	800272c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f94a 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	0018      	movs	r0, r3
 8002728:	f000 f956 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2210      	movs	r2, #16
 8002736:	4013      	ands	r3, r2
 8002738:	d022      	beq.n	8002780 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2210      	movs	r2, #16
 800273e:	4013      	ands	r3, r2
 8002740:	d01e      	beq.n	8002780 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2211      	movs	r2, #17
 8002748:	4252      	negs	r2, r2
 800274a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2208      	movs	r2, #8
 8002750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	23c0      	movs	r3, #192	@ 0xc0
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4013      	ands	r3, r2
 800275e:	d004      	beq.n	800276a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0018      	movs	r0, r3
 8002764:	f000 f930 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 8002768:	e007      	b.n	800277a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0018      	movs	r0, r3
 800276e:	f000 f923 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	0018      	movs	r0, r3
 8002776:	f000 f92f 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2201      	movs	r2, #1
 8002784:	4013      	ands	r3, r2
 8002786:	d00c      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	4013      	ands	r3, r2
 800278e:	d008      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2202      	movs	r2, #2
 8002796:	4252      	negs	r2, r2
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f7fd ff1b 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2280      	movs	r2, #128	@ 0x80
 80027a6:	4013      	ands	r3, r2
 80027a8:	d00c      	beq.n	80027c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2280      	movs	r2, #128	@ 0x80
 80027ae:	4013      	ands	r3, r2
 80027b0:	d008      	beq.n	80027c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2281      	movs	r2, #129	@ 0x81
 80027b8:	4252      	negs	r2, r2
 80027ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	0018      	movs	r0, r3
 80027c0:	f000 fa98 	bl	8002cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2240      	movs	r2, #64	@ 0x40
 80027c8:	4013      	ands	r3, r2
 80027ca:	d00c      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2240      	movs	r2, #64	@ 0x40
 80027d0:	4013      	ands	r3, r2
 80027d2:	d008      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2241      	movs	r2, #65	@ 0x41
 80027da:	4252      	negs	r2, r2
 80027dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 f901 	bl	80029e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2220      	movs	r2, #32
 80027ea:	4013      	ands	r3, r2
 80027ec:	d00c      	beq.n	8002808 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	4013      	ands	r3, r2
 80027f4:	d008      	beq.n	8002808 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2221      	movs	r2, #33	@ 0x21
 80027fc:	4252      	negs	r2, r2
 80027fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	0018      	movs	r0, r3
 8002804:	f000 fa6e 	bl	8002ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002808:	46c0      	nop			@ (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b004      	add	sp, #16
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	230f      	movs	r3, #15
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	223c      	movs	r2, #60	@ 0x3c
 8002826:	5c9b      	ldrb	r3, [r3, r2]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_TIM_ConfigClockSource+0x20>
 800282c:	2302      	movs	r3, #2
 800282e:	e0bc      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x19a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	223c      	movs	r2, #60	@ 0x3c
 8002834:	2101      	movs	r1, #1
 8002836:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	223d      	movs	r2, #61	@ 0x3d
 800283c:	2102      	movs	r1, #2
 800283e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2277      	movs	r2, #119	@ 0x77
 800284c:	4393      	bics	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4a58      	ldr	r2, [pc, #352]	@ (80029b4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002854:	4013      	ands	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2280      	movs	r2, #128	@ 0x80
 8002866:	0192      	lsls	r2, r2, #6
 8002868:	4293      	cmp	r3, r2
 800286a:	d040      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0xde>
 800286c:	2280      	movs	r2, #128	@ 0x80
 800286e:	0192      	lsls	r2, r2, #6
 8002870:	4293      	cmp	r3, r2
 8002872:	d900      	bls.n	8002876 <HAL_TIM_ConfigClockSource+0x66>
 8002874:	e088      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x178>
 8002876:	2280      	movs	r2, #128	@ 0x80
 8002878:	0152      	lsls	r2, r2, #5
 800287a:	4293      	cmp	r3, r2
 800287c:	d100      	bne.n	8002880 <HAL_TIM_ConfigClockSource+0x70>
 800287e:	e088      	b.n	8002992 <HAL_TIM_ConfigClockSource+0x182>
 8002880:	2280      	movs	r2, #128	@ 0x80
 8002882:	0152      	lsls	r2, r2, #5
 8002884:	4293      	cmp	r3, r2
 8002886:	d900      	bls.n	800288a <HAL_TIM_ConfigClockSource+0x7a>
 8002888:	e07e      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x178>
 800288a:	2b70      	cmp	r3, #112	@ 0x70
 800288c:	d018      	beq.n	80028c0 <HAL_TIM_ConfigClockSource+0xb0>
 800288e:	d900      	bls.n	8002892 <HAL_TIM_ConfigClockSource+0x82>
 8002890:	e07a      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x178>
 8002892:	2b60      	cmp	r3, #96	@ 0x60
 8002894:	d04f      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x126>
 8002896:	d900      	bls.n	800289a <HAL_TIM_ConfigClockSource+0x8a>
 8002898:	e076      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x178>
 800289a:	2b50      	cmp	r3, #80	@ 0x50
 800289c:	d03b      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x106>
 800289e:	d900      	bls.n	80028a2 <HAL_TIM_ConfigClockSource+0x92>
 80028a0:	e072      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x178>
 80028a2:	2b40      	cmp	r3, #64	@ 0x40
 80028a4:	d057      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x146>
 80028a6:	d900      	bls.n	80028aa <HAL_TIM_ConfigClockSource+0x9a>
 80028a8:	e06e      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x178>
 80028aa:	2b30      	cmp	r3, #48	@ 0x30
 80028ac:	d063      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x166>
 80028ae:	d86b      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x178>
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d060      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x166>
 80028b4:	d868      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x178>
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d05d      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x166>
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d05b      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x166>
 80028be:	e063      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028d0:	f000 f990 	bl	8002bf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2277      	movs	r2, #119	@ 0x77
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	609a      	str	r2, [r3, #8]
      break;
 80028ec:	e052      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028fe:	f000 f979 	bl	8002bf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2180      	movs	r1, #128	@ 0x80
 800290e:	01c9      	lsls	r1, r1, #7
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
      break;
 8002914:	e03e      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002922:	001a      	movs	r2, r3
 8002924:	f000 f8ec 	bl	8002b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2150      	movs	r1, #80	@ 0x50
 800292e:	0018      	movs	r0, r3
 8002930:	f000 f946 	bl	8002bc0 <TIM_ITRx_SetConfig>
      break;
 8002934:	e02e      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002942:	001a      	movs	r2, r3
 8002944:	f000 f90a 	bl	8002b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2160      	movs	r1, #96	@ 0x60
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f936 	bl	8002bc0 <TIM_ITRx_SetConfig>
      break;
 8002954:	e01e      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002962:	001a      	movs	r2, r3
 8002964:	f000 f8cc 	bl	8002b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2140      	movs	r1, #64	@ 0x40
 800296e:	0018      	movs	r0, r3
 8002970:	f000 f926 	bl	8002bc0 <TIM_ITRx_SetConfig>
      break;
 8002974:	e00e      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0019      	movs	r1, r3
 8002980:	0010      	movs	r0, r2
 8002982:	f000 f91d 	bl	8002bc0 <TIM_ITRx_SetConfig>
      break;
 8002986:	e005      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002988:	230f      	movs	r3, #15
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
      break;
 8002990:	e000      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002992:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	223d      	movs	r2, #61	@ 0x3d
 8002998:	2101      	movs	r1, #1
 800299a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	223c      	movs	r2, #60	@ 0x3c
 80029a0:	2100      	movs	r1, #0
 80029a2:	5499      	strb	r1, [r3, r2]

  return status;
 80029a4:	230f      	movs	r3, #15
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	781b      	ldrb	r3, [r3, #0]
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b004      	add	sp, #16
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			@ (mov r8, r8)
 80029b4:	ffff00ff 	.word	0xffff00ff

080029b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d0:	46c0      	nop			@ (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b002      	add	sp, #8
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f0:	46c0      	nop			@ (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a36      	ldr	r2, [pc, #216]	@ (8002ae4 <TIM_Base_SetConfig+0xec>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_Base_SetConfig+0x20>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a35      	ldr	r2, [pc, #212]	@ (8002ae8 <TIM_Base_SetConfig+0xf0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d108      	bne.n	8002a2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2270      	movs	r2, #112	@ 0x70
 8002a1c:	4393      	bics	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae4 <TIM_Base_SetConfig+0xec>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <TIM_Base_SetConfig+0x62>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae8 <TIM_Base_SetConfig+0xf0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00f      	beq.n	8002a5a <TIM_Base_SetConfig+0x62>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002aec <TIM_Base_SetConfig+0xf4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00b      	beq.n	8002a5a <TIM_Base_SetConfig+0x62>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a2a      	ldr	r2, [pc, #168]	@ (8002af0 <TIM_Base_SetConfig+0xf8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <TIM_Base_SetConfig+0x62>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a29      	ldr	r2, [pc, #164]	@ (8002af4 <TIM_Base_SetConfig+0xfc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d003      	beq.n	8002a5a <TIM_Base_SetConfig+0x62>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a28      	ldr	r2, [pc, #160]	@ (8002af8 <TIM_Base_SetConfig+0x100>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d108      	bne.n	8002a6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4a27      	ldr	r2, [pc, #156]	@ (8002afc <TIM_Base_SetConfig+0x104>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2280      	movs	r2, #128	@ 0x80
 8002a70:	4393      	bics	r3, r2
 8002a72:	001a      	movs	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a13      	ldr	r2, [pc, #76]	@ (8002ae4 <TIM_Base_SetConfig+0xec>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00b      	beq.n	8002ab2 <TIM_Base_SetConfig+0xba>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a14      	ldr	r2, [pc, #80]	@ (8002af0 <TIM_Base_SetConfig+0xf8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <TIM_Base_SetConfig+0xba>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a13      	ldr	r2, [pc, #76]	@ (8002af4 <TIM_Base_SetConfig+0xfc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d003      	beq.n	8002ab2 <TIM_Base_SetConfig+0xba>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a12      	ldr	r2, [pc, #72]	@ (8002af8 <TIM_Base_SetConfig+0x100>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d103      	bne.n	8002aba <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d106      	bne.n	8002ada <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4393      	bics	r3, r2
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	611a      	str	r2, [r3, #16]
  }
}
 8002ada:	46c0      	nop			@ (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b004      	add	sp, #16
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40002000 	.word	0x40002000
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40014400 	.word	0x40014400
 8002af8:	40014800 	.word	0x40014800
 8002afc:	fffffcff 	.word	0xfffffcff

08002b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	2201      	movs	r2, #1
 8002b18:	4393      	bics	r3, r2
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	22f0      	movs	r2, #240	@ 0xf0
 8002b2a:	4393      	bics	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	220a      	movs	r2, #10
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	621a      	str	r2, [r3, #32]
}
 8002b54:	46c0      	nop			@ (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b006      	add	sp, #24
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	2210      	movs	r2, #16
 8002b74:	4393      	bics	r3, r2
 8002b76:	001a      	movs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	@ (8002bbc <TIM_TI2_ConfigInputStage+0x60>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	031b      	lsls	r3, r3, #12
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	22a0      	movs	r2, #160	@ 0xa0
 8002b98:	4393      	bics	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	621a      	str	r2, [r3, #32]
}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b006      	add	sp, #24
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	ffff0fff 	.word	0xffff0fff

08002bc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2270      	movs	r2, #112	@ 0x70
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	2207      	movs	r2, #7
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	609a      	str	r2, [r3, #8]
}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	4a09      	ldr	r2, [pc, #36]	@ (8002c30 <TIM_ETR_SetConfig+0x3c>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	021a      	lsls	r2, r3, #8
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	609a      	str	r2, [r3, #8]
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b006      	add	sp, #24
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	ffff00ff 	.word	0xffff00ff

08002c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	223c      	movs	r2, #60	@ 0x3c
 8002c42:	5c9b      	ldrb	r3, [r3, r2]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e041      	b.n	8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	223c      	movs	r2, #60	@ 0x3c
 8002c50:	2101      	movs	r1, #1
 8002c52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	223d      	movs	r2, #61	@ 0x3d
 8002c58:	2102      	movs	r1, #2
 8002c5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2270      	movs	r2, #112	@ 0x70
 8002c70:	4393      	bics	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a13      	ldr	r2, [pc, #76]	@ (8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a11      	ldr	r2, [pc, #68]	@ (8002cdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a10      	ldr	r2, [pc, #64]	@ (8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10c      	bne.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2280      	movs	r2, #128	@ 0x80
 8002ca8:	4393      	bics	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	223d      	movs	r2, #61	@ 0x3d
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	223c      	movs	r2, #60	@ 0x3c
 8002cca:	2100      	movs	r1, #0
 8002ccc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b004      	add	sp, #16
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40014000 	.word	0x40014000

08002ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cec:	46c0      	nop			@ (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cfc:	46c0      	nop			@ (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b002      	add	sp, #8
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e044      	b.n	8002da0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2278      	movs	r2, #120	@ 0x78
 8002d22:	2100      	movs	r1, #0
 8002d24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7fe fad5 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2224      	movs	r2, #36	@ 0x24
 8002d32:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2101      	movs	r1, #1
 8002d40:	438a      	bics	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 fa0c 	bl	800316c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	0018      	movs	r0, r3
 8002d58:	f000 f8c8 	bl	8002eec <UART_SetConfig>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e01c      	b.n	8002da0 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	490d      	ldr	r1, [pc, #52]	@ (8002da8 <HAL_UART_Init+0xa4>)
 8002d72:	400a      	ands	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2108      	movs	r1, #8
 8002d82:	438a      	bics	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2101      	movs	r1, #1
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 fa9b 	bl	80032d4 <UART_CheckIdleState>
 8002d9e:	0003      	movs	r3, r0
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b002      	add	sp, #8
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	fffff7ff 	.word	0xfffff7ff

08002dac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	@ 0x28
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	1dbb      	adds	r3, r7, #6
 8002dba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d000      	beq.n	8002dc6 <HAL_UART_Transmit+0x1a>
 8002dc4:	e08c      	b.n	8002ee0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_UART_Transmit+0x28>
 8002dcc:	1dbb      	adds	r3, r7, #6
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e084      	b.n	8002ee2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	2380      	movs	r3, #128	@ 0x80
 8002dde:	015b      	lsls	r3, r3, #5
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d109      	bne.n	8002df8 <HAL_UART_Transmit+0x4c>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2201      	movs	r2, #1
 8002df0:	4013      	ands	r3, r2
 8002df2:	d001      	beq.n	8002df8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e074      	b.n	8002ee2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2284      	movs	r2, #132	@ 0x84
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2221      	movs	r2, #33	@ 0x21
 8002e04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e06:	f7fe fc21 	bl	800164c <HAL_GetTick>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1dba      	adds	r2, r7, #6
 8002e12:	2150      	movs	r1, #80	@ 0x50
 8002e14:	8812      	ldrh	r2, [r2, #0]
 8002e16:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1dba      	adds	r2, r7, #6
 8002e1c:	2152      	movs	r1, #82	@ 0x52
 8002e1e:	8812      	ldrh	r2, [r2, #0]
 8002e20:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	015b      	lsls	r3, r3, #5
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d108      	bne.n	8002e40 <HAL_UART_Transmit+0x94>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d104      	bne.n	8002e40 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e003      	b.n	8002e48 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e48:	e02f      	b.n	8002eaa <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	0013      	movs	r3, r2
 8002e54:	2200      	movs	r2, #0
 8002e56:	2180      	movs	r1, #128	@ 0x80
 8002e58:	f000 fae4 	bl	8003424 <UART_WaitOnFlagUntilTimeout>
 8002e5c:	1e03      	subs	r3, r0, #0
 8002e5e:	d004      	beq.n	8002e6a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e03b      	b.n	8002ee2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10b      	bne.n	8002e88 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	881a      	ldrh	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	05d2      	lsls	r2, r2, #23
 8002e7a:	0dd2      	lsrs	r2, r2, #23
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	3302      	adds	r3, #2
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e007      	b.n	8002e98 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3301      	adds	r3, #1
 8002e96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2252      	movs	r2, #82	@ 0x52
 8002e9c:	5a9b      	ldrh	r3, [r3, r2]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b299      	uxth	r1, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2252      	movs	r2, #82	@ 0x52
 8002ea8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2252      	movs	r2, #82	@ 0x52
 8002eae:	5a9b      	ldrh	r3, [r3, r2]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1c9      	bne.n	8002e4a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	0013      	movs	r3, r2
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2140      	movs	r1, #64	@ 0x40
 8002ec4:	f000 faae 	bl	8003424 <UART_WaitOnFlagUntilTimeout>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d004      	beq.n	8002ed6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e005      	b.n	8002ee2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b008      	add	sp, #32
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ef4:	231e      	movs	r3, #30
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a8d      	ldr	r2, [pc, #564]	@ (8003150 <UART_SetConfig+0x264>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a88      	ldr	r2, [pc, #544]	@ (8003154 <UART_SetConfig+0x268>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a7f      	ldr	r2, [pc, #508]	@ (8003158 <UART_SetConfig+0x26c>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a7b      	ldr	r2, [pc, #492]	@ (800315c <UART_SetConfig+0x270>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d127      	bne.n	8002fc2 <UART_SetConfig+0xd6>
 8002f72:	4b7b      	ldr	r3, [pc, #492]	@ (8003160 <UART_SetConfig+0x274>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	2203      	movs	r2, #3
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d00d      	beq.n	8002f9a <UART_SetConfig+0xae>
 8002f7e:	d81b      	bhi.n	8002fb8 <UART_SetConfig+0xcc>
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d014      	beq.n	8002fae <UART_SetConfig+0xc2>
 8002f84:	d818      	bhi.n	8002fb8 <UART_SetConfig+0xcc>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <UART_SetConfig+0xa4>
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d00a      	beq.n	8002fa4 <UART_SetConfig+0xb8>
 8002f8e:	e013      	b.n	8002fb8 <UART_SetConfig+0xcc>
 8002f90:	231f      	movs	r3, #31
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e021      	b.n	8002fde <UART_SetConfig+0xf2>
 8002f9a:	231f      	movs	r3, #31
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e01c      	b.n	8002fde <UART_SetConfig+0xf2>
 8002fa4:	231f      	movs	r3, #31
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	2204      	movs	r2, #4
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e017      	b.n	8002fde <UART_SetConfig+0xf2>
 8002fae:	231f      	movs	r3, #31
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	e012      	b.n	8002fde <UART_SetConfig+0xf2>
 8002fb8:	231f      	movs	r3, #31
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	e00d      	b.n	8002fde <UART_SetConfig+0xf2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a67      	ldr	r2, [pc, #412]	@ (8003164 <UART_SetConfig+0x278>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d104      	bne.n	8002fd6 <UART_SetConfig+0xea>
 8002fcc:	231f      	movs	r3, #31
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e003      	b.n	8002fde <UART_SetConfig+0xf2>
 8002fd6:	231f      	movs	r3, #31
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	2210      	movs	r2, #16
 8002fdc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	2380      	movs	r3, #128	@ 0x80
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d15c      	bne.n	80030a4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002fea:	231f      	movs	r3, #31
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d015      	beq.n	8003020 <UART_SetConfig+0x134>
 8002ff4:	dc18      	bgt.n	8003028 <UART_SetConfig+0x13c>
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d00d      	beq.n	8003016 <UART_SetConfig+0x12a>
 8002ffa:	dc15      	bgt.n	8003028 <UART_SetConfig+0x13c>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <UART_SetConfig+0x11a>
 8003000:	2b02      	cmp	r3, #2
 8003002:	d005      	beq.n	8003010 <UART_SetConfig+0x124>
 8003004:	e010      	b.n	8003028 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003006:	f7ff fa1f 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 800300a:	0003      	movs	r3, r0
 800300c:	61bb      	str	r3, [r7, #24]
        break;
 800300e:	e012      	b.n	8003036 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003010:	4b55      	ldr	r3, [pc, #340]	@ (8003168 <UART_SetConfig+0x27c>)
 8003012:	61bb      	str	r3, [r7, #24]
        break;
 8003014:	e00f      	b.n	8003036 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003016:	f7ff f9b7 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 800301a:	0003      	movs	r3, r0
 800301c:	61bb      	str	r3, [r7, #24]
        break;
 800301e:	e00a      	b.n	8003036 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	61bb      	str	r3, [r7, #24]
        break;
 8003026:	e006      	b.n	8003036 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800302c:	231e      	movs	r3, #30
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
        break;
 8003034:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d100      	bne.n	800303e <UART_SetConfig+0x152>
 800303c:	e07a      	b.n	8003134 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	005a      	lsls	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	18d2      	adds	r2, r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	0019      	movs	r1, r3
 8003050:	0010      	movs	r0, r2
 8003052:	f7fd f863 	bl	800011c <__udivsi3>
 8003056:	0003      	movs	r3, r0
 8003058:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b0f      	cmp	r3, #15
 800305e:	d91c      	bls.n	800309a <UART_SetConfig+0x1ae>
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	025b      	lsls	r3, r3, #9
 8003066:	429a      	cmp	r2, r3
 8003068:	d217      	bcs.n	800309a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	b29a      	uxth	r2, r3
 800306e:	200e      	movs	r0, #14
 8003070:	183b      	adds	r3, r7, r0
 8003072:	210f      	movs	r1, #15
 8003074:	438a      	bics	r2, r1
 8003076:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	b29b      	uxth	r3, r3
 800307e:	2207      	movs	r2, #7
 8003080:	4013      	ands	r3, r2
 8003082:	b299      	uxth	r1, r3
 8003084:	183b      	adds	r3, r7, r0
 8003086:	183a      	adds	r2, r7, r0
 8003088:	8812      	ldrh	r2, [r2, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	183a      	adds	r2, r7, r0
 8003094:	8812      	ldrh	r2, [r2, #0]
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	e04c      	b.n	8003134 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800309a:	231e      	movs	r3, #30
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	e047      	b.n	8003134 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030a4:	231f      	movs	r3, #31
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d015      	beq.n	80030da <UART_SetConfig+0x1ee>
 80030ae:	dc18      	bgt.n	80030e2 <UART_SetConfig+0x1f6>
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d00d      	beq.n	80030d0 <UART_SetConfig+0x1e4>
 80030b4:	dc15      	bgt.n	80030e2 <UART_SetConfig+0x1f6>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <UART_SetConfig+0x1d4>
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d005      	beq.n	80030ca <UART_SetConfig+0x1de>
 80030be:	e010      	b.n	80030e2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c0:	f7ff f9c2 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 80030c4:	0003      	movs	r3, r0
 80030c6:	61bb      	str	r3, [r7, #24]
        break;
 80030c8:	e012      	b.n	80030f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ca:	4b27      	ldr	r3, [pc, #156]	@ (8003168 <UART_SetConfig+0x27c>)
 80030cc:	61bb      	str	r3, [r7, #24]
        break;
 80030ce:	e00f      	b.n	80030f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030d0:	f7ff f95a 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 80030d4:	0003      	movs	r3, r0
 80030d6:	61bb      	str	r3, [r7, #24]
        break;
 80030d8:	e00a      	b.n	80030f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030da:	2380      	movs	r3, #128	@ 0x80
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	61bb      	str	r3, [r7, #24]
        break;
 80030e0:	e006      	b.n	80030f0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030e6:	231e      	movs	r3, #30
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
        break;
 80030ee:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d01e      	beq.n	8003134 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	085a      	lsrs	r2, r3, #1
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	18d2      	adds	r2, r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0019      	movs	r1, r3
 8003106:	0010      	movs	r0, r2
 8003108:	f7fd f808 	bl	800011c <__udivsi3>
 800310c:	0003      	movs	r3, r0
 800310e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b0f      	cmp	r3, #15
 8003114:	d90a      	bls.n	800312c <UART_SetConfig+0x240>
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	025b      	lsls	r3, r3, #9
 800311c:	429a      	cmp	r2, r3
 800311e:	d205      	bcs.n	800312c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	b29a      	uxth	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	e003      	b.n	8003134 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800312c:	231e      	movs	r3, #30
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003140:	231e      	movs	r3, #30
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b008      	add	sp, #32
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			@ (mov r8, r8)
 8003150:	ffff69f3 	.word	0xffff69f3
 8003154:	ffffcfff 	.word	0xffffcfff
 8003158:	fffff4ff 	.word	0xfffff4ff
 800315c:	40013800 	.word	0x40013800
 8003160:	40021000 	.word	0x40021000
 8003164:	40004400 	.word	0x40004400
 8003168:	007a1200 	.word	0x007a1200

0800316c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	2208      	movs	r2, #8
 800317a:	4013      	ands	r3, r2
 800317c:	d00b      	beq.n	8003196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a4a      	ldr	r2, [pc, #296]	@ (80032b0 <UART_AdvFeatureConfig+0x144>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	2201      	movs	r2, #1
 800319c:	4013      	ands	r3, r2
 800319e:	d00b      	beq.n	80031b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a43      	ldr	r2, [pc, #268]	@ (80032b4 <UART_AdvFeatureConfig+0x148>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	2202      	movs	r2, #2
 80031be:	4013      	ands	r3, r2
 80031c0:	d00b      	beq.n	80031da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a3b      	ldr	r2, [pc, #236]	@ (80032b8 <UART_AdvFeatureConfig+0x14c>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	2204      	movs	r2, #4
 80031e0:	4013      	ands	r3, r2
 80031e2:	d00b      	beq.n	80031fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4a34      	ldr	r2, [pc, #208]	@ (80032bc <UART_AdvFeatureConfig+0x150>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	2210      	movs	r2, #16
 8003202:	4013      	ands	r3, r2
 8003204:	d00b      	beq.n	800321e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a2c      	ldr	r2, [pc, #176]	@ (80032c0 <UART_AdvFeatureConfig+0x154>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	2220      	movs	r2, #32
 8003224:	4013      	ands	r3, r2
 8003226:	d00b      	beq.n	8003240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4a25      	ldr	r2, [pc, #148]	@ (80032c4 <UART_AdvFeatureConfig+0x158>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	2240      	movs	r2, #64	@ 0x40
 8003246:	4013      	ands	r3, r2
 8003248:	d01d      	beq.n	8003286 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <UART_AdvFeatureConfig+0x15c>)
 8003252:	4013      	ands	r3, r2
 8003254:	0019      	movs	r1, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	035b      	lsls	r3, r3, #13
 800326a:	429a      	cmp	r2, r3
 800326c:	d10b      	bne.n	8003286 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4a15      	ldr	r2, [pc, #84]	@ (80032cc <UART_AdvFeatureConfig+0x160>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	2280      	movs	r2, #128	@ 0x80
 800328c:	4013      	ands	r3, r2
 800328e:	d00b      	beq.n	80032a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a0e      	ldr	r2, [pc, #56]	@ (80032d0 <UART_AdvFeatureConfig+0x164>)
 8003298:	4013      	ands	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }
}
 80032a8:	46c0      	nop			@ (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	ffff7fff 	.word	0xffff7fff
 80032b4:	fffdffff 	.word	0xfffdffff
 80032b8:	fffeffff 	.word	0xfffeffff
 80032bc:	fffbffff 	.word	0xfffbffff
 80032c0:	ffffefff 	.word	0xffffefff
 80032c4:	ffffdfff 	.word	0xffffdfff
 80032c8:	ffefffff 	.word	0xffefffff
 80032cc:	ff9fffff 	.word	0xff9fffff
 80032d0:	fff7ffff 	.word	0xfff7ffff

080032d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b092      	sub	sp, #72	@ 0x48
 80032d8:	af02      	add	r7, sp, #8
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2284      	movs	r2, #132	@ 0x84
 80032e0:	2100      	movs	r1, #0
 80032e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032e4:	f7fe f9b2 	bl	800164c <HAL_GetTick>
 80032e8:	0003      	movs	r3, r0
 80032ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2208      	movs	r2, #8
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d12c      	bne.n	8003354 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fc:	2280      	movs	r2, #128	@ 0x80
 80032fe:	0391      	lsls	r1, r2, #14
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4a46      	ldr	r2, [pc, #280]	@ (800341c <UART_CheckIdleState+0x148>)
 8003304:	9200      	str	r2, [sp, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	f000 f88c 	bl	8003424 <UART_WaitOnFlagUntilTimeout>
 800330c:	1e03      	subs	r3, r0, #0
 800330e:	d021      	beq.n	8003354 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003310:	f3ef 8310 	mrs	r3, PRIMASK
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003318:	63bb      	str	r3, [r7, #56]	@ 0x38
 800331a:	2301      	movs	r3, #1
 800331c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003320:	f383 8810 	msr	PRIMASK, r3
}
 8003324:	46c0      	nop			@ (mov r8, r8)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2180      	movs	r1, #128	@ 0x80
 8003332:	438a      	bics	r2, r1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333c:	f383 8810 	msr	PRIMASK, r3
}
 8003340:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2278      	movs	r2, #120	@ 0x78
 800334c:	2100      	movs	r1, #0
 800334e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e05f      	b.n	8003414 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2204      	movs	r2, #4
 800335c:	4013      	ands	r3, r2
 800335e:	2b04      	cmp	r3, #4
 8003360:	d146      	bne.n	80033f0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003364:	2280      	movs	r2, #128	@ 0x80
 8003366:	03d1      	lsls	r1, r2, #15
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4a2c      	ldr	r2, [pc, #176]	@ (800341c <UART_CheckIdleState+0x148>)
 800336c:	9200      	str	r2, [sp, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	f000 f858 	bl	8003424 <UART_WaitOnFlagUntilTimeout>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d03b      	beq.n	80033f0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003378:	f3ef 8310 	mrs	r3, PRIMASK
 800337c:	60fb      	str	r3, [r7, #12]
  return(result);
 800337e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003380:	637b      	str	r3, [r7, #52]	@ 0x34
 8003382:	2301      	movs	r3, #1
 8003384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f383 8810 	msr	PRIMASK, r3
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4921      	ldr	r1, [pc, #132]	@ (8003420 <UART_CheckIdleState+0x14c>)
 800339a:	400a      	ands	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033aa:	f3ef 8310 	mrs	r3, PRIMASK
 80033ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80033b0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80033b4:	2301      	movs	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f383 8810 	msr	PRIMASK, r3
}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2101      	movs	r1, #1
 80033cc:	438a      	bics	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f383 8810 	msr	PRIMASK, r3
}
 80033da:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2280      	movs	r2, #128	@ 0x80
 80033e0:	2120      	movs	r1, #32
 80033e2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2278      	movs	r2, #120	@ 0x78
 80033e8:	2100      	movs	r1, #0
 80033ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e011      	b.n	8003414 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2280      	movs	r2, #128	@ 0x80
 80033fa:	2120      	movs	r1, #32
 80033fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2278      	movs	r2, #120	@ 0x78
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b010      	add	sp, #64	@ 0x40
 800341a:	bd80      	pop	{r7, pc}
 800341c:	01ffffff 	.word	0x01ffffff
 8003420:	fffffedf 	.word	0xfffffedf

08003424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	1dfb      	adds	r3, r7, #7
 8003432:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003434:	e051      	b.n	80034da <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	3301      	adds	r3, #1
 800343a:	d04e      	beq.n	80034da <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343c:	f7fe f906 	bl	800164c <HAL_GetTick>
 8003440:	0002      	movs	r2, r0
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	429a      	cmp	r2, r3
 800344a:	d302      	bcc.n	8003452 <UART_WaitOnFlagUntilTimeout+0x2e>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e051      	b.n	80034fa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2204      	movs	r2, #4
 800345e:	4013      	ands	r3, r2
 8003460:	d03b      	beq.n	80034da <UART_WaitOnFlagUntilTimeout+0xb6>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b80      	cmp	r3, #128	@ 0x80
 8003466:	d038      	beq.n	80034da <UART_WaitOnFlagUntilTimeout+0xb6>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b40      	cmp	r3, #64	@ 0x40
 800346c:	d035      	beq.n	80034da <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	2208      	movs	r2, #8
 8003476:	4013      	ands	r3, r2
 8003478:	2b08      	cmp	r3, #8
 800347a:	d111      	bne.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2208      	movs	r2, #8
 8003482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	0018      	movs	r0, r3
 8003488:	f000 f83c 	bl	8003504 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2284      	movs	r2, #132	@ 0x84
 8003490:	2108      	movs	r1, #8
 8003492:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2278      	movs	r2, #120	@ 0x78
 8003498:	2100      	movs	r1, #0
 800349a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e02c      	b.n	80034fa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	2380      	movs	r3, #128	@ 0x80
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	401a      	ands	r2, r3
 80034ac:	2380      	movs	r3, #128	@ 0x80
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d112      	bne.n	80034da <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2280      	movs	r2, #128	@ 0x80
 80034ba:	0112      	lsls	r2, r2, #4
 80034bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f81f 	bl	8003504 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2284      	movs	r2, #132	@ 0x84
 80034ca:	2120      	movs	r1, #32
 80034cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2278      	movs	r2, #120	@ 0x78
 80034d2:	2100      	movs	r1, #0
 80034d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	4013      	ands	r3, r2
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	425a      	negs	r2, r3
 80034ea:	4153      	adcs	r3, r2
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	001a      	movs	r2, r3
 80034f0:	1dfb      	adds	r3, r7, #7
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d09e      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	0018      	movs	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b004      	add	sp, #16
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08e      	sub	sp, #56	@ 0x38
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350c:	f3ef 8310 	mrs	r3, PRIMASK
 8003510:	617b      	str	r3, [r7, #20]
  return(result);
 8003512:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003514:	637b      	str	r3, [r7, #52]	@ 0x34
 8003516:	2301      	movs	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4926      	ldr	r1, [pc, #152]	@ (80035c8 <UART_EndRxTransfer+0xc4>)
 800352e:	400a      	ands	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003534:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	623b      	str	r3, [r7, #32]
  return(result);
 8003544:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30
 8003548:	2301      	movs	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	438a      	bics	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003574:	2b01      	cmp	r3, #1
 8003576:	d118      	bne.n	80035aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003578:	f3ef 8310 	mrs	r3, PRIMASK
 800357c:	60bb      	str	r3, [r7, #8]
  return(result);
 800357e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003582:	2301      	movs	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f383 8810 	msr	PRIMASK, r3
}
 800358c:	46c0      	nop			@ (mov r8, r8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2110      	movs	r1, #16
 800359a:	438a      	bics	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f383 8810 	msr	PRIMASK, r3
}
 80035a8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2280      	movs	r2, #128	@ 0x80
 80035ae:	2120      	movs	r1, #32
 80035b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035be:	46c0      	nop			@ (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b00e      	add	sp, #56	@ 0x38
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			@ (mov r8, r8)
 80035c8:	fffffedf 	.word	0xfffffedf

080035cc <srand>:
 80035cc:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <srand+0x48>)
 80035ce:	b570      	push	{r4, r5, r6, lr}
 80035d0:	681d      	ldr	r5, [r3, #0]
 80035d2:	0004      	movs	r4, r0
 80035d4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d116      	bne.n	8003608 <srand+0x3c>
 80035da:	2018      	movs	r0, #24
 80035dc:	f000 fa60 	bl	8003aa0 <malloc>
 80035e0:	1e02      	subs	r2, r0, #0
 80035e2:	6328      	str	r0, [r5, #48]	@ 0x30
 80035e4:	d104      	bne.n	80035f0 <srand+0x24>
 80035e6:	2146      	movs	r1, #70	@ 0x46
 80035e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <srand+0x4c>)
 80035ea:	480c      	ldr	r0, [pc, #48]	@ (800361c <srand+0x50>)
 80035ec:	f000 f9f0 	bl	80039d0 <__assert_func>
 80035f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <srand+0x54>)
 80035f2:	2100      	movs	r1, #0
 80035f4:	6003      	str	r3, [r0, #0]
 80035f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <srand+0x58>)
 80035f8:	6043      	str	r3, [r0, #4]
 80035fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <srand+0x5c>)
 80035fc:	6083      	str	r3, [r0, #8]
 80035fe:	230b      	movs	r3, #11
 8003600:	8183      	strh	r3, [r0, #12]
 8003602:	2001      	movs	r0, #1
 8003604:	6110      	str	r0, [r2, #16]
 8003606:	6151      	str	r1, [r2, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800360c:	611c      	str	r4, [r3, #16]
 800360e:	615a      	str	r2, [r3, #20]
 8003610:	bd70      	pop	{r4, r5, r6, pc}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	20000030 	.word	0x20000030
 8003618:	080046ac 	.word	0x080046ac
 800361c:	080046c3 	.word	0x080046c3
 8003620:	abcd330e 	.word	0xabcd330e
 8003624:	e66d1234 	.word	0xe66d1234
 8003628:	0005deec 	.word	0x0005deec

0800362c <rand>:
 800362c:	4b16      	ldr	r3, [pc, #88]	@ (8003688 <rand+0x5c>)
 800362e:	b510      	push	{r4, lr}
 8003630:	681c      	ldr	r4, [r3, #0]
 8003632:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003634:	2b00      	cmp	r3, #0
 8003636:	d116      	bne.n	8003666 <rand+0x3a>
 8003638:	2018      	movs	r0, #24
 800363a:	f000 fa31 	bl	8003aa0 <malloc>
 800363e:	1e02      	subs	r2, r0, #0
 8003640:	6320      	str	r0, [r4, #48]	@ 0x30
 8003642:	d104      	bne.n	800364e <rand+0x22>
 8003644:	2152      	movs	r1, #82	@ 0x52
 8003646:	4b11      	ldr	r3, [pc, #68]	@ (800368c <rand+0x60>)
 8003648:	4811      	ldr	r0, [pc, #68]	@ (8003690 <rand+0x64>)
 800364a:	f000 f9c1 	bl	80039d0 <__assert_func>
 800364e:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <rand+0x68>)
 8003650:	2100      	movs	r1, #0
 8003652:	6003      	str	r3, [r0, #0]
 8003654:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <rand+0x6c>)
 8003656:	6043      	str	r3, [r0, #4]
 8003658:	4b10      	ldr	r3, [pc, #64]	@ (800369c <rand+0x70>)
 800365a:	6083      	str	r3, [r0, #8]
 800365c:	230b      	movs	r3, #11
 800365e:	8183      	strh	r3, [r0, #12]
 8003660:	2001      	movs	r0, #1
 8003662:	6110      	str	r0, [r2, #16]
 8003664:	6151      	str	r1, [r2, #20]
 8003666:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8003668:	4a0d      	ldr	r2, [pc, #52]	@ (80036a0 <rand+0x74>)
 800366a:	6920      	ldr	r0, [r4, #16]
 800366c:	6961      	ldr	r1, [r4, #20]
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <rand+0x78>)
 8003670:	f7fc feca 	bl	8000408 <__aeabi_lmul>
 8003674:	2201      	movs	r2, #1
 8003676:	2300      	movs	r3, #0
 8003678:	1880      	adds	r0, r0, r2
 800367a:	4159      	adcs	r1, r3
 800367c:	6120      	str	r0, [r4, #16]
 800367e:	6161      	str	r1, [r4, #20]
 8003680:	0048      	lsls	r0, r1, #1
 8003682:	0840      	lsrs	r0, r0, #1
 8003684:	bd10      	pop	{r4, pc}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	20000030 	.word	0x20000030
 800368c:	080046ac 	.word	0x080046ac
 8003690:	080046c3 	.word	0x080046c3
 8003694:	abcd330e 	.word	0xabcd330e
 8003698:	e66d1234 	.word	0xe66d1234
 800369c:	0005deec 	.word	0x0005deec
 80036a0:	4c957f2d 	.word	0x4c957f2d
 80036a4:	5851f42d 	.word	0x5851f42d

080036a8 <std>:
 80036a8:	2300      	movs	r3, #0
 80036aa:	b510      	push	{r4, lr}
 80036ac:	0004      	movs	r4, r0
 80036ae:	6003      	str	r3, [r0, #0]
 80036b0:	6043      	str	r3, [r0, #4]
 80036b2:	6083      	str	r3, [r0, #8]
 80036b4:	8181      	strh	r1, [r0, #12]
 80036b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80036b8:	81c2      	strh	r2, [r0, #14]
 80036ba:	6103      	str	r3, [r0, #16]
 80036bc:	6143      	str	r3, [r0, #20]
 80036be:	6183      	str	r3, [r0, #24]
 80036c0:	0019      	movs	r1, r3
 80036c2:	2208      	movs	r2, #8
 80036c4:	305c      	adds	r0, #92	@ 0x5c
 80036c6:	f000 f8ff 	bl	80038c8 <memset>
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <std+0x50>)
 80036cc:	6224      	str	r4, [r4, #32]
 80036ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80036d0:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <std+0x54>)
 80036d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003700 <std+0x58>)
 80036d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <std+0x5c>)
 80036da:	6323      	str	r3, [r4, #48]	@ 0x30
 80036dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <std+0x60>)
 80036de:	429c      	cmp	r4, r3
 80036e0:	d005      	beq.n	80036ee <std+0x46>
 80036e2:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <std+0x64>)
 80036e4:	429c      	cmp	r4, r3
 80036e6:	d002      	beq.n	80036ee <std+0x46>
 80036e8:	4b09      	ldr	r3, [pc, #36]	@ (8003710 <std+0x68>)
 80036ea:	429c      	cmp	r4, r3
 80036ec:	d103      	bne.n	80036f6 <std+0x4e>
 80036ee:	0020      	movs	r0, r4
 80036f0:	3058      	adds	r0, #88	@ 0x58
 80036f2:	f000 f969 	bl	80039c8 <__retarget_lock_init_recursive>
 80036f6:	bd10      	pop	{r4, pc}
 80036f8:	08003831 	.word	0x08003831
 80036fc:	08003859 	.word	0x08003859
 8003700:	08003891 	.word	0x08003891
 8003704:	080038bd 	.word	0x080038bd
 8003708:	200001c8 	.word	0x200001c8
 800370c:	20000230 	.word	0x20000230
 8003710:	20000298 	.word	0x20000298

08003714 <stdio_exit_handler>:
 8003714:	b510      	push	{r4, lr}
 8003716:	4a03      	ldr	r2, [pc, #12]	@ (8003724 <stdio_exit_handler+0x10>)
 8003718:	4903      	ldr	r1, [pc, #12]	@ (8003728 <stdio_exit_handler+0x14>)
 800371a:	4804      	ldr	r0, [pc, #16]	@ (800372c <stdio_exit_handler+0x18>)
 800371c:	f000 f86c 	bl	80037f8 <_fwalk_sglue>
 8003720:	bd10      	pop	{r4, pc}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	20000024 	.word	0x20000024
 8003728:	08003d25 	.word	0x08003d25
 800372c:	20000034 	.word	0x20000034

08003730 <cleanup_stdio>:
 8003730:	6841      	ldr	r1, [r0, #4]
 8003732:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <cleanup_stdio+0x30>)
 8003734:	b510      	push	{r4, lr}
 8003736:	0004      	movs	r4, r0
 8003738:	4299      	cmp	r1, r3
 800373a:	d001      	beq.n	8003740 <cleanup_stdio+0x10>
 800373c:	f000 faf2 	bl	8003d24 <_fflush_r>
 8003740:	68a1      	ldr	r1, [r4, #8]
 8003742:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <cleanup_stdio+0x34>)
 8003744:	4299      	cmp	r1, r3
 8003746:	d002      	beq.n	800374e <cleanup_stdio+0x1e>
 8003748:	0020      	movs	r0, r4
 800374a:	f000 faeb 	bl	8003d24 <_fflush_r>
 800374e:	68e1      	ldr	r1, [r4, #12]
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <cleanup_stdio+0x38>)
 8003752:	4299      	cmp	r1, r3
 8003754:	d002      	beq.n	800375c <cleanup_stdio+0x2c>
 8003756:	0020      	movs	r0, r4
 8003758:	f000 fae4 	bl	8003d24 <_fflush_r>
 800375c:	bd10      	pop	{r4, pc}
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	200001c8 	.word	0x200001c8
 8003764:	20000230 	.word	0x20000230
 8003768:	20000298 	.word	0x20000298

0800376c <global_stdio_init.part.0>:
 800376c:	b510      	push	{r4, lr}
 800376e:	4b09      	ldr	r3, [pc, #36]	@ (8003794 <global_stdio_init.part.0+0x28>)
 8003770:	4a09      	ldr	r2, [pc, #36]	@ (8003798 <global_stdio_init.part.0+0x2c>)
 8003772:	2104      	movs	r1, #4
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	4809      	ldr	r0, [pc, #36]	@ (800379c <global_stdio_init.part.0+0x30>)
 8003778:	2200      	movs	r2, #0
 800377a:	f7ff ff95 	bl	80036a8 <std>
 800377e:	2201      	movs	r2, #1
 8003780:	2109      	movs	r1, #9
 8003782:	4807      	ldr	r0, [pc, #28]	@ (80037a0 <global_stdio_init.part.0+0x34>)
 8003784:	f7ff ff90 	bl	80036a8 <std>
 8003788:	2202      	movs	r2, #2
 800378a:	2112      	movs	r1, #18
 800378c:	4805      	ldr	r0, [pc, #20]	@ (80037a4 <global_stdio_init.part.0+0x38>)
 800378e:	f7ff ff8b 	bl	80036a8 <std>
 8003792:	bd10      	pop	{r4, pc}
 8003794:	20000300 	.word	0x20000300
 8003798:	08003715 	.word	0x08003715
 800379c:	200001c8 	.word	0x200001c8
 80037a0:	20000230 	.word	0x20000230
 80037a4:	20000298 	.word	0x20000298

080037a8 <__sfp_lock_acquire>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	4802      	ldr	r0, [pc, #8]	@ (80037b4 <__sfp_lock_acquire+0xc>)
 80037ac:	f000 f90d 	bl	80039ca <__retarget_lock_acquire_recursive>
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	20000309 	.word	0x20000309

080037b8 <__sfp_lock_release>:
 80037b8:	b510      	push	{r4, lr}
 80037ba:	4802      	ldr	r0, [pc, #8]	@ (80037c4 <__sfp_lock_release+0xc>)
 80037bc:	f000 f906 	bl	80039cc <__retarget_lock_release_recursive>
 80037c0:	bd10      	pop	{r4, pc}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	20000309 	.word	0x20000309

080037c8 <__sinit>:
 80037c8:	b510      	push	{r4, lr}
 80037ca:	0004      	movs	r4, r0
 80037cc:	f7ff ffec 	bl	80037a8 <__sfp_lock_acquire>
 80037d0:	6a23      	ldr	r3, [r4, #32]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <__sinit+0x14>
 80037d6:	f7ff ffef 	bl	80037b8 <__sfp_lock_release>
 80037da:	bd10      	pop	{r4, pc}
 80037dc:	4b04      	ldr	r3, [pc, #16]	@ (80037f0 <__sinit+0x28>)
 80037de:	6223      	str	r3, [r4, #32]
 80037e0:	4b04      	ldr	r3, [pc, #16]	@ (80037f4 <__sinit+0x2c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f6      	bne.n	80037d6 <__sinit+0xe>
 80037e8:	f7ff ffc0 	bl	800376c <global_stdio_init.part.0>
 80037ec:	e7f3      	b.n	80037d6 <__sinit+0xe>
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	08003731 	.word	0x08003731
 80037f4:	20000300 	.word	0x20000300

080037f8 <_fwalk_sglue>:
 80037f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037fa:	0014      	movs	r4, r2
 80037fc:	2600      	movs	r6, #0
 80037fe:	9000      	str	r0, [sp, #0]
 8003800:	9101      	str	r1, [sp, #4]
 8003802:	68a5      	ldr	r5, [r4, #8]
 8003804:	6867      	ldr	r7, [r4, #4]
 8003806:	3f01      	subs	r7, #1
 8003808:	d504      	bpl.n	8003814 <_fwalk_sglue+0x1c>
 800380a:	6824      	ldr	r4, [r4, #0]
 800380c:	2c00      	cmp	r4, #0
 800380e:	d1f8      	bne.n	8003802 <_fwalk_sglue+0xa>
 8003810:	0030      	movs	r0, r6
 8003812:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003814:	89ab      	ldrh	r3, [r5, #12]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d908      	bls.n	800382c <_fwalk_sglue+0x34>
 800381a:	220e      	movs	r2, #14
 800381c:	5eab      	ldrsh	r3, [r5, r2]
 800381e:	3301      	adds	r3, #1
 8003820:	d004      	beq.n	800382c <_fwalk_sglue+0x34>
 8003822:	0029      	movs	r1, r5
 8003824:	9800      	ldr	r0, [sp, #0]
 8003826:	9b01      	ldr	r3, [sp, #4]
 8003828:	4798      	blx	r3
 800382a:	4306      	orrs	r6, r0
 800382c:	3568      	adds	r5, #104	@ 0x68
 800382e:	e7ea      	b.n	8003806 <_fwalk_sglue+0xe>

08003830 <__sread>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	000c      	movs	r4, r1
 8003834:	250e      	movs	r5, #14
 8003836:	5f49      	ldrsh	r1, [r1, r5]
 8003838:	f000 f874 	bl	8003924 <_read_r>
 800383c:	2800      	cmp	r0, #0
 800383e:	db03      	blt.n	8003848 <__sread+0x18>
 8003840:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003842:	181b      	adds	r3, r3, r0
 8003844:	6563      	str	r3, [r4, #84]	@ 0x54
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	4a02      	ldr	r2, [pc, #8]	@ (8003854 <__sread+0x24>)
 800384c:	4013      	ands	r3, r2
 800384e:	81a3      	strh	r3, [r4, #12]
 8003850:	e7f9      	b.n	8003846 <__sread+0x16>
 8003852:	46c0      	nop			@ (mov r8, r8)
 8003854:	ffffefff 	.word	0xffffefff

08003858 <__swrite>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	001f      	movs	r7, r3
 800385c:	898b      	ldrh	r3, [r1, #12]
 800385e:	0005      	movs	r5, r0
 8003860:	000c      	movs	r4, r1
 8003862:	0016      	movs	r6, r2
 8003864:	05db      	lsls	r3, r3, #23
 8003866:	d505      	bpl.n	8003874 <__swrite+0x1c>
 8003868:	230e      	movs	r3, #14
 800386a:	5ec9      	ldrsh	r1, [r1, r3]
 800386c:	2200      	movs	r2, #0
 800386e:	2302      	movs	r3, #2
 8003870:	f000 f844 	bl	80038fc <_lseek_r>
 8003874:	89a3      	ldrh	r3, [r4, #12]
 8003876:	4a05      	ldr	r2, [pc, #20]	@ (800388c <__swrite+0x34>)
 8003878:	0028      	movs	r0, r5
 800387a:	4013      	ands	r3, r2
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	0032      	movs	r2, r6
 8003880:	230e      	movs	r3, #14
 8003882:	5ee1      	ldrsh	r1, [r4, r3]
 8003884:	003b      	movs	r3, r7
 8003886:	f000 f861 	bl	800394c <_write_r>
 800388a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800388c:	ffffefff 	.word	0xffffefff

08003890 <__sseek>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	000c      	movs	r4, r1
 8003894:	250e      	movs	r5, #14
 8003896:	5f49      	ldrsh	r1, [r1, r5]
 8003898:	f000 f830 	bl	80038fc <_lseek_r>
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	1c42      	adds	r2, r0, #1
 80038a0:	d103      	bne.n	80038aa <__sseek+0x1a>
 80038a2:	4a05      	ldr	r2, [pc, #20]	@ (80038b8 <__sseek+0x28>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	2280      	movs	r2, #128	@ 0x80
 80038ac:	0152      	lsls	r2, r2, #5
 80038ae:	4313      	orrs	r3, r2
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80038b4:	e7f8      	b.n	80038a8 <__sseek+0x18>
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	ffffefff 	.word	0xffffefff

080038bc <__sclose>:
 80038bc:	b510      	push	{r4, lr}
 80038be:	230e      	movs	r3, #14
 80038c0:	5ec9      	ldrsh	r1, [r1, r3]
 80038c2:	f000 f809 	bl	80038d8 <_close_r>
 80038c6:	bd10      	pop	{r4, pc}

080038c8 <memset>:
 80038c8:	0003      	movs	r3, r0
 80038ca:	1882      	adds	r2, r0, r2
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d100      	bne.n	80038d2 <memset+0xa>
 80038d0:	4770      	bx	lr
 80038d2:	7019      	strb	r1, [r3, #0]
 80038d4:	3301      	adds	r3, #1
 80038d6:	e7f9      	b.n	80038cc <memset+0x4>

080038d8 <_close_r>:
 80038d8:	2300      	movs	r3, #0
 80038da:	b570      	push	{r4, r5, r6, lr}
 80038dc:	4d06      	ldr	r5, [pc, #24]	@ (80038f8 <_close_r+0x20>)
 80038de:	0004      	movs	r4, r0
 80038e0:	0008      	movs	r0, r1
 80038e2:	602b      	str	r3, [r5, #0]
 80038e4:	f7fd fdc6 	bl	8001474 <_close>
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d103      	bne.n	80038f4 <_close_r+0x1c>
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d000      	beq.n	80038f4 <_close_r+0x1c>
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	bd70      	pop	{r4, r5, r6, pc}
 80038f6:	46c0      	nop			@ (mov r8, r8)
 80038f8:	20000304 	.word	0x20000304

080038fc <_lseek_r>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	0004      	movs	r4, r0
 8003900:	0008      	movs	r0, r1
 8003902:	0011      	movs	r1, r2
 8003904:	001a      	movs	r2, r3
 8003906:	2300      	movs	r3, #0
 8003908:	4d05      	ldr	r5, [pc, #20]	@ (8003920 <_lseek_r+0x24>)
 800390a:	602b      	str	r3, [r5, #0]
 800390c:	f7fd fdd3 	bl	80014b6 <_lseek>
 8003910:	1c43      	adds	r3, r0, #1
 8003912:	d103      	bne.n	800391c <_lseek_r+0x20>
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d000      	beq.n	800391c <_lseek_r+0x20>
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	bd70      	pop	{r4, r5, r6, pc}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	20000304 	.word	0x20000304

08003924 <_read_r>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	0004      	movs	r4, r0
 8003928:	0008      	movs	r0, r1
 800392a:	0011      	movs	r1, r2
 800392c:	001a      	movs	r2, r3
 800392e:	2300      	movs	r3, #0
 8003930:	4d05      	ldr	r5, [pc, #20]	@ (8003948 <_read_r+0x24>)
 8003932:	602b      	str	r3, [r5, #0]
 8003934:	f7fd fd65 	bl	8001402 <_read>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d103      	bne.n	8003944 <_read_r+0x20>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d000      	beq.n	8003944 <_read_r+0x20>
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	bd70      	pop	{r4, r5, r6, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	20000304 	.word	0x20000304

0800394c <_write_r>:
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	0004      	movs	r4, r0
 8003950:	0008      	movs	r0, r1
 8003952:	0011      	movs	r1, r2
 8003954:	001a      	movs	r2, r3
 8003956:	2300      	movs	r3, #0
 8003958:	4d05      	ldr	r5, [pc, #20]	@ (8003970 <_write_r+0x24>)
 800395a:	602b      	str	r3, [r5, #0]
 800395c:	f7fd fd6e 	bl	800143c <_write>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d103      	bne.n	800396c <_write_r+0x20>
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d000      	beq.n	800396c <_write_r+0x20>
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	bd70      	pop	{r4, r5, r6, pc}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	20000304 	.word	0x20000304

08003974 <__errno>:
 8003974:	4b01      	ldr	r3, [pc, #4]	@ (800397c <__errno+0x8>)
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	4770      	bx	lr
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	20000030 	.word	0x20000030

08003980 <__libc_init_array>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	2600      	movs	r6, #0
 8003984:	4c0c      	ldr	r4, [pc, #48]	@ (80039b8 <__libc_init_array+0x38>)
 8003986:	4d0d      	ldr	r5, [pc, #52]	@ (80039bc <__libc_init_array+0x3c>)
 8003988:	1b64      	subs	r4, r4, r5
 800398a:	10a4      	asrs	r4, r4, #2
 800398c:	42a6      	cmp	r6, r4
 800398e:	d109      	bne.n	80039a4 <__libc_init_array+0x24>
 8003990:	2600      	movs	r6, #0
 8003992:	f000 fe63 	bl	800465c <_init>
 8003996:	4c0a      	ldr	r4, [pc, #40]	@ (80039c0 <__libc_init_array+0x40>)
 8003998:	4d0a      	ldr	r5, [pc, #40]	@ (80039c4 <__libc_init_array+0x44>)
 800399a:	1b64      	subs	r4, r4, r5
 800399c:	10a4      	asrs	r4, r4, #2
 800399e:	42a6      	cmp	r6, r4
 80039a0:	d105      	bne.n	80039ae <__libc_init_array+0x2e>
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	00b3      	lsls	r3, r6, #2
 80039a6:	58eb      	ldr	r3, [r5, r3]
 80039a8:	4798      	blx	r3
 80039aa:	3601      	adds	r6, #1
 80039ac:	e7ee      	b.n	800398c <__libc_init_array+0xc>
 80039ae:	00b3      	lsls	r3, r6, #2
 80039b0:	58eb      	ldr	r3, [r5, r3]
 80039b2:	4798      	blx	r3
 80039b4:	3601      	adds	r6, #1
 80039b6:	e7f2      	b.n	800399e <__libc_init_array+0x1e>
 80039b8:	0800478c 	.word	0x0800478c
 80039bc:	0800478c 	.word	0x0800478c
 80039c0:	08004790 	.word	0x08004790
 80039c4:	0800478c 	.word	0x0800478c

080039c8 <__retarget_lock_init_recursive>:
 80039c8:	4770      	bx	lr

080039ca <__retarget_lock_acquire_recursive>:
 80039ca:	4770      	bx	lr

080039cc <__retarget_lock_release_recursive>:
 80039cc:	4770      	bx	lr
	...

080039d0 <__assert_func>:
 80039d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80039d2:	0014      	movs	r4, r2
 80039d4:	001a      	movs	r2, r3
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <__assert_func+0x2c>)
 80039d8:	0005      	movs	r5, r0
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	000e      	movs	r6, r1
 80039de:	68d8      	ldr	r0, [r3, #12]
 80039e0:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <__assert_func+0x30>)
 80039e2:	2c00      	cmp	r4, #0
 80039e4:	d101      	bne.n	80039ea <__assert_func+0x1a>
 80039e6:	4b07      	ldr	r3, [pc, #28]	@ (8003a04 <__assert_func+0x34>)
 80039e8:	001c      	movs	r4, r3
 80039ea:	4907      	ldr	r1, [pc, #28]	@ (8003a08 <__assert_func+0x38>)
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	9402      	str	r4, [sp, #8]
 80039f0:	002b      	movs	r3, r5
 80039f2:	9600      	str	r6, [sp, #0]
 80039f4:	f000 f9c2 	bl	8003d7c <fiprintf>
 80039f8:	f000 f9e2 	bl	8003dc0 <abort>
 80039fc:	20000030 	.word	0x20000030
 8003a00:	0800471b 	.word	0x0800471b
 8003a04:	08004756 	.word	0x08004756
 8003a08:	08004728 	.word	0x08004728

08003a0c <_free_r>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	0005      	movs	r5, r0
 8003a10:	1e0c      	subs	r4, r1, #0
 8003a12:	d010      	beq.n	8003a36 <_free_r+0x2a>
 8003a14:	3c04      	subs	r4, #4
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	da00      	bge.n	8003a1e <_free_r+0x12>
 8003a1c:	18e4      	adds	r4, r4, r3
 8003a1e:	0028      	movs	r0, r5
 8003a20:	f000 f8ea 	bl	8003bf8 <__malloc_lock>
 8003a24:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <_free_r+0x90>)
 8003a26:	6813      	ldr	r3, [r2, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <_free_r+0x2c>
 8003a2c:	6063      	str	r3, [r4, #4]
 8003a2e:	6014      	str	r4, [r2, #0]
 8003a30:	0028      	movs	r0, r5
 8003a32:	f000 f8e9 	bl	8003c08 <__malloc_unlock>
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d908      	bls.n	8003a4e <_free_r+0x42>
 8003a3c:	6820      	ldr	r0, [r4, #0]
 8003a3e:	1821      	adds	r1, r4, r0
 8003a40:	428b      	cmp	r3, r1
 8003a42:	d1f3      	bne.n	8003a2c <_free_r+0x20>
 8003a44:	6819      	ldr	r1, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	1809      	adds	r1, r1, r0
 8003a4a:	6021      	str	r1, [r4, #0]
 8003a4c:	e7ee      	b.n	8003a2c <_free_r+0x20>
 8003a4e:	001a      	movs	r2, r3
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <_free_r+0x4e>
 8003a56:	42a3      	cmp	r3, r4
 8003a58:	d9f9      	bls.n	8003a4e <_free_r+0x42>
 8003a5a:	6811      	ldr	r1, [r2, #0]
 8003a5c:	1850      	adds	r0, r2, r1
 8003a5e:	42a0      	cmp	r0, r4
 8003a60:	d10b      	bne.n	8003a7a <_free_r+0x6e>
 8003a62:	6820      	ldr	r0, [r4, #0]
 8003a64:	1809      	adds	r1, r1, r0
 8003a66:	1850      	adds	r0, r2, r1
 8003a68:	6011      	str	r1, [r2, #0]
 8003a6a:	4283      	cmp	r3, r0
 8003a6c:	d1e0      	bne.n	8003a30 <_free_r+0x24>
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	1841      	adds	r1, r0, r1
 8003a74:	6011      	str	r1, [r2, #0]
 8003a76:	6053      	str	r3, [r2, #4]
 8003a78:	e7da      	b.n	8003a30 <_free_r+0x24>
 8003a7a:	42a0      	cmp	r0, r4
 8003a7c:	d902      	bls.n	8003a84 <_free_r+0x78>
 8003a7e:	230c      	movs	r3, #12
 8003a80:	602b      	str	r3, [r5, #0]
 8003a82:	e7d5      	b.n	8003a30 <_free_r+0x24>
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	1821      	adds	r1, r4, r0
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	d103      	bne.n	8003a94 <_free_r+0x88>
 8003a8c:	6819      	ldr	r1, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	1809      	adds	r1, r1, r0
 8003a92:	6021      	str	r1, [r4, #0]
 8003a94:	6063      	str	r3, [r4, #4]
 8003a96:	6054      	str	r4, [r2, #4]
 8003a98:	e7ca      	b.n	8003a30 <_free_r+0x24>
 8003a9a:	46c0      	nop			@ (mov r8, r8)
 8003a9c:	20000310 	.word	0x20000310

08003aa0 <malloc>:
 8003aa0:	b510      	push	{r4, lr}
 8003aa2:	4b03      	ldr	r3, [pc, #12]	@ (8003ab0 <malloc+0x10>)
 8003aa4:	0001      	movs	r1, r0
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	f000 f826 	bl	8003af8 <_malloc_r>
 8003aac:	bd10      	pop	{r4, pc}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	20000030 	.word	0x20000030

08003ab4 <sbrk_aligned>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8003af4 <sbrk_aligned+0x40>)
 8003ab8:	000d      	movs	r5, r1
 8003aba:	6831      	ldr	r1, [r6, #0]
 8003abc:	0004      	movs	r4, r0
 8003abe:	2900      	cmp	r1, #0
 8003ac0:	d102      	bne.n	8003ac8 <sbrk_aligned+0x14>
 8003ac2:	f000 f96b 	bl	8003d9c <_sbrk_r>
 8003ac6:	6030      	str	r0, [r6, #0]
 8003ac8:	0029      	movs	r1, r5
 8003aca:	0020      	movs	r0, r4
 8003acc:	f000 f966 	bl	8003d9c <_sbrk_r>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d103      	bne.n	8003adc <sbrk_aligned+0x28>
 8003ad4:	2501      	movs	r5, #1
 8003ad6:	426d      	negs	r5, r5
 8003ad8:	0028      	movs	r0, r5
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	2303      	movs	r3, #3
 8003ade:	1cc5      	adds	r5, r0, #3
 8003ae0:	439d      	bics	r5, r3
 8003ae2:	42a8      	cmp	r0, r5
 8003ae4:	d0f8      	beq.n	8003ad8 <sbrk_aligned+0x24>
 8003ae6:	1a29      	subs	r1, r5, r0
 8003ae8:	0020      	movs	r0, r4
 8003aea:	f000 f957 	bl	8003d9c <_sbrk_r>
 8003aee:	3001      	adds	r0, #1
 8003af0:	d1f2      	bne.n	8003ad8 <sbrk_aligned+0x24>
 8003af2:	e7ef      	b.n	8003ad4 <sbrk_aligned+0x20>
 8003af4:	2000030c 	.word	0x2000030c

08003af8 <_malloc_r>:
 8003af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003afa:	2203      	movs	r2, #3
 8003afc:	1ccb      	adds	r3, r1, #3
 8003afe:	4393      	bics	r3, r2
 8003b00:	3308      	adds	r3, #8
 8003b02:	0005      	movs	r5, r0
 8003b04:	001f      	movs	r7, r3
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d234      	bcs.n	8003b74 <_malloc_r+0x7c>
 8003b0a:	270c      	movs	r7, #12
 8003b0c:	42b9      	cmp	r1, r7
 8003b0e:	d833      	bhi.n	8003b78 <_malloc_r+0x80>
 8003b10:	0028      	movs	r0, r5
 8003b12:	f000 f871 	bl	8003bf8 <__malloc_lock>
 8003b16:	4e37      	ldr	r6, [pc, #220]	@ (8003bf4 <_malloc_r+0xfc>)
 8003b18:	6833      	ldr	r3, [r6, #0]
 8003b1a:	001c      	movs	r4, r3
 8003b1c:	2c00      	cmp	r4, #0
 8003b1e:	d12f      	bne.n	8003b80 <_malloc_r+0x88>
 8003b20:	0039      	movs	r1, r7
 8003b22:	0028      	movs	r0, r5
 8003b24:	f7ff ffc6 	bl	8003ab4 <sbrk_aligned>
 8003b28:	0004      	movs	r4, r0
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	d15f      	bne.n	8003bee <_malloc_r+0xf6>
 8003b2e:	6834      	ldr	r4, [r6, #0]
 8003b30:	9400      	str	r4, [sp, #0]
 8003b32:	9b00      	ldr	r3, [sp, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d14a      	bne.n	8003bce <_malloc_r+0xd6>
 8003b38:	2c00      	cmp	r4, #0
 8003b3a:	d052      	beq.n	8003be2 <_malloc_r+0xea>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	0028      	movs	r0, r5
 8003b40:	18e3      	adds	r3, r4, r3
 8003b42:	9900      	ldr	r1, [sp, #0]
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	f000 f929 	bl	8003d9c <_sbrk_r>
 8003b4a:	9b01      	ldr	r3, [sp, #4]
 8003b4c:	4283      	cmp	r3, r0
 8003b4e:	d148      	bne.n	8003be2 <_malloc_r+0xea>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	0028      	movs	r0, r5
 8003b54:	1aff      	subs	r7, r7, r3
 8003b56:	0039      	movs	r1, r7
 8003b58:	f7ff ffac 	bl	8003ab4 <sbrk_aligned>
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d040      	beq.n	8003be2 <_malloc_r+0xea>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	19db      	adds	r3, r3, r7
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	6833      	ldr	r3, [r6, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	2a00      	cmp	r2, #0
 8003b6c:	d133      	bne.n	8003bd6 <_malloc_r+0xde>
 8003b6e:	9b00      	ldr	r3, [sp, #0]
 8003b70:	6033      	str	r3, [r6, #0]
 8003b72:	e019      	b.n	8003ba8 <_malloc_r+0xb0>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	dac9      	bge.n	8003b0c <_malloc_r+0x14>
 8003b78:	230c      	movs	r3, #12
 8003b7a:	602b      	str	r3, [r5, #0]
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b80:	6821      	ldr	r1, [r4, #0]
 8003b82:	1bc9      	subs	r1, r1, r7
 8003b84:	d420      	bmi.n	8003bc8 <_malloc_r+0xd0>
 8003b86:	290b      	cmp	r1, #11
 8003b88:	d90a      	bls.n	8003ba0 <_malloc_r+0xa8>
 8003b8a:	19e2      	adds	r2, r4, r7
 8003b8c:	6027      	str	r7, [r4, #0]
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	d104      	bne.n	8003b9c <_malloc_r+0xa4>
 8003b92:	6032      	str	r2, [r6, #0]
 8003b94:	6863      	ldr	r3, [r4, #4]
 8003b96:	6011      	str	r1, [r2, #0]
 8003b98:	6053      	str	r3, [r2, #4]
 8003b9a:	e005      	b.n	8003ba8 <_malloc_r+0xb0>
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	e7f9      	b.n	8003b94 <_malloc_r+0x9c>
 8003ba0:	6862      	ldr	r2, [r4, #4]
 8003ba2:	42a3      	cmp	r3, r4
 8003ba4:	d10e      	bne.n	8003bc4 <_malloc_r+0xcc>
 8003ba6:	6032      	str	r2, [r6, #0]
 8003ba8:	0028      	movs	r0, r5
 8003baa:	f000 f82d 	bl	8003c08 <__malloc_unlock>
 8003bae:	0020      	movs	r0, r4
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	300b      	adds	r0, #11
 8003bb4:	1d23      	adds	r3, r4, #4
 8003bb6:	4390      	bics	r0, r2
 8003bb8:	1ac2      	subs	r2, r0, r3
 8003bba:	4298      	cmp	r0, r3
 8003bbc:	d0df      	beq.n	8003b7e <_malloc_r+0x86>
 8003bbe:	1a1b      	subs	r3, r3, r0
 8003bc0:	50a3      	str	r3, [r4, r2]
 8003bc2:	e7dc      	b.n	8003b7e <_malloc_r+0x86>
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	e7ef      	b.n	8003ba8 <_malloc_r+0xb0>
 8003bc8:	0023      	movs	r3, r4
 8003bca:	6864      	ldr	r4, [r4, #4]
 8003bcc:	e7a6      	b.n	8003b1c <_malloc_r+0x24>
 8003bce:	9c00      	ldr	r4, [sp, #0]
 8003bd0:	6863      	ldr	r3, [r4, #4]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	e7ad      	b.n	8003b32 <_malloc_r+0x3a>
 8003bd6:	001a      	movs	r2, r3
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	42a3      	cmp	r3, r4
 8003bdc:	d1fb      	bne.n	8003bd6 <_malloc_r+0xde>
 8003bde:	2300      	movs	r3, #0
 8003be0:	e7da      	b.n	8003b98 <_malloc_r+0xa0>
 8003be2:	230c      	movs	r3, #12
 8003be4:	0028      	movs	r0, r5
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	f000 f80e 	bl	8003c08 <__malloc_unlock>
 8003bec:	e7c6      	b.n	8003b7c <_malloc_r+0x84>
 8003bee:	6007      	str	r7, [r0, #0]
 8003bf0:	e7da      	b.n	8003ba8 <_malloc_r+0xb0>
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	20000310 	.word	0x20000310

08003bf8 <__malloc_lock>:
 8003bf8:	b510      	push	{r4, lr}
 8003bfa:	4802      	ldr	r0, [pc, #8]	@ (8003c04 <__malloc_lock+0xc>)
 8003bfc:	f7ff fee5 	bl	80039ca <__retarget_lock_acquire_recursive>
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	20000308 	.word	0x20000308

08003c08 <__malloc_unlock>:
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	4802      	ldr	r0, [pc, #8]	@ (8003c14 <__malloc_unlock+0xc>)
 8003c0c:	f7ff fede 	bl	80039cc <__retarget_lock_release_recursive>
 8003c10:	bd10      	pop	{r4, pc}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	20000308 	.word	0x20000308

08003c18 <__sflush_r>:
 8003c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c1a:	220c      	movs	r2, #12
 8003c1c:	5e8b      	ldrsh	r3, [r1, r2]
 8003c1e:	0005      	movs	r5, r0
 8003c20:	000c      	movs	r4, r1
 8003c22:	071a      	lsls	r2, r3, #28
 8003c24:	d456      	bmi.n	8003cd4 <__sflush_r+0xbc>
 8003c26:	684a      	ldr	r2, [r1, #4]
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	dc02      	bgt.n	8003c32 <__sflush_r+0x1a>
 8003c2c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	dd4e      	ble.n	8003cd0 <__sflush_r+0xb8>
 8003c32:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003c34:	2f00      	cmp	r7, #0
 8003c36:	d04b      	beq.n	8003cd0 <__sflush_r+0xb8>
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2080      	movs	r0, #128	@ 0x80
 8003c3c:	682e      	ldr	r6, [r5, #0]
 8003c3e:	602a      	str	r2, [r5, #0]
 8003c40:	001a      	movs	r2, r3
 8003c42:	0140      	lsls	r0, r0, #5
 8003c44:	6a21      	ldr	r1, [r4, #32]
 8003c46:	4002      	ands	r2, r0
 8003c48:	4203      	tst	r3, r0
 8003c4a:	d033      	beq.n	8003cb4 <__sflush_r+0x9c>
 8003c4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	075b      	lsls	r3, r3, #29
 8003c52:	d506      	bpl.n	8003c62 <__sflush_r+0x4a>
 8003c54:	6863      	ldr	r3, [r4, #4]
 8003c56:	1ad2      	subs	r2, r2, r3
 8003c58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <__sflush_r+0x4a>
 8003c5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c60:	1ad2      	subs	r2, r2, r3
 8003c62:	2300      	movs	r3, #0
 8003c64:	0028      	movs	r0, r5
 8003c66:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003c68:	6a21      	ldr	r1, [r4, #32]
 8003c6a:	47b8      	blx	r7
 8003c6c:	89a2      	ldrh	r2, [r4, #12]
 8003c6e:	1c43      	adds	r3, r0, #1
 8003c70:	d106      	bne.n	8003c80 <__sflush_r+0x68>
 8003c72:	6829      	ldr	r1, [r5, #0]
 8003c74:	291d      	cmp	r1, #29
 8003c76:	d846      	bhi.n	8003d06 <__sflush_r+0xee>
 8003c78:	4b29      	ldr	r3, [pc, #164]	@ (8003d20 <__sflush_r+0x108>)
 8003c7a:	410b      	asrs	r3, r1
 8003c7c:	07db      	lsls	r3, r3, #31
 8003c7e:	d442      	bmi.n	8003d06 <__sflush_r+0xee>
 8003c80:	2300      	movs	r3, #0
 8003c82:	6063      	str	r3, [r4, #4]
 8003c84:	6923      	ldr	r3, [r4, #16]
 8003c86:	6023      	str	r3, [r4, #0]
 8003c88:	04d2      	lsls	r2, r2, #19
 8003c8a:	d505      	bpl.n	8003c98 <__sflush_r+0x80>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <__sflush_r+0x7e>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d100      	bne.n	8003c98 <__sflush_r+0x80>
 8003c96:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c9a:	602e      	str	r6, [r5, #0]
 8003c9c:	2900      	cmp	r1, #0
 8003c9e:	d017      	beq.n	8003cd0 <__sflush_r+0xb8>
 8003ca0:	0023      	movs	r3, r4
 8003ca2:	3344      	adds	r3, #68	@ 0x44
 8003ca4:	4299      	cmp	r1, r3
 8003ca6:	d002      	beq.n	8003cae <__sflush_r+0x96>
 8003ca8:	0028      	movs	r0, r5
 8003caa:	f7ff feaf 	bl	8003a0c <_free_r>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003cb2:	e00d      	b.n	8003cd0 <__sflush_r+0xb8>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	0028      	movs	r0, r5
 8003cb8:	47b8      	blx	r7
 8003cba:	0002      	movs	r2, r0
 8003cbc:	1c43      	adds	r3, r0, #1
 8003cbe:	d1c6      	bne.n	8003c4e <__sflush_r+0x36>
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0c3      	beq.n	8003c4e <__sflush_r+0x36>
 8003cc6:	2b1d      	cmp	r3, #29
 8003cc8:	d001      	beq.n	8003cce <__sflush_r+0xb6>
 8003cca:	2b16      	cmp	r3, #22
 8003ccc:	d11a      	bne.n	8003d04 <__sflush_r+0xec>
 8003cce:	602e      	str	r6, [r5, #0]
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	e01e      	b.n	8003d12 <__sflush_r+0xfa>
 8003cd4:	690e      	ldr	r6, [r1, #16]
 8003cd6:	2e00      	cmp	r6, #0
 8003cd8:	d0fa      	beq.n	8003cd0 <__sflush_r+0xb8>
 8003cda:	680f      	ldr	r7, [r1, #0]
 8003cdc:	600e      	str	r6, [r1, #0]
 8003cde:	1bba      	subs	r2, r7, r6
 8003ce0:	9201      	str	r2, [sp, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	079b      	lsls	r3, r3, #30
 8003ce6:	d100      	bne.n	8003cea <__sflush_r+0xd2>
 8003ce8:	694a      	ldr	r2, [r1, #20]
 8003cea:	60a2      	str	r2, [r4, #8]
 8003cec:	9b01      	ldr	r3, [sp, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	ddee      	ble.n	8003cd0 <__sflush_r+0xb8>
 8003cf2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003cf4:	0032      	movs	r2, r6
 8003cf6:	001f      	movs	r7, r3
 8003cf8:	0028      	movs	r0, r5
 8003cfa:	9b01      	ldr	r3, [sp, #4]
 8003cfc:	6a21      	ldr	r1, [r4, #32]
 8003cfe:	47b8      	blx	r7
 8003d00:	2800      	cmp	r0, #0
 8003d02:	dc07      	bgt.n	8003d14 <__sflush_r+0xfc>
 8003d04:	89a2      	ldrh	r2, [r4, #12]
 8003d06:	2340      	movs	r3, #64	@ 0x40
 8003d08:	2001      	movs	r0, #1
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	b21b      	sxth	r3, r3
 8003d0e:	81a3      	strh	r3, [r4, #12]
 8003d10:	4240      	negs	r0, r0
 8003d12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d14:	9b01      	ldr	r3, [sp, #4]
 8003d16:	1836      	adds	r6, r6, r0
 8003d18:	1a1b      	subs	r3, r3, r0
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	e7e6      	b.n	8003cec <__sflush_r+0xd4>
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	dfbffffe 	.word	0xdfbffffe

08003d24 <_fflush_r>:
 8003d24:	690b      	ldr	r3, [r1, #16]
 8003d26:	b570      	push	{r4, r5, r6, lr}
 8003d28:	0005      	movs	r5, r0
 8003d2a:	000c      	movs	r4, r1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d102      	bne.n	8003d36 <_fflush_r+0x12>
 8003d30:	2500      	movs	r5, #0
 8003d32:	0028      	movs	r0, r5
 8003d34:	bd70      	pop	{r4, r5, r6, pc}
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d004      	beq.n	8003d44 <_fflush_r+0x20>
 8003d3a:	6a03      	ldr	r3, [r0, #32]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <_fflush_r+0x20>
 8003d40:	f7ff fd42 	bl	80037c8 <__sinit>
 8003d44:	220c      	movs	r2, #12
 8003d46:	5ea3      	ldrsh	r3, [r4, r2]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f1      	beq.n	8003d30 <_fflush_r+0xc>
 8003d4c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d4e:	07d2      	lsls	r2, r2, #31
 8003d50:	d404      	bmi.n	8003d5c <_fflush_r+0x38>
 8003d52:	059b      	lsls	r3, r3, #22
 8003d54:	d402      	bmi.n	8003d5c <_fflush_r+0x38>
 8003d56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d58:	f7ff fe37 	bl	80039ca <__retarget_lock_acquire_recursive>
 8003d5c:	0028      	movs	r0, r5
 8003d5e:	0021      	movs	r1, r4
 8003d60:	f7ff ff5a 	bl	8003c18 <__sflush_r>
 8003d64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d66:	0005      	movs	r5, r0
 8003d68:	07db      	lsls	r3, r3, #31
 8003d6a:	d4e2      	bmi.n	8003d32 <_fflush_r+0xe>
 8003d6c:	89a3      	ldrh	r3, [r4, #12]
 8003d6e:	059b      	lsls	r3, r3, #22
 8003d70:	d4df      	bmi.n	8003d32 <_fflush_r+0xe>
 8003d72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d74:	f7ff fe2a 	bl	80039cc <__retarget_lock_release_recursive>
 8003d78:	e7db      	b.n	8003d32 <_fflush_r+0xe>
	...

08003d7c <fiprintf>:
 8003d7c:	b40e      	push	{r1, r2, r3}
 8003d7e:	b517      	push	{r0, r1, r2, r4, lr}
 8003d80:	4c05      	ldr	r4, [pc, #20]	@ (8003d98 <fiprintf+0x1c>)
 8003d82:	ab05      	add	r3, sp, #20
 8003d84:	cb04      	ldmia	r3!, {r2}
 8003d86:	0001      	movs	r1, r0
 8003d88:	6820      	ldr	r0, [r4, #0]
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	f000 f846 	bl	8003e1c <_vfiprintf_r>
 8003d90:	bc1e      	pop	{r1, r2, r3, r4}
 8003d92:	bc08      	pop	{r3}
 8003d94:	b003      	add	sp, #12
 8003d96:	4718      	bx	r3
 8003d98:	20000030 	.word	0x20000030

08003d9c <_sbrk_r>:
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	b570      	push	{r4, r5, r6, lr}
 8003da0:	4d06      	ldr	r5, [pc, #24]	@ (8003dbc <_sbrk_r+0x20>)
 8003da2:	0004      	movs	r4, r0
 8003da4:	0008      	movs	r0, r1
 8003da6:	602b      	str	r3, [r5, #0]
 8003da8:	f7fd fb90 	bl	80014cc <_sbrk>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d103      	bne.n	8003db8 <_sbrk_r+0x1c>
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d000      	beq.n	8003db8 <_sbrk_r+0x1c>
 8003db6:	6023      	str	r3, [r4, #0]
 8003db8:	bd70      	pop	{r4, r5, r6, pc}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	20000304 	.word	0x20000304

08003dc0 <abort>:
 8003dc0:	2006      	movs	r0, #6
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	f000 fb8e 	bl	80044e4 <raise>
 8003dc8:	2001      	movs	r0, #1
 8003dca:	f7fd fb0d 	bl	80013e8 <_exit>

08003dce <__sfputc_r>:
 8003dce:	6893      	ldr	r3, [r2, #8]
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	6093      	str	r3, [r2, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da04      	bge.n	8003de4 <__sfputc_r+0x16>
 8003dda:	6994      	ldr	r4, [r2, #24]
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	db07      	blt.n	8003df0 <__sfputc_r+0x22>
 8003de0:	290a      	cmp	r1, #10
 8003de2:	d005      	beq.n	8003df0 <__sfputc_r+0x22>
 8003de4:	6813      	ldr	r3, [r2, #0]
 8003de6:	1c58      	adds	r0, r3, #1
 8003de8:	6010      	str	r0, [r2, #0]
 8003dea:	7019      	strb	r1, [r3, #0]
 8003dec:	0008      	movs	r0, r1
 8003dee:	bd10      	pop	{r4, pc}
 8003df0:	f000 faae 	bl	8004350 <__swbuf_r>
 8003df4:	0001      	movs	r1, r0
 8003df6:	e7f9      	b.n	8003dec <__sfputc_r+0x1e>

08003df8 <__sfputs_r>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	0006      	movs	r6, r0
 8003dfc:	000f      	movs	r7, r1
 8003dfe:	0014      	movs	r4, r2
 8003e00:	18d5      	adds	r5, r2, r3
 8003e02:	42ac      	cmp	r4, r5
 8003e04:	d101      	bne.n	8003e0a <__sfputs_r+0x12>
 8003e06:	2000      	movs	r0, #0
 8003e08:	e007      	b.n	8003e1a <__sfputs_r+0x22>
 8003e0a:	7821      	ldrb	r1, [r4, #0]
 8003e0c:	003a      	movs	r2, r7
 8003e0e:	0030      	movs	r0, r6
 8003e10:	f7ff ffdd 	bl	8003dce <__sfputc_r>
 8003e14:	3401      	adds	r4, #1
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	d1f3      	bne.n	8003e02 <__sfputs_r+0xa>
 8003e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e1c <_vfiprintf_r>:
 8003e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e1e:	b0a1      	sub	sp, #132	@ 0x84
 8003e20:	000f      	movs	r7, r1
 8003e22:	0015      	movs	r5, r2
 8003e24:	001e      	movs	r6, r3
 8003e26:	9003      	str	r0, [sp, #12]
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d004      	beq.n	8003e36 <_vfiprintf_r+0x1a>
 8003e2c:	6a03      	ldr	r3, [r0, #32]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <_vfiprintf_r+0x1a>
 8003e32:	f7ff fcc9 	bl	80037c8 <__sinit>
 8003e36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e38:	07db      	lsls	r3, r3, #31
 8003e3a:	d405      	bmi.n	8003e48 <_vfiprintf_r+0x2c>
 8003e3c:	89bb      	ldrh	r3, [r7, #12]
 8003e3e:	059b      	lsls	r3, r3, #22
 8003e40:	d402      	bmi.n	8003e48 <_vfiprintf_r+0x2c>
 8003e42:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003e44:	f7ff fdc1 	bl	80039ca <__retarget_lock_acquire_recursive>
 8003e48:	89bb      	ldrh	r3, [r7, #12]
 8003e4a:	071b      	lsls	r3, r3, #28
 8003e4c:	d502      	bpl.n	8003e54 <_vfiprintf_r+0x38>
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d113      	bne.n	8003e7c <_vfiprintf_r+0x60>
 8003e54:	0039      	movs	r1, r7
 8003e56:	9803      	ldr	r0, [sp, #12]
 8003e58:	f000 fabc 	bl	80043d4 <__swsetup_r>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d00d      	beq.n	8003e7c <_vfiprintf_r+0x60>
 8003e60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e62:	07db      	lsls	r3, r3, #31
 8003e64:	d503      	bpl.n	8003e6e <_vfiprintf_r+0x52>
 8003e66:	2001      	movs	r0, #1
 8003e68:	4240      	negs	r0, r0
 8003e6a:	b021      	add	sp, #132	@ 0x84
 8003e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e6e:	89bb      	ldrh	r3, [r7, #12]
 8003e70:	059b      	lsls	r3, r3, #22
 8003e72:	d4f8      	bmi.n	8003e66 <_vfiprintf_r+0x4a>
 8003e74:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003e76:	f7ff fda9 	bl	80039cc <__retarget_lock_release_recursive>
 8003e7a:	e7f4      	b.n	8003e66 <_vfiprintf_r+0x4a>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	ac08      	add	r4, sp, #32
 8003e80:	6163      	str	r3, [r4, #20]
 8003e82:	3320      	adds	r3, #32
 8003e84:	7663      	strb	r3, [r4, #25]
 8003e86:	3310      	adds	r3, #16
 8003e88:	76a3      	strb	r3, [r4, #26]
 8003e8a:	9607      	str	r6, [sp, #28]
 8003e8c:	002e      	movs	r6, r5
 8003e8e:	7833      	ldrb	r3, [r6, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <_vfiprintf_r+0x7c>
 8003e94:	2b25      	cmp	r3, #37	@ 0x25
 8003e96:	d148      	bne.n	8003f2a <_vfiprintf_r+0x10e>
 8003e98:	1b73      	subs	r3, r6, r5
 8003e9a:	9305      	str	r3, [sp, #20]
 8003e9c:	42ae      	cmp	r6, r5
 8003e9e:	d00b      	beq.n	8003eb8 <_vfiprintf_r+0x9c>
 8003ea0:	002a      	movs	r2, r5
 8003ea2:	0039      	movs	r1, r7
 8003ea4:	9803      	ldr	r0, [sp, #12]
 8003ea6:	f7ff ffa7 	bl	8003df8 <__sfputs_r>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d100      	bne.n	8003eb0 <_vfiprintf_r+0x94>
 8003eae:	e0ae      	b.n	800400e <_vfiprintf_r+0x1f2>
 8003eb0:	6963      	ldr	r3, [r4, #20]
 8003eb2:	9a05      	ldr	r2, [sp, #20]
 8003eb4:	189b      	adds	r3, r3, r2
 8003eb6:	6163      	str	r3, [r4, #20]
 8003eb8:	7833      	ldrb	r3, [r6, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d100      	bne.n	8003ec0 <_vfiprintf_r+0xa4>
 8003ebe:	e0a6      	b.n	800400e <_vfiprintf_r+0x1f2>
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	4252      	negs	r2, r2
 8003ec6:	6062      	str	r2, [r4, #4]
 8003ec8:	a904      	add	r1, sp, #16
 8003eca:	3254      	adds	r2, #84	@ 0x54
 8003ecc:	1852      	adds	r2, r2, r1
 8003ece:	1c75      	adds	r5, r6, #1
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	60e3      	str	r3, [r4, #12]
 8003ed4:	60a3      	str	r3, [r4, #8]
 8003ed6:	7013      	strb	r3, [r2, #0]
 8003ed8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003eda:	4b59      	ldr	r3, [pc, #356]	@ (8004040 <_vfiprintf_r+0x224>)
 8003edc:	2205      	movs	r2, #5
 8003ede:	0018      	movs	r0, r3
 8003ee0:	7829      	ldrb	r1, [r5, #0]
 8003ee2:	9305      	str	r3, [sp, #20]
 8003ee4:	f000 fb1e 	bl	8004524 <memchr>
 8003ee8:	1c6e      	adds	r6, r5, #1
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d11f      	bne.n	8003f2e <_vfiprintf_r+0x112>
 8003eee:	6822      	ldr	r2, [r4, #0]
 8003ef0:	06d3      	lsls	r3, r2, #27
 8003ef2:	d504      	bpl.n	8003efe <_vfiprintf_r+0xe2>
 8003ef4:	2353      	movs	r3, #83	@ 0x53
 8003ef6:	a904      	add	r1, sp, #16
 8003ef8:	185b      	adds	r3, r3, r1
 8003efa:	2120      	movs	r1, #32
 8003efc:	7019      	strb	r1, [r3, #0]
 8003efe:	0713      	lsls	r3, r2, #28
 8003f00:	d504      	bpl.n	8003f0c <_vfiprintf_r+0xf0>
 8003f02:	2353      	movs	r3, #83	@ 0x53
 8003f04:	a904      	add	r1, sp, #16
 8003f06:	185b      	adds	r3, r3, r1
 8003f08:	212b      	movs	r1, #43	@ 0x2b
 8003f0a:	7019      	strb	r1, [r3, #0]
 8003f0c:	782b      	ldrb	r3, [r5, #0]
 8003f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f10:	d016      	beq.n	8003f40 <_vfiprintf_r+0x124>
 8003f12:	002e      	movs	r6, r5
 8003f14:	2100      	movs	r1, #0
 8003f16:	200a      	movs	r0, #10
 8003f18:	68e3      	ldr	r3, [r4, #12]
 8003f1a:	7832      	ldrb	r2, [r6, #0]
 8003f1c:	1c75      	adds	r5, r6, #1
 8003f1e:	3a30      	subs	r2, #48	@ 0x30
 8003f20:	2a09      	cmp	r2, #9
 8003f22:	d950      	bls.n	8003fc6 <_vfiprintf_r+0x1aa>
 8003f24:	2900      	cmp	r1, #0
 8003f26:	d111      	bne.n	8003f4c <_vfiprintf_r+0x130>
 8003f28:	e017      	b.n	8003f5a <_vfiprintf_r+0x13e>
 8003f2a:	3601      	adds	r6, #1
 8003f2c:	e7af      	b.n	8003e8e <_vfiprintf_r+0x72>
 8003f2e:	9b05      	ldr	r3, [sp, #20]
 8003f30:	6822      	ldr	r2, [r4, #0]
 8003f32:	1ac0      	subs	r0, r0, r3
 8003f34:	2301      	movs	r3, #1
 8003f36:	4083      	lsls	r3, r0
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	0035      	movs	r5, r6
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	e7cc      	b.n	8003eda <_vfiprintf_r+0xbe>
 8003f40:	9b07      	ldr	r3, [sp, #28]
 8003f42:	1d19      	adds	r1, r3, #4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	9107      	str	r1, [sp, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	db01      	blt.n	8003f50 <_vfiprintf_r+0x134>
 8003f4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f4e:	e004      	b.n	8003f5a <_vfiprintf_r+0x13e>
 8003f50:	425b      	negs	r3, r3
 8003f52:	60e3      	str	r3, [r4, #12]
 8003f54:	2302      	movs	r3, #2
 8003f56:	4313      	orrs	r3, r2
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	7833      	ldrb	r3, [r6, #0]
 8003f5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f5e:	d10c      	bne.n	8003f7a <_vfiprintf_r+0x15e>
 8003f60:	7873      	ldrb	r3, [r6, #1]
 8003f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f64:	d134      	bne.n	8003fd0 <_vfiprintf_r+0x1b4>
 8003f66:	9b07      	ldr	r3, [sp, #28]
 8003f68:	3602      	adds	r6, #2
 8003f6a:	1d1a      	adds	r2, r3, #4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	9207      	str	r2, [sp, #28]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	da01      	bge.n	8003f78 <_vfiprintf_r+0x15c>
 8003f74:	2301      	movs	r3, #1
 8003f76:	425b      	negs	r3, r3
 8003f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f7a:	4d32      	ldr	r5, [pc, #200]	@ (8004044 <_vfiprintf_r+0x228>)
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	0028      	movs	r0, r5
 8003f80:	7831      	ldrb	r1, [r6, #0]
 8003f82:	f000 facf 	bl	8004524 <memchr>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d006      	beq.n	8003f98 <_vfiprintf_r+0x17c>
 8003f8a:	2340      	movs	r3, #64	@ 0x40
 8003f8c:	1b40      	subs	r0, r0, r5
 8003f8e:	4083      	lsls	r3, r0
 8003f90:	6822      	ldr	r2, [r4, #0]
 8003f92:	3601      	adds	r6, #1
 8003f94:	4313      	orrs	r3, r2
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	7831      	ldrb	r1, [r6, #0]
 8003f9a:	2206      	movs	r2, #6
 8003f9c:	482a      	ldr	r0, [pc, #168]	@ (8004048 <_vfiprintf_r+0x22c>)
 8003f9e:	1c75      	adds	r5, r6, #1
 8003fa0:	7621      	strb	r1, [r4, #24]
 8003fa2:	f000 fabf 	bl	8004524 <memchr>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d040      	beq.n	800402c <_vfiprintf_r+0x210>
 8003faa:	4b28      	ldr	r3, [pc, #160]	@ (800404c <_vfiprintf_r+0x230>)
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d122      	bne.n	8003ff6 <_vfiprintf_r+0x1da>
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	9b07      	ldr	r3, [sp, #28]
 8003fb4:	3307      	adds	r3, #7
 8003fb6:	4393      	bics	r3, r2
 8003fb8:	3308      	adds	r3, #8
 8003fba:	9307      	str	r3, [sp, #28]
 8003fbc:	6963      	ldr	r3, [r4, #20]
 8003fbe:	9a04      	ldr	r2, [sp, #16]
 8003fc0:	189b      	adds	r3, r3, r2
 8003fc2:	6163      	str	r3, [r4, #20]
 8003fc4:	e762      	b.n	8003e8c <_vfiprintf_r+0x70>
 8003fc6:	4343      	muls	r3, r0
 8003fc8:	002e      	movs	r6, r5
 8003fca:	2101      	movs	r1, #1
 8003fcc:	189b      	adds	r3, r3, r2
 8003fce:	e7a4      	b.n	8003f1a <_vfiprintf_r+0xfe>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	200a      	movs	r0, #10
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	3601      	adds	r6, #1
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	7832      	ldrb	r2, [r6, #0]
 8003fdc:	1c75      	adds	r5, r6, #1
 8003fde:	3a30      	subs	r2, #48	@ 0x30
 8003fe0:	2a09      	cmp	r2, #9
 8003fe2:	d903      	bls.n	8003fec <_vfiprintf_r+0x1d0>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0c8      	beq.n	8003f7a <_vfiprintf_r+0x15e>
 8003fe8:	9109      	str	r1, [sp, #36]	@ 0x24
 8003fea:	e7c6      	b.n	8003f7a <_vfiprintf_r+0x15e>
 8003fec:	4341      	muls	r1, r0
 8003fee:	002e      	movs	r6, r5
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	1889      	adds	r1, r1, r2
 8003ff4:	e7f1      	b.n	8003fda <_vfiprintf_r+0x1be>
 8003ff6:	aa07      	add	r2, sp, #28
 8003ff8:	9200      	str	r2, [sp, #0]
 8003ffa:	0021      	movs	r1, r4
 8003ffc:	003a      	movs	r2, r7
 8003ffe:	4b14      	ldr	r3, [pc, #80]	@ (8004050 <_vfiprintf_r+0x234>)
 8004000:	9803      	ldr	r0, [sp, #12]
 8004002:	e000      	b.n	8004006 <_vfiprintf_r+0x1ea>
 8004004:	bf00      	nop
 8004006:	9004      	str	r0, [sp, #16]
 8004008:	9b04      	ldr	r3, [sp, #16]
 800400a:	3301      	adds	r3, #1
 800400c:	d1d6      	bne.n	8003fbc <_vfiprintf_r+0x1a0>
 800400e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004010:	07db      	lsls	r3, r3, #31
 8004012:	d405      	bmi.n	8004020 <_vfiprintf_r+0x204>
 8004014:	89bb      	ldrh	r3, [r7, #12]
 8004016:	059b      	lsls	r3, r3, #22
 8004018:	d402      	bmi.n	8004020 <_vfiprintf_r+0x204>
 800401a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800401c:	f7ff fcd6 	bl	80039cc <__retarget_lock_release_recursive>
 8004020:	89bb      	ldrh	r3, [r7, #12]
 8004022:	065b      	lsls	r3, r3, #25
 8004024:	d500      	bpl.n	8004028 <_vfiprintf_r+0x20c>
 8004026:	e71e      	b.n	8003e66 <_vfiprintf_r+0x4a>
 8004028:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800402a:	e71e      	b.n	8003e6a <_vfiprintf_r+0x4e>
 800402c:	aa07      	add	r2, sp, #28
 800402e:	9200      	str	r2, [sp, #0]
 8004030:	0021      	movs	r1, r4
 8004032:	003a      	movs	r2, r7
 8004034:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <_vfiprintf_r+0x234>)
 8004036:	9803      	ldr	r0, [sp, #12]
 8004038:	f000 f87c 	bl	8004134 <_printf_i>
 800403c:	e7e3      	b.n	8004006 <_vfiprintf_r+0x1ea>
 800403e:	46c0      	nop			@ (mov r8, r8)
 8004040:	08004757 	.word	0x08004757
 8004044:	0800475d 	.word	0x0800475d
 8004048:	08004761 	.word	0x08004761
 800404c:	00000000 	.word	0x00000000
 8004050:	08003df9 	.word	0x08003df9

08004054 <_printf_common>:
 8004054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004056:	0016      	movs	r6, r2
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	688a      	ldr	r2, [r1, #8]
 800405c:	690b      	ldr	r3, [r1, #16]
 800405e:	000c      	movs	r4, r1
 8004060:	9000      	str	r0, [sp, #0]
 8004062:	4293      	cmp	r3, r2
 8004064:	da00      	bge.n	8004068 <_printf_common+0x14>
 8004066:	0013      	movs	r3, r2
 8004068:	0022      	movs	r2, r4
 800406a:	6033      	str	r3, [r6, #0]
 800406c:	3243      	adds	r2, #67	@ 0x43
 800406e:	7812      	ldrb	r2, [r2, #0]
 8004070:	2a00      	cmp	r2, #0
 8004072:	d001      	beq.n	8004078 <_printf_common+0x24>
 8004074:	3301      	adds	r3, #1
 8004076:	6033      	str	r3, [r6, #0]
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	069b      	lsls	r3, r3, #26
 800407c:	d502      	bpl.n	8004084 <_printf_common+0x30>
 800407e:	6833      	ldr	r3, [r6, #0]
 8004080:	3302      	adds	r3, #2
 8004082:	6033      	str	r3, [r6, #0]
 8004084:	6822      	ldr	r2, [r4, #0]
 8004086:	2306      	movs	r3, #6
 8004088:	0015      	movs	r5, r2
 800408a:	401d      	ands	r5, r3
 800408c:	421a      	tst	r2, r3
 800408e:	d027      	beq.n	80040e0 <_printf_common+0x8c>
 8004090:	0023      	movs	r3, r4
 8004092:	3343      	adds	r3, #67	@ 0x43
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	1e5a      	subs	r2, r3, #1
 8004098:	4193      	sbcs	r3, r2
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	0692      	lsls	r2, r2, #26
 800409e:	d430      	bmi.n	8004102 <_printf_common+0xae>
 80040a0:	0022      	movs	r2, r4
 80040a2:	9901      	ldr	r1, [sp, #4]
 80040a4:	9800      	ldr	r0, [sp, #0]
 80040a6:	9d08      	ldr	r5, [sp, #32]
 80040a8:	3243      	adds	r2, #67	@ 0x43
 80040aa:	47a8      	blx	r5
 80040ac:	3001      	adds	r0, #1
 80040ae:	d025      	beq.n	80040fc <_printf_common+0xa8>
 80040b0:	2206      	movs	r2, #6
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	2500      	movs	r5, #0
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d105      	bne.n	80040c8 <_printf_common+0x74>
 80040bc:	6833      	ldr	r3, [r6, #0]
 80040be:	68e5      	ldr	r5, [r4, #12]
 80040c0:	1aed      	subs	r5, r5, r3
 80040c2:	43eb      	mvns	r3, r5
 80040c4:	17db      	asrs	r3, r3, #31
 80040c6:	401d      	ands	r5, r3
 80040c8:	68a3      	ldr	r3, [r4, #8]
 80040ca:	6922      	ldr	r2, [r4, #16]
 80040cc:	4293      	cmp	r3, r2
 80040ce:	dd01      	ble.n	80040d4 <_printf_common+0x80>
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	18ed      	adds	r5, r5, r3
 80040d4:	2600      	movs	r6, #0
 80040d6:	42b5      	cmp	r5, r6
 80040d8:	d120      	bne.n	800411c <_printf_common+0xc8>
 80040da:	2000      	movs	r0, #0
 80040dc:	e010      	b.n	8004100 <_printf_common+0xac>
 80040de:	3501      	adds	r5, #1
 80040e0:	68e3      	ldr	r3, [r4, #12]
 80040e2:	6832      	ldr	r2, [r6, #0]
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	42ab      	cmp	r3, r5
 80040e8:	ddd2      	ble.n	8004090 <_printf_common+0x3c>
 80040ea:	0022      	movs	r2, r4
 80040ec:	2301      	movs	r3, #1
 80040ee:	9901      	ldr	r1, [sp, #4]
 80040f0:	9800      	ldr	r0, [sp, #0]
 80040f2:	9f08      	ldr	r7, [sp, #32]
 80040f4:	3219      	adds	r2, #25
 80040f6:	47b8      	blx	r7
 80040f8:	3001      	adds	r0, #1
 80040fa:	d1f0      	bne.n	80040de <_printf_common+0x8a>
 80040fc:	2001      	movs	r0, #1
 80040fe:	4240      	negs	r0, r0
 8004100:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004102:	2030      	movs	r0, #48	@ 0x30
 8004104:	18e1      	adds	r1, r4, r3
 8004106:	3143      	adds	r1, #67	@ 0x43
 8004108:	7008      	strb	r0, [r1, #0]
 800410a:	0021      	movs	r1, r4
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	3145      	adds	r1, #69	@ 0x45
 8004110:	7809      	ldrb	r1, [r1, #0]
 8004112:	18a2      	adds	r2, r4, r2
 8004114:	3243      	adds	r2, #67	@ 0x43
 8004116:	3302      	adds	r3, #2
 8004118:	7011      	strb	r1, [r2, #0]
 800411a:	e7c1      	b.n	80040a0 <_printf_common+0x4c>
 800411c:	0022      	movs	r2, r4
 800411e:	2301      	movs	r3, #1
 8004120:	9901      	ldr	r1, [sp, #4]
 8004122:	9800      	ldr	r0, [sp, #0]
 8004124:	9f08      	ldr	r7, [sp, #32]
 8004126:	321a      	adds	r2, #26
 8004128:	47b8      	blx	r7
 800412a:	3001      	adds	r0, #1
 800412c:	d0e6      	beq.n	80040fc <_printf_common+0xa8>
 800412e:	3601      	adds	r6, #1
 8004130:	e7d1      	b.n	80040d6 <_printf_common+0x82>
	...

08004134 <_printf_i>:
 8004134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004136:	b08b      	sub	sp, #44	@ 0x2c
 8004138:	9206      	str	r2, [sp, #24]
 800413a:	000a      	movs	r2, r1
 800413c:	3243      	adds	r2, #67	@ 0x43
 800413e:	9307      	str	r3, [sp, #28]
 8004140:	9005      	str	r0, [sp, #20]
 8004142:	9203      	str	r2, [sp, #12]
 8004144:	7e0a      	ldrb	r2, [r1, #24]
 8004146:	000c      	movs	r4, r1
 8004148:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800414a:	2a78      	cmp	r2, #120	@ 0x78
 800414c:	d809      	bhi.n	8004162 <_printf_i+0x2e>
 800414e:	2a62      	cmp	r2, #98	@ 0x62
 8004150:	d80b      	bhi.n	800416a <_printf_i+0x36>
 8004152:	2a00      	cmp	r2, #0
 8004154:	d100      	bne.n	8004158 <_printf_i+0x24>
 8004156:	e0bc      	b.n	80042d2 <_printf_i+0x19e>
 8004158:	497b      	ldr	r1, [pc, #492]	@ (8004348 <_printf_i+0x214>)
 800415a:	9104      	str	r1, [sp, #16]
 800415c:	2a58      	cmp	r2, #88	@ 0x58
 800415e:	d100      	bne.n	8004162 <_printf_i+0x2e>
 8004160:	e090      	b.n	8004284 <_printf_i+0x150>
 8004162:	0025      	movs	r5, r4
 8004164:	3542      	adds	r5, #66	@ 0x42
 8004166:	702a      	strb	r2, [r5, #0]
 8004168:	e022      	b.n	80041b0 <_printf_i+0x7c>
 800416a:	0010      	movs	r0, r2
 800416c:	3863      	subs	r0, #99	@ 0x63
 800416e:	2815      	cmp	r0, #21
 8004170:	d8f7      	bhi.n	8004162 <_printf_i+0x2e>
 8004172:	f7fb ffc9 	bl	8000108 <__gnu_thumb1_case_shi>
 8004176:	0016      	.short	0x0016
 8004178:	fff6001f 	.word	0xfff6001f
 800417c:	fff6fff6 	.word	0xfff6fff6
 8004180:	001ffff6 	.word	0x001ffff6
 8004184:	fff6fff6 	.word	0xfff6fff6
 8004188:	fff6fff6 	.word	0xfff6fff6
 800418c:	003600a1 	.word	0x003600a1
 8004190:	fff60080 	.word	0xfff60080
 8004194:	00b2fff6 	.word	0x00b2fff6
 8004198:	0036fff6 	.word	0x0036fff6
 800419c:	fff6fff6 	.word	0xfff6fff6
 80041a0:	0084      	.short	0x0084
 80041a2:	0025      	movs	r5, r4
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	3542      	adds	r5, #66	@ 0x42
 80041a8:	1d11      	adds	r1, r2, #4
 80041aa:	6019      	str	r1, [r3, #0]
 80041ac:	6813      	ldr	r3, [r2, #0]
 80041ae:	702b      	strb	r3, [r5, #0]
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0a0      	b.n	80042f6 <_printf_i+0x1c2>
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	6809      	ldr	r1, [r1, #0]
 80041b8:	1d02      	adds	r2, r0, #4
 80041ba:	060d      	lsls	r5, r1, #24
 80041bc:	d50b      	bpl.n	80041d6 <_printf_i+0xa2>
 80041be:	6806      	ldr	r6, [r0, #0]
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	2e00      	cmp	r6, #0
 80041c4:	da03      	bge.n	80041ce <_printf_i+0x9a>
 80041c6:	232d      	movs	r3, #45	@ 0x2d
 80041c8:	9a03      	ldr	r2, [sp, #12]
 80041ca:	4276      	negs	r6, r6
 80041cc:	7013      	strb	r3, [r2, #0]
 80041ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004348 <_printf_i+0x214>)
 80041d0:	270a      	movs	r7, #10
 80041d2:	9304      	str	r3, [sp, #16]
 80041d4:	e018      	b.n	8004208 <_printf_i+0xd4>
 80041d6:	6806      	ldr	r6, [r0, #0]
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	0649      	lsls	r1, r1, #25
 80041dc:	d5f1      	bpl.n	80041c2 <_printf_i+0x8e>
 80041de:	b236      	sxth	r6, r6
 80041e0:	e7ef      	b.n	80041c2 <_printf_i+0x8e>
 80041e2:	6808      	ldr	r0, [r1, #0]
 80041e4:	6819      	ldr	r1, [r3, #0]
 80041e6:	c940      	ldmia	r1!, {r6}
 80041e8:	0605      	lsls	r5, r0, #24
 80041ea:	d402      	bmi.n	80041f2 <_printf_i+0xbe>
 80041ec:	0640      	lsls	r0, r0, #25
 80041ee:	d500      	bpl.n	80041f2 <_printf_i+0xbe>
 80041f0:	b2b6      	uxth	r6, r6
 80041f2:	6019      	str	r1, [r3, #0]
 80041f4:	4b54      	ldr	r3, [pc, #336]	@ (8004348 <_printf_i+0x214>)
 80041f6:	270a      	movs	r7, #10
 80041f8:	9304      	str	r3, [sp, #16]
 80041fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80041fc:	d100      	bne.n	8004200 <_printf_i+0xcc>
 80041fe:	3f02      	subs	r7, #2
 8004200:	0023      	movs	r3, r4
 8004202:	2200      	movs	r2, #0
 8004204:	3343      	adds	r3, #67	@ 0x43
 8004206:	701a      	strb	r2, [r3, #0]
 8004208:	6863      	ldr	r3, [r4, #4]
 800420a:	60a3      	str	r3, [r4, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	db03      	blt.n	8004218 <_printf_i+0xe4>
 8004210:	2104      	movs	r1, #4
 8004212:	6822      	ldr	r2, [r4, #0]
 8004214:	438a      	bics	r2, r1
 8004216:	6022      	str	r2, [r4, #0]
 8004218:	2e00      	cmp	r6, #0
 800421a:	d102      	bne.n	8004222 <_printf_i+0xee>
 800421c:	9d03      	ldr	r5, [sp, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00c      	beq.n	800423c <_printf_i+0x108>
 8004222:	9d03      	ldr	r5, [sp, #12]
 8004224:	0030      	movs	r0, r6
 8004226:	0039      	movs	r1, r7
 8004228:	f7fb fffe 	bl	8000228 <__aeabi_uidivmod>
 800422c:	9b04      	ldr	r3, [sp, #16]
 800422e:	3d01      	subs	r5, #1
 8004230:	5c5b      	ldrb	r3, [r3, r1]
 8004232:	702b      	strb	r3, [r5, #0]
 8004234:	0033      	movs	r3, r6
 8004236:	0006      	movs	r6, r0
 8004238:	429f      	cmp	r7, r3
 800423a:	d9f3      	bls.n	8004224 <_printf_i+0xf0>
 800423c:	2f08      	cmp	r7, #8
 800423e:	d109      	bne.n	8004254 <_printf_i+0x120>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	07db      	lsls	r3, r3, #31
 8004244:	d506      	bpl.n	8004254 <_printf_i+0x120>
 8004246:	6862      	ldr	r2, [r4, #4]
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	429a      	cmp	r2, r3
 800424c:	dc02      	bgt.n	8004254 <_printf_i+0x120>
 800424e:	2330      	movs	r3, #48	@ 0x30
 8004250:	3d01      	subs	r5, #1
 8004252:	702b      	strb	r3, [r5, #0]
 8004254:	9b03      	ldr	r3, [sp, #12]
 8004256:	1b5b      	subs	r3, r3, r5
 8004258:	6123      	str	r3, [r4, #16]
 800425a:	9b07      	ldr	r3, [sp, #28]
 800425c:	0021      	movs	r1, r4
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	9805      	ldr	r0, [sp, #20]
 8004262:	9b06      	ldr	r3, [sp, #24]
 8004264:	aa09      	add	r2, sp, #36	@ 0x24
 8004266:	f7ff fef5 	bl	8004054 <_printf_common>
 800426a:	3001      	adds	r0, #1
 800426c:	d148      	bne.n	8004300 <_printf_i+0x1cc>
 800426e:	2001      	movs	r0, #1
 8004270:	4240      	negs	r0, r0
 8004272:	b00b      	add	sp, #44	@ 0x2c
 8004274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004276:	2220      	movs	r2, #32
 8004278:	6809      	ldr	r1, [r1, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	6022      	str	r2, [r4, #0]
 800427e:	2278      	movs	r2, #120	@ 0x78
 8004280:	4932      	ldr	r1, [pc, #200]	@ (800434c <_printf_i+0x218>)
 8004282:	9104      	str	r1, [sp, #16]
 8004284:	0021      	movs	r1, r4
 8004286:	3145      	adds	r1, #69	@ 0x45
 8004288:	700a      	strb	r2, [r1, #0]
 800428a:	6819      	ldr	r1, [r3, #0]
 800428c:	6822      	ldr	r2, [r4, #0]
 800428e:	c940      	ldmia	r1!, {r6}
 8004290:	0610      	lsls	r0, r2, #24
 8004292:	d402      	bmi.n	800429a <_printf_i+0x166>
 8004294:	0650      	lsls	r0, r2, #25
 8004296:	d500      	bpl.n	800429a <_printf_i+0x166>
 8004298:	b2b6      	uxth	r6, r6
 800429a:	6019      	str	r1, [r3, #0]
 800429c:	07d3      	lsls	r3, r2, #31
 800429e:	d502      	bpl.n	80042a6 <_printf_i+0x172>
 80042a0:	2320      	movs	r3, #32
 80042a2:	4313      	orrs	r3, r2
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	2e00      	cmp	r6, #0
 80042a8:	d001      	beq.n	80042ae <_printf_i+0x17a>
 80042aa:	2710      	movs	r7, #16
 80042ac:	e7a8      	b.n	8004200 <_printf_i+0xcc>
 80042ae:	2220      	movs	r2, #32
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	4393      	bics	r3, r2
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	e7f8      	b.n	80042aa <_printf_i+0x176>
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	680d      	ldr	r5, [r1, #0]
 80042bc:	1d10      	adds	r0, r2, #4
 80042be:	6949      	ldr	r1, [r1, #20]
 80042c0:	6018      	str	r0, [r3, #0]
 80042c2:	6813      	ldr	r3, [r2, #0]
 80042c4:	062e      	lsls	r6, r5, #24
 80042c6:	d501      	bpl.n	80042cc <_printf_i+0x198>
 80042c8:	6019      	str	r1, [r3, #0]
 80042ca:	e002      	b.n	80042d2 <_printf_i+0x19e>
 80042cc:	066d      	lsls	r5, r5, #25
 80042ce:	d5fb      	bpl.n	80042c8 <_printf_i+0x194>
 80042d0:	8019      	strh	r1, [r3, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	9d03      	ldr	r5, [sp, #12]
 80042d6:	6123      	str	r3, [r4, #16]
 80042d8:	e7bf      	b.n	800425a <_printf_i+0x126>
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	1d11      	adds	r1, r2, #4
 80042de:	6019      	str	r1, [r3, #0]
 80042e0:	6815      	ldr	r5, [r2, #0]
 80042e2:	2100      	movs	r1, #0
 80042e4:	0028      	movs	r0, r5
 80042e6:	6862      	ldr	r2, [r4, #4]
 80042e8:	f000 f91c 	bl	8004524 <memchr>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d001      	beq.n	80042f4 <_printf_i+0x1c0>
 80042f0:	1b40      	subs	r0, r0, r5
 80042f2:	6060      	str	r0, [r4, #4]
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	2300      	movs	r3, #0
 80042fa:	9a03      	ldr	r2, [sp, #12]
 80042fc:	7013      	strb	r3, [r2, #0]
 80042fe:	e7ac      	b.n	800425a <_printf_i+0x126>
 8004300:	002a      	movs	r2, r5
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	9906      	ldr	r1, [sp, #24]
 8004306:	9805      	ldr	r0, [sp, #20]
 8004308:	9d07      	ldr	r5, [sp, #28]
 800430a:	47a8      	blx	r5
 800430c:	3001      	adds	r0, #1
 800430e:	d0ae      	beq.n	800426e <_printf_i+0x13a>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	079b      	lsls	r3, r3, #30
 8004314:	d415      	bmi.n	8004342 <_printf_i+0x20e>
 8004316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004318:	68e0      	ldr	r0, [r4, #12]
 800431a:	4298      	cmp	r0, r3
 800431c:	daa9      	bge.n	8004272 <_printf_i+0x13e>
 800431e:	0018      	movs	r0, r3
 8004320:	e7a7      	b.n	8004272 <_printf_i+0x13e>
 8004322:	0022      	movs	r2, r4
 8004324:	2301      	movs	r3, #1
 8004326:	9906      	ldr	r1, [sp, #24]
 8004328:	9805      	ldr	r0, [sp, #20]
 800432a:	9e07      	ldr	r6, [sp, #28]
 800432c:	3219      	adds	r2, #25
 800432e:	47b0      	blx	r6
 8004330:	3001      	adds	r0, #1
 8004332:	d09c      	beq.n	800426e <_printf_i+0x13a>
 8004334:	3501      	adds	r5, #1
 8004336:	68e3      	ldr	r3, [r4, #12]
 8004338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	42ab      	cmp	r3, r5
 800433e:	dcf0      	bgt.n	8004322 <_printf_i+0x1ee>
 8004340:	e7e9      	b.n	8004316 <_printf_i+0x1e2>
 8004342:	2500      	movs	r5, #0
 8004344:	e7f7      	b.n	8004336 <_printf_i+0x202>
 8004346:	46c0      	nop			@ (mov r8, r8)
 8004348:	08004768 	.word	0x08004768
 800434c:	08004779 	.word	0x08004779

08004350 <__swbuf_r>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	0006      	movs	r6, r0
 8004354:	000d      	movs	r5, r1
 8004356:	0014      	movs	r4, r2
 8004358:	2800      	cmp	r0, #0
 800435a:	d004      	beq.n	8004366 <__swbuf_r+0x16>
 800435c:	6a03      	ldr	r3, [r0, #32]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <__swbuf_r+0x16>
 8004362:	f7ff fa31 	bl	80037c8 <__sinit>
 8004366:	69a3      	ldr	r3, [r4, #24]
 8004368:	60a3      	str	r3, [r4, #8]
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	071b      	lsls	r3, r3, #28
 800436e:	d502      	bpl.n	8004376 <__swbuf_r+0x26>
 8004370:	6923      	ldr	r3, [r4, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <__swbuf_r+0x3a>
 8004376:	0021      	movs	r1, r4
 8004378:	0030      	movs	r0, r6
 800437a:	f000 f82b 	bl	80043d4 <__swsetup_r>
 800437e:	2800      	cmp	r0, #0
 8004380:	d003      	beq.n	800438a <__swbuf_r+0x3a>
 8004382:	2501      	movs	r5, #1
 8004384:	426d      	negs	r5, r5
 8004386:	0028      	movs	r0, r5
 8004388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	6820      	ldr	r0, [r4, #0]
 800438e:	b2ef      	uxtb	r7, r5
 8004390:	1ac0      	subs	r0, r0, r3
 8004392:	6963      	ldr	r3, [r4, #20]
 8004394:	b2ed      	uxtb	r5, r5
 8004396:	4283      	cmp	r3, r0
 8004398:	dc05      	bgt.n	80043a6 <__swbuf_r+0x56>
 800439a:	0021      	movs	r1, r4
 800439c:	0030      	movs	r0, r6
 800439e:	f7ff fcc1 	bl	8003d24 <_fflush_r>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d1ed      	bne.n	8004382 <__swbuf_r+0x32>
 80043a6:	68a3      	ldr	r3, [r4, #8]
 80043a8:	3001      	adds	r0, #1
 80043aa:	3b01      	subs	r3, #1
 80043ac:	60a3      	str	r3, [r4, #8]
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	6022      	str	r2, [r4, #0]
 80043b4:	701f      	strb	r7, [r3, #0]
 80043b6:	6963      	ldr	r3, [r4, #20]
 80043b8:	4283      	cmp	r3, r0
 80043ba:	d004      	beq.n	80043c6 <__swbuf_r+0x76>
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	07db      	lsls	r3, r3, #31
 80043c0:	d5e1      	bpl.n	8004386 <__swbuf_r+0x36>
 80043c2:	2d0a      	cmp	r5, #10
 80043c4:	d1df      	bne.n	8004386 <__swbuf_r+0x36>
 80043c6:	0021      	movs	r1, r4
 80043c8:	0030      	movs	r0, r6
 80043ca:	f7ff fcab 	bl	8003d24 <_fflush_r>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d0d9      	beq.n	8004386 <__swbuf_r+0x36>
 80043d2:	e7d6      	b.n	8004382 <__swbuf_r+0x32>

080043d4 <__swsetup_r>:
 80043d4:	4b2d      	ldr	r3, [pc, #180]	@ (800448c <__swsetup_r+0xb8>)
 80043d6:	b570      	push	{r4, r5, r6, lr}
 80043d8:	0005      	movs	r5, r0
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	000c      	movs	r4, r1
 80043de:	2800      	cmp	r0, #0
 80043e0:	d004      	beq.n	80043ec <__swsetup_r+0x18>
 80043e2:	6a03      	ldr	r3, [r0, #32]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <__swsetup_r+0x18>
 80043e8:	f7ff f9ee 	bl	80037c8 <__sinit>
 80043ec:	230c      	movs	r3, #12
 80043ee:	5ee2      	ldrsh	r2, [r4, r3]
 80043f0:	0713      	lsls	r3, r2, #28
 80043f2:	d423      	bmi.n	800443c <__swsetup_r+0x68>
 80043f4:	06d3      	lsls	r3, r2, #27
 80043f6:	d407      	bmi.n	8004408 <__swsetup_r+0x34>
 80043f8:	2309      	movs	r3, #9
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	2340      	movs	r3, #64	@ 0x40
 80043fe:	2001      	movs	r0, #1
 8004400:	4313      	orrs	r3, r2
 8004402:	81a3      	strh	r3, [r4, #12]
 8004404:	4240      	negs	r0, r0
 8004406:	e03a      	b.n	800447e <__swsetup_r+0xaa>
 8004408:	0752      	lsls	r2, r2, #29
 800440a:	d513      	bpl.n	8004434 <__swsetup_r+0x60>
 800440c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800440e:	2900      	cmp	r1, #0
 8004410:	d008      	beq.n	8004424 <__swsetup_r+0x50>
 8004412:	0023      	movs	r3, r4
 8004414:	3344      	adds	r3, #68	@ 0x44
 8004416:	4299      	cmp	r1, r3
 8004418:	d002      	beq.n	8004420 <__swsetup_r+0x4c>
 800441a:	0028      	movs	r0, r5
 800441c:	f7ff faf6 	bl	8003a0c <_free_r>
 8004420:	2300      	movs	r3, #0
 8004422:	6363      	str	r3, [r4, #52]	@ 0x34
 8004424:	2224      	movs	r2, #36	@ 0x24
 8004426:	89a3      	ldrh	r3, [r4, #12]
 8004428:	4393      	bics	r3, r2
 800442a:	81a3      	strh	r3, [r4, #12]
 800442c:	2300      	movs	r3, #0
 800442e:	6063      	str	r3, [r4, #4]
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	6023      	str	r3, [r4, #0]
 8004434:	2308      	movs	r3, #8
 8004436:	89a2      	ldrh	r2, [r4, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	6923      	ldr	r3, [r4, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <__swsetup_r+0x86>
 8004442:	21a0      	movs	r1, #160	@ 0xa0
 8004444:	2280      	movs	r2, #128	@ 0x80
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	0089      	lsls	r1, r1, #2
 800444a:	0092      	lsls	r2, r2, #2
 800444c:	400b      	ands	r3, r1
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <__swsetup_r+0x86>
 8004452:	0021      	movs	r1, r4
 8004454:	0028      	movs	r0, r5
 8004456:	f000 f89b 	bl	8004590 <__smakebuf_r>
 800445a:	230c      	movs	r3, #12
 800445c:	5ee2      	ldrsh	r2, [r4, r3]
 800445e:	2101      	movs	r1, #1
 8004460:	0013      	movs	r3, r2
 8004462:	400b      	ands	r3, r1
 8004464:	420a      	tst	r2, r1
 8004466:	d00b      	beq.n	8004480 <__swsetup_r+0xac>
 8004468:	2300      	movs	r3, #0
 800446a:	60a3      	str	r3, [r4, #8]
 800446c:	6963      	ldr	r3, [r4, #20]
 800446e:	425b      	negs	r3, r3
 8004470:	61a3      	str	r3, [r4, #24]
 8004472:	2000      	movs	r0, #0
 8004474:	6923      	ldr	r3, [r4, #16]
 8004476:	4283      	cmp	r3, r0
 8004478:	d101      	bne.n	800447e <__swsetup_r+0xaa>
 800447a:	0613      	lsls	r3, r2, #24
 800447c:	d4be      	bmi.n	80043fc <__swsetup_r+0x28>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	0791      	lsls	r1, r2, #30
 8004482:	d400      	bmi.n	8004486 <__swsetup_r+0xb2>
 8004484:	6963      	ldr	r3, [r4, #20]
 8004486:	60a3      	str	r3, [r4, #8]
 8004488:	e7f3      	b.n	8004472 <__swsetup_r+0x9e>
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	20000030 	.word	0x20000030

08004490 <_raise_r>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	0004      	movs	r4, r0
 8004494:	000d      	movs	r5, r1
 8004496:	291f      	cmp	r1, #31
 8004498:	d904      	bls.n	80044a4 <_raise_r+0x14>
 800449a:	2316      	movs	r3, #22
 800449c:	6003      	str	r3, [r0, #0]
 800449e:	2001      	movs	r0, #1
 80044a0:	4240      	negs	r0, r0
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d004      	beq.n	80044b4 <_raise_r+0x24>
 80044aa:	008a      	lsls	r2, r1, #2
 80044ac:	189b      	adds	r3, r3, r2
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2a00      	cmp	r2, #0
 80044b2:	d108      	bne.n	80044c6 <_raise_r+0x36>
 80044b4:	0020      	movs	r0, r4
 80044b6:	f000 f831 	bl	800451c <_getpid_r>
 80044ba:	002a      	movs	r2, r5
 80044bc:	0001      	movs	r1, r0
 80044be:	0020      	movs	r0, r4
 80044c0:	f000 f81a 	bl	80044f8 <_kill_r>
 80044c4:	e7ed      	b.n	80044a2 <_raise_r+0x12>
 80044c6:	2a01      	cmp	r2, #1
 80044c8:	d009      	beq.n	80044de <_raise_r+0x4e>
 80044ca:	1c51      	adds	r1, r2, #1
 80044cc:	d103      	bne.n	80044d6 <_raise_r+0x46>
 80044ce:	2316      	movs	r3, #22
 80044d0:	6003      	str	r3, [r0, #0]
 80044d2:	2001      	movs	r0, #1
 80044d4:	e7e5      	b.n	80044a2 <_raise_r+0x12>
 80044d6:	2100      	movs	r1, #0
 80044d8:	0028      	movs	r0, r5
 80044da:	6019      	str	r1, [r3, #0]
 80044dc:	4790      	blx	r2
 80044de:	2000      	movs	r0, #0
 80044e0:	e7df      	b.n	80044a2 <_raise_r+0x12>
	...

080044e4 <raise>:
 80044e4:	b510      	push	{r4, lr}
 80044e6:	4b03      	ldr	r3, [pc, #12]	@ (80044f4 <raise+0x10>)
 80044e8:	0001      	movs	r1, r0
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	f7ff ffd0 	bl	8004490 <_raise_r>
 80044f0:	bd10      	pop	{r4, pc}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	20000030 	.word	0x20000030

080044f8 <_kill_r>:
 80044f8:	2300      	movs	r3, #0
 80044fa:	b570      	push	{r4, r5, r6, lr}
 80044fc:	4d06      	ldr	r5, [pc, #24]	@ (8004518 <_kill_r+0x20>)
 80044fe:	0004      	movs	r4, r0
 8004500:	0008      	movs	r0, r1
 8004502:	0011      	movs	r1, r2
 8004504:	602b      	str	r3, [r5, #0]
 8004506:	f7fc ff5f 	bl	80013c8 <_kill>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	d103      	bne.n	8004516 <_kill_r+0x1e>
 800450e:	682b      	ldr	r3, [r5, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d000      	beq.n	8004516 <_kill_r+0x1e>
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	bd70      	pop	{r4, r5, r6, pc}
 8004518:	20000304 	.word	0x20000304

0800451c <_getpid_r>:
 800451c:	b510      	push	{r4, lr}
 800451e:	f7fc ff4d 	bl	80013bc <_getpid>
 8004522:	bd10      	pop	{r4, pc}

08004524 <memchr>:
 8004524:	b2c9      	uxtb	r1, r1
 8004526:	1882      	adds	r2, r0, r2
 8004528:	4290      	cmp	r0, r2
 800452a:	d101      	bne.n	8004530 <memchr+0xc>
 800452c:	2000      	movs	r0, #0
 800452e:	4770      	bx	lr
 8004530:	7803      	ldrb	r3, [r0, #0]
 8004532:	428b      	cmp	r3, r1
 8004534:	d0fb      	beq.n	800452e <memchr+0xa>
 8004536:	3001      	adds	r0, #1
 8004538:	e7f6      	b.n	8004528 <memchr+0x4>
	...

0800453c <__swhatbuf_r>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	000e      	movs	r6, r1
 8004540:	001d      	movs	r5, r3
 8004542:	230e      	movs	r3, #14
 8004544:	5ec9      	ldrsh	r1, [r1, r3]
 8004546:	0014      	movs	r4, r2
 8004548:	b096      	sub	sp, #88	@ 0x58
 800454a:	2900      	cmp	r1, #0
 800454c:	da0c      	bge.n	8004568 <__swhatbuf_r+0x2c>
 800454e:	89b2      	ldrh	r2, [r6, #12]
 8004550:	2380      	movs	r3, #128	@ 0x80
 8004552:	0011      	movs	r1, r2
 8004554:	4019      	ands	r1, r3
 8004556:	421a      	tst	r2, r3
 8004558:	d114      	bne.n	8004584 <__swhatbuf_r+0x48>
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	2000      	movs	r0, #0
 8004560:	6029      	str	r1, [r5, #0]
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	b016      	add	sp, #88	@ 0x58
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	466a      	mov	r2, sp
 800456a:	f000 f853 	bl	8004614 <_fstat_r>
 800456e:	2800      	cmp	r0, #0
 8004570:	dbed      	blt.n	800454e <__swhatbuf_r+0x12>
 8004572:	23f0      	movs	r3, #240	@ 0xf0
 8004574:	9901      	ldr	r1, [sp, #4]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	4019      	ands	r1, r3
 800457a:	4b04      	ldr	r3, [pc, #16]	@ (800458c <__swhatbuf_r+0x50>)
 800457c:	18c9      	adds	r1, r1, r3
 800457e:	424b      	negs	r3, r1
 8004580:	4159      	adcs	r1, r3
 8004582:	e7ea      	b.n	800455a <__swhatbuf_r+0x1e>
 8004584:	2100      	movs	r1, #0
 8004586:	2340      	movs	r3, #64	@ 0x40
 8004588:	e7e9      	b.n	800455e <__swhatbuf_r+0x22>
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	ffffe000 	.word	0xffffe000

08004590 <__smakebuf_r>:
 8004590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004592:	2602      	movs	r6, #2
 8004594:	898b      	ldrh	r3, [r1, #12]
 8004596:	0005      	movs	r5, r0
 8004598:	000c      	movs	r4, r1
 800459a:	b085      	sub	sp, #20
 800459c:	4233      	tst	r3, r6
 800459e:	d007      	beq.n	80045b0 <__smakebuf_r+0x20>
 80045a0:	0023      	movs	r3, r4
 80045a2:	3347      	adds	r3, #71	@ 0x47
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	6123      	str	r3, [r4, #16]
 80045a8:	2301      	movs	r3, #1
 80045aa:	6163      	str	r3, [r4, #20]
 80045ac:	b005      	add	sp, #20
 80045ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b0:	ab03      	add	r3, sp, #12
 80045b2:	aa02      	add	r2, sp, #8
 80045b4:	f7ff ffc2 	bl	800453c <__swhatbuf_r>
 80045b8:	9f02      	ldr	r7, [sp, #8]
 80045ba:	9001      	str	r0, [sp, #4]
 80045bc:	0039      	movs	r1, r7
 80045be:	0028      	movs	r0, r5
 80045c0:	f7ff fa9a 	bl	8003af8 <_malloc_r>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d108      	bne.n	80045da <__smakebuf_r+0x4a>
 80045c8:	220c      	movs	r2, #12
 80045ca:	5ea3      	ldrsh	r3, [r4, r2]
 80045cc:	059a      	lsls	r2, r3, #22
 80045ce:	d4ed      	bmi.n	80045ac <__smakebuf_r+0x1c>
 80045d0:	2203      	movs	r2, #3
 80045d2:	4393      	bics	r3, r2
 80045d4:	431e      	orrs	r6, r3
 80045d6:	81a6      	strh	r6, [r4, #12]
 80045d8:	e7e2      	b.n	80045a0 <__smakebuf_r+0x10>
 80045da:	2380      	movs	r3, #128	@ 0x80
 80045dc:	89a2      	ldrh	r2, [r4, #12]
 80045de:	6020      	str	r0, [r4, #0]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	81a3      	strh	r3, [r4, #12]
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	6120      	str	r0, [r4, #16]
 80045e8:	6167      	str	r7, [r4, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <__smakebuf_r+0x78>
 80045ee:	0028      	movs	r0, r5
 80045f0:	230e      	movs	r3, #14
 80045f2:	5ee1      	ldrsh	r1, [r4, r3]
 80045f4:	f000 f820 	bl	8004638 <_isatty_r>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d005      	beq.n	8004608 <__smakebuf_r+0x78>
 80045fc:	2303      	movs	r3, #3
 80045fe:	89a2      	ldrh	r2, [r4, #12]
 8004600:	439a      	bics	r2, r3
 8004602:	3b02      	subs	r3, #2
 8004604:	4313      	orrs	r3, r2
 8004606:	81a3      	strh	r3, [r4, #12]
 8004608:	89a3      	ldrh	r3, [r4, #12]
 800460a:	9a01      	ldr	r2, [sp, #4]
 800460c:	4313      	orrs	r3, r2
 800460e:	81a3      	strh	r3, [r4, #12]
 8004610:	e7cc      	b.n	80045ac <__smakebuf_r+0x1c>
	...

08004614 <_fstat_r>:
 8004614:	2300      	movs	r3, #0
 8004616:	b570      	push	{r4, r5, r6, lr}
 8004618:	4d06      	ldr	r5, [pc, #24]	@ (8004634 <_fstat_r+0x20>)
 800461a:	0004      	movs	r4, r0
 800461c:	0008      	movs	r0, r1
 800461e:	0011      	movs	r1, r2
 8004620:	602b      	str	r3, [r5, #0]
 8004622:	f7fc ff31 	bl	8001488 <_fstat>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d103      	bne.n	8004632 <_fstat_r+0x1e>
 800462a:	682b      	ldr	r3, [r5, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d000      	beq.n	8004632 <_fstat_r+0x1e>
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	20000304 	.word	0x20000304

08004638 <_isatty_r>:
 8004638:	2300      	movs	r3, #0
 800463a:	b570      	push	{r4, r5, r6, lr}
 800463c:	4d06      	ldr	r5, [pc, #24]	@ (8004658 <_isatty_r+0x20>)
 800463e:	0004      	movs	r4, r0
 8004640:	0008      	movs	r0, r1
 8004642:	602b      	str	r3, [r5, #0]
 8004644:	f7fc ff2e 	bl	80014a4 <_isatty>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d103      	bne.n	8004654 <_isatty_r+0x1c>
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d000      	beq.n	8004654 <_isatty_r+0x1c>
 8004652:	6023      	str	r3, [r4, #0]
 8004654:	bd70      	pop	{r4, r5, r6, pc}
 8004656:	46c0      	nop			@ (mov r8, r8)
 8004658:	20000304 	.word	0x20000304

0800465c <_init>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	46c0      	nop			@ (mov r8, r8)
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr

08004668 <_fini>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr
